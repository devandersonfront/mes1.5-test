{"ast":null,"code":"import _regeneratorRuntime from \"/Users/user/Desktop/sizl/mono_pop/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/user/Desktop/sizl/mono_pop/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/user/Desktop/sizl/mono_pop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { RequestMethod } from './RequestFunctions';\nexport var excelDownload = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(titleObj, infoList, fileName, sheetName, downloadIndexs) {\n    var tmpHeaders, tmpCells, body, res, downloadUrl, link;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            tmpHeaders = {\n              cells: [],\n              height: 0,\n              merges: []\n            };\n            tmpCells = [];\n\n            if (titleObj.length) {\n              tmpHeaders = {\n                cells: _toConsumableArray(titleObj.map(function (value) {\n                  var _value$name;\n\n                  return {\n                    key: value.key,\n                    text: {\n                      value: (_value$name = value.name) !== null && _value$name !== void 0 ? _value$name : \"\"\n                    },\n                    canModify: false\n                  };\n                })),\n                merges: []\n              };\n              infoList.map(function (value, index) {\n                if (downloadIndexs[index]) {\n                  tmpCells.push({\n                    cells: _toConsumableArray(tmpHeaders.cells.map(function (cells) {\n                      var _value$cells$key;\n\n                      return {\n                        text: {\n                          value: cells.key ? (_value$cells$key = value[cells.key]) !== null && _value$cells$key !== void 0 ? _value$cells$key : \"\" : \"\"\n                        },\n                        canModify: true,\n                        bold: {\n                          top: 0x1,\n                          bottom: 0x1,\n                          left: 0x1,\n                          right: 0x1\n                        }\n                      };\n                    })),\n                    merges: []\n                  });\n                }\n              });\n            }\n\n            body = {\n              sheets: [{\n                sheetName: sheetName,\n                rows: [tmpHeaders].concat(tmpCells)\n              }]\n            };\n            _context.next = 6;\n            return RequestMethod('post', \"excelDownload\", body, undefined, 'blob');\n\n          case 6:\n            res = _context.sent;\n\n            if (res) {\n              downloadUrl = window.URL.createObjectURL(new Blob([res]));\n              link = document.createElement('a');\n              link.href = downloadUrl;\n              link.setAttribute('download', \"\".concat(fileName, \".xls\")); //any other extension\n\n              document.body.appendChild(link);\n              link.click();\n              link.remove();\n            }\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function excelDownload(_x, _x2, _x3, _x4, _x5) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/main/common/excelDownloadFunction.ts"],"names":["RequestMethod","excelDownload","titleObj","infoList","fileName","sheetName","downloadIndexs","tmpHeaders","cells","height","merges","tmpCells","length","map","value","key","text","name","canModify","index","push","bold","top","bottom","left","right","body","sheets","rows","undefined","res","downloadUrl","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","appendChild","click","remove"],"mappings":";;;AACA,SAAQA,aAAR,QAA4B,oBAA5B;AAmCA,OAAO,IAAMC,aAAa;AAAA,sEAAG,iBAAOC,QAAP,EAAwBC,QAAxB,EAAyCC,QAAzC,EAA2DC,SAA3D,EAA8EC,cAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBC,YAAAA,UADuB,GACS;AAACC,cAAAA,KAAK,EAAE,EAAR;AAAYC,cAAAA,MAAM,EAAE,CAApB;AAAuBC,cAAAA,MAAM,EAAE;AAA/B,aADT;AAEvBC,YAAAA,QAFuB,GAES,EAFT;;AAI3B,gBAAGT,QAAQ,CAACU,MAAZ,EAAoB;AAClBL,cAAAA,UAAU,GAAG;AACXC,gBAAAA,KAAK,qBAAMN,QAAQ,CAACW,GAAT,CAAa,UAACC,KAAD,EAAW;AAAA;;AACjC,yBAAO;AACLC,oBAAAA,GAAG,EAAED,KAAK,CAACC,GADN;AAELC,oBAAAA,IAAI,EAAE;AACJF,sBAAAA,KAAK,iBAAEA,KAAK,CAACG,IAAR,qDAAgB;AADjB,qBAFD;AAKLC,oBAAAA,SAAS,EAAE;AALN,mBAAP;AAOD,iBARU,CAAN,CADM;AAUXR,gBAAAA,MAAM,EAAE;AAVG,eAAb;AAaAP,cAAAA,QAAQ,CAACU,GAAT,CAAc,UAACC,KAAD,EAAOK,KAAP,EAAiB;AAC7B,oBAAGb,cAAc,CAACa,KAAD,CAAjB,EAAyB;AACvBR,kBAAAA,QAAQ,CAACS,IAAT,CAAc;AACZZ,oBAAAA,KAAK,qBAAMD,UAAU,CAACC,KAAX,CAAiBK,GAAjB,CAAqB,UAAAL,KAAK,EAAI;AAAA;;AACvC,6BAAO;AACLQ,wBAAAA,IAAI,EAAE;AACJF,0BAAAA,KAAK,EAAEN,KAAK,CAACO,GAAN,uBAAYD,KAAK,CAACN,KAAK,CAACO,GAAP,CAAjB,+DAAgC,EAAhC,GAAqC;AADxC,yBADD;AAILG,wBAAAA,SAAS,EAAE,IAJN;AAKLG,wBAAAA,IAAI,EAAC;AACHC,0BAAAA,GAAG,EAAC,GADD;AAEHC,0BAAAA,MAAM,EAAC,GAFJ;AAGHC,0BAAAA,IAAI,EAAC,GAHF;AAIHC,0BAAAA,KAAK,EAAC;AAJH;AALA,uBAAP;AAYD,qBAbU,CAAN,CADO;AAeZf,oBAAAA,MAAM,EAAE;AAfI,mBAAd;AAiBD;AACF,eApBD;AAqBD;;AAEKgB,YAAAA,IAzCqB,GAyCd;AACXC,cAAAA,MAAM,EAAE,CAAC;AACPtB,gBAAAA,SAAS,EAAEA,SADJ;AAEPuB,gBAAAA,IAAI,GACFrB,UADE,SAECI,QAFD;AAFG,eAAD;AADG,aAzCc;AAAA;AAAA,mBAkDTX,aAAa,CAAC,MAAD,mBAA0B0B,IAA1B,EAAgCG,SAAhC,EAA2C,MAA3C,CAlDJ;;AAAA;AAkDrBC,YAAAA,GAlDqB;;AAoD3B,gBAAIA,GAAJ,EAAS;AACDC,cAAAA,WADC,GACaC,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2B,IAAIC,IAAJ,CAAS,CAACL,GAAD,CAAT,CAA3B,CADb;AAEDM,cAAAA,IAFC,GAEMC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAFN;AAGPF,cAAAA,IAAI,CAACG,IAAL,GAAYR,WAAZ;AACAK,cAAAA,IAAI,CAACI,YAAL,CAAkB,UAAlB,YAAiCpC,QAAjC,WAJO,CAI2C;;AAClDiC,cAAAA,QAAQ,CAACX,IAAT,CAAce,WAAd,CAA0BL,IAA1B;AACAA,cAAAA,IAAI,CAACM,KAAL;AACAN,cAAAA,IAAI,CAACO,MAAL;AACD;;AA5D0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAb1C,aAAa;AAAA;AAAA;AAAA,GAAnB","sourcesContent":["import {SF_ENDPOINT_EXCEL, TOKEN_NAME} from './configset'\nimport {RequestMethod} from './RequestFunctions'\n\ninterface ExcelCellTextType {\n  fontSize?: number\n  value: string\n  color?: string\n  bold?: boolean\n}\n\ninterface ExcelCellBorderType {\n  top?: number\n  bottom?: number\n  left?: number\n  right?: number\n}\n\ninterface ExcelCellMergeType {\n  mergeFrom: number,\n  mergeTo: number\n}\n\ninterface ExcelCellType {\n  key?: string\n  text: ExcelCellTextType\n  canModify: boolean\n  bgColor?: string\n  border?: ExcelCellBorderType\n}\n\ninterface ExcelDownloadType {\n  height?: number\n  cells: ExcelCellType[]\n  merges: ExcelCellMergeType[]\n}\n\nexport const excelDownload = async (titleObj: any[], infoList: any[], fileName: string, sheetName: string, downloadIndexs: boolean[]) => {\n  let tmpHeaders: ExcelDownloadType = {cells: [], height: 0, merges: []}\n  let tmpCells: ExcelDownloadType[] = []\n\n  if(titleObj.length) {\n    tmpHeaders = {\n      cells: [...titleObj.map((value) => {\n        return {\n          key: value.key,\n          text: {\n            value: value.name ?? \"\",\n          },\n          canModify: false,\n        }\n      })],\n      merges: []\n    }\n\n    infoList.map(((value,index) => {\n      if(downloadIndexs[index]){\n        tmpCells.push({\n          cells: [...tmpHeaders.cells.map(cells => {\n            return {\n              text: {\n                value: cells.key ? value[cells.key] ?? \"\" : \"\",\n              },\n              canModify: true,\n              bold:{\n                top:0x1,\n                bottom:0x1,\n                left:0x1,\n                right:0x1\n              }\n            }\n          })],\n          merges: []\n        })\n      }\n    }))\n  }\n\n  const body = {\n    sheets: [{\n      sheetName: sheetName,\n      rows: [\n        tmpHeaders,\n        ...tmpCells\n      ]\n    }]\n  }\n  const res = await RequestMethod('post', `excelDownload`, body, undefined, 'blob')\n\n  if (res) {\n    const downloadUrl = window.URL.createObjectURL(new Blob([res]));\n    const link = document.createElement('a');\n    link.href = downloadUrl;\n    link.setAttribute('download', `${fileName}.xls`); //any other extension\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}