{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/basic/src/container/BasicCustomer.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { ExcelTable, Header as PageHeader, RequestMethod, columnlist, TextEditor, excelDownload, PaginationComponent } from 'shared'; // @ts-ignore\n\nimport { SelectColumn } from 'react-data-grid';\nimport Notiflix from \"notiflix\";\nimport { useRouter } from 'next/router';\nimport styled from 'styled-components';\nconst title = '권한 관리';\n\nconst BasicCustomer = ({\n  page,\n  keyword,\n  option\n}) => {\n  const router = useRouter();\n  const {\n    0: excelOpen,\n    1: setExcelOpen\n  } = useState(false);\n  const {\n    0: excelUploadOpen,\n    1: setExcelUploadOpen\n  } = useState(false);\n  const {\n    0: basicRow,\n    1: setBasicRow\n  } = useState([{\n    name: \"\",\n    id: \"\"\n  }]);\n  const {\n    0: column,\n    1: setColumn\n  } = useState(columnlist[\"customer\"]);\n  const {\n    0: selectList,\n    1: setSelectList\n  } = useState(new Set());\n  const {\n    0: optionList,\n    1: setOptionList\n  } = useState(['고객사명', '대표자명', '담당자명', '전화 번호', '휴대폰 번호', '팩스 번호', '주소', '사업자 번호']);\n  const {\n    0: optionIndex,\n    1: setOptionIndex\n  } = useState(option);\n  const {\n    0: pageInfo,\n    1: setPageInfo\n  } = useState({\n    page: 1,\n    total: 1\n  });\n  useEffect(() => {\n    if (keyword) {\n      SearchBasic(keyword, option, page).then(() => {\n        Notiflix.Loading.remove();\n      });\n    } else {\n      LoadBasic(page).then(() => {\n        Notiflix.Loading.remove();\n      }).then(() => {\n        Notiflix.Loading.remove();\n      });\n    }\n  }, [page, keyword, option]);\n\n  const SaveBasic = async () => {\n    let res;\n    res = await RequestMethod('post', `customerSave`, {\n      ['customers']: basicRow.map((row, i) => {\n        if (selectList.has(row.id)) {\n          let selectKey = [];\n          let additional = [];\n          column.map(v => {\n            if (v.selectList) {\n              selectKey.push(v.key);\n            }\n\n            if (v.type === 'additional') {\n              additional.push(v);\n            }\n          });\n          let selectData = {};\n          Object.keys(row).map(v => {\n            if (v.indexOf('PK') !== -1) {\n              selectData = _objectSpread(_objectSpread({}, selectData), {}, {\n                [v.split('PK')[0]]: row[v]\n              });\n            }\n\n            if (v === 'unitWeight') {\n              selectData = _objectSpread(_objectSpread({}, selectData), {}, {\n                unitWeight: Number(row['unitWeight'])\n              });\n            }\n\n            if (v === 'tmpId') {\n              selectData = _objectSpread(_objectSpread({}, selectData), {}, {\n                id: row['tmpId']\n              });\n            }\n          });\n          return _objectSpread(_objectSpread(_objectSpread({}, row), selectData), {}, {\n            additional: [...additional.map(v => {\n              if (row[v.name]) {\n                return {\n                  id: v.id,\n                  title: v.name,\n                  value: row[v.name],\n                  unit: v.unit\n                };\n              }\n            }).filter(v => v)]\n          });\n        }\n      }).filter(v => v)\n    });\n\n    if (res) {\n      if (res.status === 200) {\n        Notiflix.Report.success('저장되었습니다.', '', '확인');\n\n        if (keyword) {\n          SearchBasic(keyword, option, page).then(() => {\n            Notiflix.Loading.remove();\n          });\n        } else {\n          LoadBasic(page).then(() => {\n            Notiflix.Loading.remove();\n          });\n        }\n      }\n    }\n  };\n\n  const DeleteBasic = async () => {\n    const res = await RequestMethod('delete', `customerDelete`, {\n      ['customers']: basicRow.map((row, i) => {\n        if (selectList.has(row.id)) {\n          let pk = \"\";\n          Object.keys(row).map(v => {\n            if (v.indexOf(\"_id\") !== -1) {\n              pk = v;\n            }\n          });\n          return row[pk];\n        }\n      }).filter(v => v)\n    });\n\n    if (res) {\n      if (res.status === 200) {\n        Notiflix.Report.success('삭제 성공!', '', '확인', () => {\n          if (Number(page) === 1) {\n            LoadBasic(1).then(() => {\n              Notiflix.Loading.remove();\n            });\n          } else {\n            if (keyword) {\n              router.push(`/mes/basic/customer?page=1&keyword=${keyword}&opt=${option}`);\n            } else {\n              router.push(`/mes/basic/customer?page=1`);\n            }\n          }\n        });\n      }\n    }\n  };\n\n  const LoadBasic = async page => {\n    Notiflix.Loading.circle();\n    const res = await RequestMethod('get', `customerList`, {\n      path: {\n        page: page || page !== 0 ? page : 1,\n        renderItem: 18\n      }\n    });\n\n    if (res && res.status === 200) {\n      if (res.results.totalPages < page) {\n        LoadBasic(page - 1);\n      } else {\n        setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n          page: res.results.page,\n          total: res.results.totalPages\n        }));\n        cleanUpData(res);\n      }\n    } else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back();\n      });\n    }\n  };\n\n  const SearchBasic = async (keyword, option, isPaging) => {\n    Notiflix.Loading.circle();\n\n    if (!isPaging) {\n      setOptionIndex(option);\n    }\n\n    const res = await RequestMethod('get', `customerSearch`, {\n      path: {\n        page: isPaging !== null && isPaging !== void 0 ? isPaging : 1,\n        renderItem: 18\n      },\n      params: {\n        keyword: keyword !== null && keyword !== void 0 ? keyword : '',\n        opt: option !== null && option !== void 0 ? option : 0\n      }\n    });\n\n    if (res && res.status === 200) {\n      setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n        page: res.results.page,\n        total: res.results.totalPages\n      }));\n      cleanUpData(res);\n    }\n  };\n\n  const cleanUpBasicData = res => {\n    let tmpRow = res.data.results.info_list;\n    let tmpBasicRow = tmpRow.map((row, index) => {\n      let appendAdditional = {};\n      row.additional && row.additional.map(v => {\n        appendAdditional = _objectSpread(_objectSpread({}, appendAdditional), {}, {\n          [v.title]: v.value\n        });\n      });\n      let random_id = Math.random() * 1000;\n      return _objectSpread(_objectSpread(_objectSpread({}, row), {}, {\n        customer_id: row.customer_id,\n        name: row.name,\n        rep: row.rep,\n        telephone: row.telephone,\n        manager: row.manager,\n        cellphone: row.cellphone,\n        fax: row.fax,\n        photo: row.photo,\n        crn: row.crn,\n        address: row.address,\n        password: '-'\n      }, appendAdditional), {}, {\n        id: `customer_${random_id}`\n      });\n    });\n    setBasicRow([...tmpBasicRow]);\n  };\n\n  const cleanUpData = async res => {\n    let tmpColumn = columnlist[\"customer\"];\n    let tmpRow = [];\n    tmpColumn = tmpColumn.map(column => {\n      let menuData;\n      res.results.menus && res.results.menus.map(menu => {\n        if (menu.colName === column.key) {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit,\n            moddable: !menu.moddable\n          };\n        } else if (menu.colName === 'id' && column.key === 'tmpId') {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit,\n            moddable: !menu.moddable\n          };\n        }\n      });\n\n      if (menuData) {\n        return _objectSpread(_objectSpread({}, column), menuData);\n      }\n    }).filter(v => v);\n    let additionalMenus = res.results.menus ? res.results.menus.map(menu => {\n      if (menu.colName === null) {\n        return {\n          id: menu.id,\n          name: menu.title,\n          width: menu.width,\n          key: menu.title,\n          editor: TextEditor,\n          type: 'additional',\n          unit: menu.unit\n        };\n      }\n    }).filter(v => v) : [];\n    tmpRow = res.results.info_list;\n    let selectKey = \"\";\n    let additionalData = [];\n    tmpColumn.map(v => {\n      if (v.selectList) {\n        selectKey = v.key;\n      }\n    });\n    additionalMenus.map(v => {\n      if (v.type === 'additional') {\n        additionalData.push(v.key);\n      }\n    });\n    setColumn([...tmpColumn.map(v => {\n      return _objectSpread(_objectSpread({}, v), {}, {\n        name: v.moddable ? v.name + '(필수)' : v.name\n      });\n    }), ...additionalMenus]);\n    let pk = \"\";\n    Object.keys(tmpRow).map(v => {\n      if (v.indexOf('_id') !== -1) {\n        pk = v;\n      }\n    });\n    let tmpBasicRow = tmpRow.map((row, index) => {\n      let appendAdditional = {};\n      row.additional && row.additional.map(v => {\n        appendAdditional = _objectSpread(_objectSpread({}, appendAdditional), {}, {\n          [v.title]: v.value\n        });\n      });\n      let random_id = Math.random() * 1000;\n      return _objectSpread(_objectSpread(_objectSpread({}, row), {}, {\n        customer_id: row.customer_id,\n        name: row.name,\n        rep: row.rep,\n        telephone: row.telephone,\n        manager: row.manager,\n        cellphone: row.cellphone,\n        fax: row.fax,\n        photo: row.photo,\n        crn: row.crn,\n        address: row.address,\n        password: '-'\n      }, appendAdditional), {}, {\n        id: `customer_${random_id}`\n      });\n    });\n    setBasicRow([...tmpBasicRow]);\n  };\n\n  const downloadExcel = () => {\n    let tmpSelectList = [];\n    basicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id));\n    });\n    excelDownload(column, basicRow, `${\"customer\"}`, \"customer\", tmpSelectList);\n  };\n\n  const onClickHeaderButton = index => {\n    switch (index) {\n      case 0:\n        setExcelUploadOpen(true);\n        break;\n\n      case 1:\n        setExcelOpen(true);\n        break;\n\n      case 2:\n        router.push(`/mes/item/manage/customer`);\n        break;\n\n      case 3:\n        let items = {};\n        let random_id = Math.random() * 1000;\n        column.map(value => {\n          if (value.selectList && value.selectList.length) {\n            items = _objectSpread(_objectSpread({}, value.selectList[0]), {}, {\n              [value.key]: value.selectList[0].name,\n              [value.key + 'PK']: value.selectList[0].pk\n            }, items);\n          }\n        });\n        setBasicRow([_objectSpread(_objectSpread({}, items), {}, {\n          id: `customer_${random_id}`,\n          name: null,\n          additional: []\n        }), ...basicRow]);\n        break;\n\n      case 4:\n        SaveBasic();\n        break;\n\n      case 5:\n        Notiflix.Confirm.show(\"경고\", \"삭제하시겠습니까?\", \"확인\", \"취소\", () => {\n          DeleteBasic();\n        }, () => {});\n        break;\n    }\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 5\n    }\n  }, __jsx(PageHeader, {\n    isSearch: true,\n    searchKeyword: keyword,\n    onChangeSearchKeyword: keyword => {\n      if (keyword) {\n        router.push(`/mes/basic/customer?page=1&keyword=${keyword}&opt=${optionIndex}`);\n      } else {\n        router.push(`/mes/basic/customer?page=1&keyword=`);\n      }\n    },\n    searchOptionList: optionList,\n    onChangeSearchOption: option => {\n      setOptionIndex(option);\n    },\n    optionIndex: optionIndex,\n    title: \"거래처 정보 관리\",\n    buttons: [\"엑셀로 등록\", '엑셀로 받기', '항목관리', '행 추가', '저장하기', '삭제'],\n    buttonsOnclick: onClickHeaderButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 7\n    }\n  }), __jsx(ExcelTable, {\n    editable: true,\n    resizable: true,\n    headerList: [SelectColumn, ...column],\n    row: basicRow // setRow={setBasicRow}\n    ,\n    setRow: e => {\n      let tmp = selectList;\n      e.map(v => {\n        if (v.isChange) tmp.add(v.id);\n      });\n      setSelectList(tmp);\n      setBasicRow(e);\n    },\n    selectList: selectList //@ts-ignore\n    ,\n    setSelectList: setSelectList,\n    height: basicRow.length * 40 >= 40 * 18 + 56 ? 40 * 19 : basicRow.length * 40 + 56,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 7\n    }\n  }), __jsx(PaginationComponent, {\n    currentPage: pageInfo.page,\n    totalPage: pageInfo.total,\n    setPage: page => {\n      if (keyword) {\n        router.push(`/mes/basic/customer?page=${page}&keyword=${keyword}&opt=${option}`);\n      } else {\n        router.push(`/mes/basic/customer?page=${page}`);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst HeaderButton = styled.button`\n    height:32px;\n    color:white;\n    border-radius:6px;\n    font-size:15px;\n    font-weight:bold;\n    background:#717C90;\n    padding: 0 20px;\n    cursor: pointer;\n    display:flex;\n    margin-left: 16px;\n    justify-content:center;\n    align-items:center;\n`;\nexport { BasicCustomer };","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/basic/src/container/BasicCustomer.tsx"],"names":["React","useEffect","useState","ExcelTable","Header","PageHeader","RequestMethod","columnlist","TextEditor","excelDownload","PaginationComponent","SelectColumn","Notiflix","useRouter","styled","title","BasicCustomer","page","keyword","option","router","excelOpen","setExcelOpen","excelUploadOpen","setExcelUploadOpen","basicRow","setBasicRow","name","id","column","setColumn","selectList","setSelectList","Set","optionList","setOptionList","optionIndex","setOptionIndex","pageInfo","setPageInfo","total","SearchBasic","then","Loading","remove","LoadBasic","SaveBasic","res","map","row","i","has","selectKey","additional","v","push","key","type","selectData","Object","keys","indexOf","split","unitWeight","Number","value","unit","filter","status","Report","success","DeleteBasic","pk","circle","path","renderItem","results","totalPages","cleanUpData","state","failure","back","isPaging","params","opt","cleanUpBasicData","tmpRow","data","info_list","tmpBasicRow","index","appendAdditional","random_id","Math","random","customer_id","rep","telephone","manager","cellphone","fax","photo","crn","address","password","tmpColumn","menuData","menus","menu","colName","width","tab","moddable","additionalMenus","editor","additionalData","downloadExcel","tmpSelectList","onClickHeaderButton","items","length","Confirm","show","e","tmp","isChange","add","HeaderButton","button"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {\n  ExcelTable,\n  Header as PageHeader,\n  RequestMethod,\n  columnlist,\n  MAX_VALUE,\n  DropDownEditor,\n  TextEditor,\n  excelDownload,\n  PaginationComponent,\n  ExcelDownloadModal,\n  IExcelHeaderType, IItemMenuType\n} from 'shared'\n// @ts-ignore\nimport {SelectColumn} from 'react-data-grid'\nimport Notiflix from \"notiflix\";\nimport {useRouter} from 'next/router'\nimport {loadAll} from 'react-cookies'\nimport {NextPageContext} from 'next'\nimport TreeViewTable from '../../../main/component/TreeView/TreeView'\nimport {IMenu} from '../../../main/common/@types/type'\nimport {AUTHORITY_LIST} from '../../../main/common/configset'\nimport {AxiosResponse} from 'axios'\nimport styled from 'styled-components'\n\nexport interface IProps {\n  children?: any\n  page?: number\n  keyword?: string\n  option?: number\n}\n\nconst title = '권한 관리'\n\nconst BasicCustomer = ({page, keyword, option}: IProps) => {\n  const router = useRouter()\n\n  const [excelOpen, setExcelOpen] = useState<boolean>(false)\n  const [excelUploadOpen, setExcelUploadOpen] = useState<boolean>(false);\n  const [basicRow, setBasicRow] = useState<Array<any>>([{\n    name: \"\", id: \"\"\n  }])\n  const [column, setColumn] = useState<Array<IExcelHeaderType>>(columnlist[\"customer\"]);\n  const [selectList, setSelectList] = useState<Set<number>>(new Set())\n  const [optionList, setOptionList] = useState<string[]>(['고객사명', '대표자명', '담당자명', '전화 번호','휴대폰 번호', '팩스 번호', '주소', '사업자 번호'])\n  const [optionIndex, setOptionIndex] = useState<number>(option)\n\n  const [pageInfo, setPageInfo] = useState<{page: number, total: number}>({\n    page: 1,\n    total: 1\n  })\n\n  useEffect(() => {\n    if(keyword){\n      SearchBasic(keyword, option, page).then(() => {\n        Notiflix.Loading.remove()\n      })\n    }else{\n      LoadBasic(page).then(() => {\n        Notiflix.Loading.remove()\n      }).then(() => {\n        Notiflix.Loading.remove()\n      })\n    }\n  }, [page, keyword, option])\n\n  const SaveBasic = async () => {\n    let res: any\n    res = await RequestMethod('post', `customerSave`,\n      {\n        [ 'customers']: basicRow.map((row, i) => {\n          if(selectList.has(row.id)){\n            let selectKey: string[] = []\n            let additional:any[] = []\n            column.map((v) => {\n              if(v.selectList){\n                selectKey.push(v.key)\n              }\n\n              if(v.type === 'additional'){\n                additional.push(v)\n              }\n            })\n\n            let selectData: any = {}\n\n            Object.keys(row).map(v => {\n              if(v.indexOf('PK') !== -1) {\n                selectData = {\n                  ...selectData,\n                  [v.split('PK')[0]]: row[v]\n                }\n              }\n\n              if(v === 'unitWeight') {\n                selectData = {\n                  ...selectData,\n                  unitWeight: Number(row['unitWeight'])\n                }\n              }\n\n              if(v === 'tmpId') {\n                selectData = {\n                  ...selectData,\n                  id: row['tmpId']\n                }\n              }\n            })\n\n            return {\n              ...row,\n              ...selectData,\n              additional: [\n                ...additional.map(v => {\n                  if(row[v.name]) {\n                    return {\n                      id: v.id,\n                      title: v.name,\n                      value: row[v.name],\n                      unit: v.unit\n                    }\n                  }\n                }).filter((v) => v)\n              ]\n            }\n\n          }\n        }).filter((v) => v)\n      })\n\n\n    if(res){\n      if(res.status === 200){\n        Notiflix.Report.success('저장되었습니다.','','확인');\n        if(keyword){\n          SearchBasic(keyword, option, page).then(() => {\n            Notiflix.Loading.remove()\n          })\n        }else{\n          LoadBasic(page).then(() => {\n            Notiflix.Loading.remove()\n          })\n        }\n      }\n    }\n  }\n\n  const DeleteBasic = async () => {\n    const res = await RequestMethod('delete', `customerDelete`,\n      {\n        [ 'customers']: basicRow.map((row, i) => {\n          if(selectList.has(row.id)){\n            let pk = \"\"\n            Object.keys(row).map((v:string) => {\n              if(v.indexOf(\"_id\") !== -1){\n                pk = v\n              }\n            })\n            return row[pk]\n          }\n        }).filter((v) => v)\n      })\n\n    if(res) {\n      if(res.status === 200){\n        Notiflix.Report.success('삭제 성공!', '', '확인', () => {\n          if(Number(page) === 1){\n            LoadBasic(1).then(() => {\n              Notiflix.Loading.remove()\n            })\n          }else{\n            if(keyword){\n              router.push(`/mes/basic/customer?page=1&keyword=${keyword}&opt=${option}`)\n            }else{\n              router.push(`/mes/basic/customer?page=1`)\n            }\n          }\n        })\n      }\n    }\n  }\n\n  const LoadBasic = async (page?: number) => {\n    Notiflix.Loading.circle()\n    const res = await RequestMethod('get', `customerList`, {\n      path: {\n        page: (page || page !== 0) ? page : 1,\n        renderItem: 18,\n      }\n    })\n\n    if(res && res.status === 200){\n      if(res.results.totalPages < page){\n        LoadBasic(page - 1)\n      }else{\n        setPageInfo({\n          ...pageInfo,\n          page: res.results.page,\n          total: res.results.totalPages\n        })\n        cleanUpData(res)\n      }\n    }else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back()\n      })\n    }\n  }\n\n\n  const SearchBasic = async (keyword: any, option: number, isPaging?: number) => {\n    Notiflix.Loading.circle()\n    if(!isPaging){\n      setOptionIndex(option)\n    }\n\n    const res = await RequestMethod('get', `customerSearch`,{\n      path: {\n        page: isPaging ?? 1,\n        renderItem: 18,\n      },\n      params: {\n        keyword: keyword ?? '',\n        opt: option ?? 0\n      }\n    })\n\n    if(res && res.status === 200){\n      setPageInfo({\n        ...pageInfo,\n        page: res.results.page,\n        total: res.results.totalPages\n      })\n      cleanUpData(res)\n    }\n  }\n  const cleanUpBasicData = (res:any) => {\n    let tmpRow = res.data.results.info_list;\n\n    let tmpBasicRow = tmpRow.map((row: any, index: number) => {\n\n      let appendAdditional: any = {}\n\n      row.additional && row.additional.map((v: any) => {\n        appendAdditional = {\n          ...appendAdditional,\n          [v.title]: v.value\n        }\n      })\n      let random_id = Math.random()*1000;\n      return {\n        ...row,\n        customer_id: row.customer_id,\n        name: row.name,\n        rep: row.rep,\n        telephone: row.telephone,\n        manager: row.manager,\n        cellphone: row.cellphone,\n        fax: row.fax,\n        photo: row.photo,\n        crn: row.crn,\n        address: row.address,\n        password: '-',\n        ...appendAdditional,\n        id: `customer_${random_id}`,\n      }\n    })\n    setBasicRow([...tmpBasicRow])\n  }\n  const cleanUpData = async(res: any) => {\n\n    let tmpColumn = columnlist[\"customer\"]\n    let tmpRow = []\n    tmpColumn = tmpColumn.map((column: any) => {\n      let menuData: object | undefined;\n      res.results.menus && res.results.menus.map((menu: any) => {\n        if(menu.colName === column.key){\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab:menu.tab,\n            unit:menu.unit,\n            moddable: !menu.moddable\n          }\n        } else if(menu.colName === 'id' && column.key === 'tmpId'){\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab:menu.tab,\n            unit:menu.unit,\n            moddable: !menu.moddable\n          }\n        }\n      })\n\n      if(menuData){\n        return {\n          ...column,\n          ...menuData\n        }\n      }\n    }).filter((v:any) => v)\n\n    let additionalMenus = res.results.menus ? res.results.menus.map((menu:any) => {\n      if(menu.colName === null){\n        return {\n          id: menu.id,\n          name: menu.title,\n          width: menu.width,\n          key: menu.title,\n          editor: TextEditor,\n          type: 'additional',\n          unit: menu.unit\n        }\n      }\n    }).filter((v: any) => v) : []\n\n\n    tmpRow = res.results.info_list\n\n    let selectKey = \"\"\n    let additionalData: any[] = []\n    tmpColumn.map((v: any) => {\n      if(v.selectList){\n        selectKey = v.key\n      }\n    })\n\n    additionalMenus.map((v: any) => {\n      if(v.type === 'additional'){\n        additionalData.push(v.key)\n      }\n    })\n\n    setColumn([...tmpColumn.map(v=> {\n      return {\n        ...v,\n        name: v.moddable ? v.name+'(필수)' : v.name\n      }\n    }), ...additionalMenus])\n\n    let pk = \"\";\n    Object.keys(tmpRow).map((v) => {\n      if(v.indexOf('_id') !== -1){\n        pk = v\n      }\n    })\n\n    let tmpBasicRow = tmpRow.map((row: any, index: number) => {\n\n      let appendAdditional: any = {}\n\n      row.additional && row.additional.map((v: any) => {\n        appendAdditional = {\n          ...appendAdditional,\n          [v.title]: v.value\n        }\n      })\n      let random_id = Math.random()*1000;\n      return {\n        ...row,\n        customer_id: row.customer_id,\n        name: row.name,\n        rep: row.rep,\n        telephone: row.telephone,\n        manager: row.manager,\n        cellphone: row.cellphone,\n        fax: row.fax,\n        photo: row.photo,\n        crn: row.crn,\n        address: row.address,\n        password: '-',\n        ...appendAdditional,\n        id: `customer_${random_id}`,\n      }\n    })\n\n\n    setBasicRow([...tmpBasicRow])\n  }\n\n  const downloadExcel = () => {\n    let tmpSelectList: boolean[] = []\n    basicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id))\n    })\n    excelDownload(column, basicRow, `${\"customer\"}`, \"customer\", tmpSelectList)\n  }\n\n  const onClickHeaderButton = (index: number) => {\n    switch (index) {\n      case 0:\n        setExcelUploadOpen(true)\n        break;\n      case 1:\n        setExcelOpen(true)\n        break;\n      case 2:\n\n        router.push(`/mes/item/manage/customer`)\n\n        break;\n      case 3:\n        let items = {}\n        let random_id = Math.random()*1000;\n        column.map((value) => {\n          if (value.selectList && value.selectList.length) {\n            items = {\n              ...value.selectList[0],\n              [value.key]: value.selectList[0].name,\n              [value.key + 'PK']: value.selectList[0].pk,//여기 봐야됨!\n              ...items,\n            }\n          }\n        })\n\n        setBasicRow([\n          {\n            ...items,\n            id: `customer_${random_id}`,\n            name: null,\n            additional: [],\n          },\n          ...basicRow\n        ])\n\n        break;\n\n      case 4:\n        SaveBasic()\n\n        break;\n      case 5:\n        Notiflix.Confirm.show(\"경고\",\"삭제하시겠습니까?\",\"확인\",\"취소\",\n          ()=>{DeleteBasic()}\n          ,()=>{}\n        )\n        break;\n\n    }\n  }\n\n  return (\n    <div>\n      <PageHeader\n        isSearch\n        searchKeyword={keyword}\n        onChangeSearchKeyword={(keyword) => {\n          if(keyword){\n            router.push(`/mes/basic/customer?page=1&keyword=${keyword}&opt=${optionIndex}`)\n          }else{\n            router.push(`/mes/basic/customer?page=1&keyword=`)\n          }\n        }}\n        searchOptionList={optionList}\n        onChangeSearchOption={(option) => {\n          setOptionIndex(option)\n        }}\n        optionIndex={optionIndex}\n        title={\"거래처 정보 관리\"}\n        buttons={\n          [\"엑셀로 등록\",'엑셀로 받기', '항목관리', '행 추가', '저장하기', '삭제']\n        }\n        buttonsOnclick={onClickHeaderButton}\n      />\n      <ExcelTable\n        editable\n        resizable\n        headerList={[\n          SelectColumn,\n          ...column\n        ]}\n        row={basicRow}\n        // setRow={setBasicRow}\n        setRow={(e) => {\n          let tmp: Set<any> = selectList\n          e.map(v => {\n            if(v.isChange) tmp.add(v.id)\n          })\n          setSelectList(tmp)\n          setBasicRow(e)\n        }}\n        selectList={selectList}\n        //@ts-ignore\n        setSelectList={setSelectList}\n        height={basicRow.length * 40 >= 40*18+56 ? 40*19 : basicRow.length * 40 + 56}\n      />\n      <PaginationComponent\n        currentPage={pageInfo.page}\n        totalPage={pageInfo.total}\n        setPage={(page) => {\n          if(keyword){\n            router.push(`/mes/basic/customer?page=${page}&keyword=${keyword}&opt=${option}`)\n          }else{\n            router.push(`/mes/basic/customer?page=${page}`)\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nconst HeaderButton = styled.button`\n    height:32px;\n    color:white;\n    border-radius:6px;\n    font-size:15px;\n    font-weight:bold;\n    background:#717C90;\n    padding: 0 20px;\n    cursor: pointer;\n    display:flex;\n    margin-left: 16px;\n    justify-content:center;\n    align-items:center;\n`;\n\nexport {BasicCustomer};\n"]},"metadata":{},"sourceType":"module"}