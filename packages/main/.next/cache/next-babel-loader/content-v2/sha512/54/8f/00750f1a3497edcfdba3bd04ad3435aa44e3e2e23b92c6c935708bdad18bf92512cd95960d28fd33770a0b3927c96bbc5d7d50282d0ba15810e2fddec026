{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/basic/src/container/BasicModel.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { ExcelTable, Header as PageHeader, RequestMethod, columnlist, MAX_VALUE, TextEditor, excelDownload, PaginationComponent } from 'shared'; // @ts-ignore\n\nimport { SelectColumn } from 'react-data-grid';\nimport Notiflix from \"notiflix\";\nimport { useRouter } from 'next/router';\nimport styled from 'styled-components';\nconst title = '권한 관리';\n\nconst BasicModel = ({\n  page,\n  keyword,\n  option\n}) => {\n  const router = useRouter();\n  const {\n    0: excelOpen,\n    1: setExcelOpen\n  } = useState(false);\n  const {\n    0: excelUploadOpen,\n    1: setExcelUploadOpen\n  } = useState(false);\n  const {\n    0: basicRow,\n    1: setBasicRow\n  } = useState([{\n    name: \"\",\n    id: \"\"\n  }]);\n  const {\n    0: column,\n    1: setColumn\n  } = useState(columnlist[\"model\"]);\n  const {\n    0: selectList,\n    1: setSelectList\n  } = useState(new Set());\n  const {\n    0: optionList,\n    1: setOptionList\n  } = useState(['고객사명', '사업자 번호', '모델명']);\n  const {\n    0: optionIndex,\n    1: setOptionIndex\n  } = useState(0);\n  const {\n    0: pageInfo,\n    1: setPageInfo\n  } = useState({\n    page: 1,\n    total: 1\n  });\n  useEffect(() => {\n    if (keyword) {\n      SearchBasic(keyword, option, page).then(() => {\n        Notiflix.Loading.remove();\n      });\n    } else {\n      LoadBasic(page).then(() => {\n        Notiflix.Loading.remove();\n      });\n    }\n  }, [page, keyword, option]);\n\n  const loadAllSelectItems = async column => {\n    let tmpColumn = column.map(async v => {\n      if (v.selectList && v.selectList.length === 0) {\n        let tmpKey = v.key;\n        let res;\n        res = await RequestMethod('get', `${tmpKey}List`, {\n          path: {\n            page: 1,\n            renderItem: MAX_VALUE\n          }\n        });\n        let pk = \"\";\n        res.results.info_list && res.results.info_list.length && Object.keys(res.results.info_list[0]).map(v => {\n          if (v.indexOf('_id') !== -1) {\n            pk = v;\n          }\n        });\n        return _objectSpread(_objectSpread({}, v), {}, {\n          selectList: [...res.results.info_list.map(value => {\n            return _objectSpread(_objectSpread({}, value), {}, {\n              name: value.name,\n              // name: tmpKey === 'model' ? value.model : value.name,\n              pk: value[pk]\n            });\n          })]\n        });\n      } else {\n        if (v.selectList) {\n          return _objectSpread(_objectSpread({}, v), {}, {\n            pk: v.unit_id\n          });\n        } else {\n          return v;\n        }\n      }\n    }); // if(type !== 'productprocess'){\n\n    Promise.all(tmpColumn).then(res => {\n      setColumn([...res.map(v => {\n        return _objectSpread(_objectSpread({}, v), {}, {\n          name: v.moddable ? v.name + '(필수)' : v.name\n        });\n      })]);\n    }); // }\n  };\n\n  const SaveBasic = async () => {\n    let res;\n    res = await RequestMethod('post', `modelSave`, {\n      ['models']: basicRow.map((row, i) => {\n        if (selectList.has(row.id)) {\n          let selectKey = [];\n          let additional = [];\n          column.map(v => {\n            if (v.selectList) {\n              selectKey.push(v.key);\n            }\n\n            if (v.type === 'additional') {\n              additional.push(v);\n            }\n          });\n          let selectData = {};\n          Object.keys(row).map(v => {\n            if (v.indexOf('PK') !== -1) {\n              selectData = _objectSpread(_objectSpread({}, selectData), {}, {\n                [v.split('PK')[0]]: row[v]\n              });\n            }\n\n            if (v === 'unitWeight') {\n              selectData = _objectSpread(_objectSpread({}, selectData), {}, {\n                unitWeight: Number(row['unitWeight'])\n              });\n            }\n\n            if (v === 'tmpId') {\n              selectData = _objectSpread(_objectSpread({}, selectData), {}, {\n                id: row['tmpId']\n              });\n            }\n          });\n          return _objectSpread(_objectSpread(_objectSpread({}, row), selectData), {}, {\n            additional: [...additional.map(v => {\n              if (row[v.name]) {\n                return {\n                  id: v.id,\n                  title: v.name,\n                  value: row[v.name],\n                  unit: v.unit\n                };\n              }\n            }).filter(v => v)]\n          });\n        }\n      }).filter(v => v)\n    });\n\n    if (res) {\n      if (res.status === 200) {\n        Notiflix.Report.success('저장되었습니다.', '', '확인');\n\n        if (keyword) {\n          SearchBasic(keyword, option, page).then(() => {\n            Notiflix.Loading.remove();\n          });\n        } else {\n          LoadBasic(page).then(() => {\n            Notiflix.Loading.remove();\n          });\n        }\n      }\n    }\n  };\n\n  const DeleteBasic = async () => {\n    const res = await RequestMethod('delete', `modelDelete`, {\n      ['models']: basicRow.map((row, i) => {\n        if (selectList.has(row.id)) {\n          let pk = \"\";\n          Object.keys(row).map(v => {\n            if (v.indexOf(\"_id\") !== -1) {\n              pk = v;\n            }\n          });\n          pk = 'cm_id';\n          return row[pk];\n        }\n      }).filter(v => v)\n    });\n\n    if (res) {\n      if (res.status === 200) {\n        Notiflix.Report.success('삭제 성공!', '', '확인', () => {\n          if (Number(page) === 1) {\n            LoadBasic(1).then(() => {\n              Notiflix.Loading.remove();\n            });\n          } else {\n            if (keyword) {\n              router.push(`/mes/basic/customer/model?page=1&keyword=${keyword}&opt=${option}`);\n            } else {\n              router.push(`/mes/basic/customer/model?page=1`);\n            }\n          }\n        });\n      }\n    }\n  };\n\n  const LoadBasic = async page => {\n    Notiflix.Loading.circle();\n    const res = await RequestMethod('get', `modelList`, {\n      path: {\n        page: page || page !== 0 ? page : 1,\n        renderItem: 19\n      }\n    });\n\n    if (res && res.status === 200) {\n      if (res.results.totalPages < page) {\n        LoadBasic(page - 1).then(() => {\n          Notiflix.Loading.remove();\n        });\n      } else {\n        setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n          page: res.results.page,\n          total: res.results.totalPages\n        }));\n        cleanUpData(res);\n      }\n    } else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back();\n      });\n    }\n  };\n\n  const SearchBasic = async (keyword, option, isPaging) => {\n    Notiflix.Loading.circle();\n\n    if (!isPaging) {\n      setOptionIndex(option);\n    }\n\n    const res = await RequestMethod('get', `modelSearch`, {\n      path: {\n        page: isPaging !== null && isPaging !== void 0 ? isPaging : 1,\n        renderItem: 18\n      },\n      params: {\n        keyword: keyword !== null && keyword !== void 0 ? keyword : '',\n        opt: option !== null && option !== void 0 ? option : 0\n      }\n    });\n\n    if (res && res.status === 200) {\n      setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n        page: res.results.page,\n        total: res.results.totalPages\n      }));\n      cleanUpData(res);\n    }\n  };\n\n  const cleanUpBasicData = res => {\n    let tmpRow = res.data.results.info_list;\n    let tmpBasicRow = tmpRow.map((row, index) => {\n      let appendAdditional = {};\n      row.additional && row.additional.map(v => {\n        appendAdditional = _objectSpread(_objectSpread({}, appendAdditional), {}, {\n          [v.title]: v.value\n        });\n      });\n      let random_id = Math.random() * 1000;\n      return _objectSpread(_objectSpread({\n        cm_id: row.cm_id,\n        customer: row.customer.name,\n        customer_id: row.customer.name,\n        customer_idPK: row.customer.customer_id,\n        customerPK: row.customer.customer_id,\n        model: row.model,\n        crn: row.customer.crn\n      }, appendAdditional), {}, {\n        id: `model_${random_id}`\n      });\n    });\n    setBasicRow([...tmpBasicRow]);\n  };\n\n  const cleanUpData = res => {\n    let tmpColumn = columnlist[\"model\"];\n    let tmpRow = [];\n    tmpColumn = tmpColumn.map(column => {\n      let menuData;\n      res.results.menus && res.results.menus.map(menu => {\n        if (menu.colName === column.key) {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit,\n            moddable: !menu.moddable\n          };\n        } else if (menu.colName === 'id' && column.key === 'tmpId') {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit,\n            moddable: !menu.moddable\n          };\n        }\n      });\n\n      if (menuData) {\n        return _objectSpread(_objectSpread({}, column), menuData);\n      }\n    }).filter(v => v);\n    let additionalMenus = res.results.menus ? res.results.menus.map(menu => {\n      if (menu.colName === null) {\n        return {\n          id: menu.id,\n          name: menu.title,\n          width: menu.width,\n          key: menu.title,\n          editor: TextEditor,\n          type: 'additional',\n          unit: menu.unit\n        };\n      }\n    }).filter(v => v) : [];\n    tmpRow = res.results.info_list;\n    loadAllSelectItems([...tmpColumn, ...additionalMenus]);\n    let selectKey = \"\";\n    let additionalData = [];\n    tmpColumn.map(v => {\n      if (v.selectList) {\n        selectKey = v.key;\n      }\n    });\n    additionalMenus.map(v => {\n      if (v.type === 'additional') {\n        additionalData.push(v.key);\n      }\n    });\n    let pk = \"\";\n    Object.keys(tmpRow).map(v => {\n      if (v.indexOf('_id') !== -1) {\n        pk = v;\n      }\n    });\n    let tmpBasicRow = tmpRow.map((row, index) => {\n      let appendAdditional = {};\n      row.additional && row.additional.map(v => {\n        appendAdditional = _objectSpread(_objectSpread({}, appendAdditional), {}, {\n          [v.title]: v.value\n        });\n      });\n      let random_id = Math.random() * 1000;\n      return _objectSpread(_objectSpread({\n        cm_id: row.cm_id,\n        customer: row.customer.name,\n        customer_id: row.customer.name,\n        customer_idPK: row.customer.customer_id,\n        customerPK: row.customer.customer_id,\n        model: row.model,\n        crn: row.customer.crn\n      }, appendAdditional), {}, {\n        id: `model_${random_id}`\n      });\n    });\n    setBasicRow([...tmpBasicRow]);\n  };\n\n  const downloadExcel = () => {\n    let tmpSelectList = [];\n    basicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id));\n    });\n    excelDownload(column, basicRow, `model`, \"model\", tmpSelectList);\n  };\n\n  const onClickHeaderButton = index => {\n    switch (index) {\n      case 0:\n        setExcelUploadOpen(true);\n        break;\n\n      case 1:\n        setExcelOpen(true);\n        break;\n\n      case 2:\n        router.push(`/mes/item/manage/model`);\n        break;\n\n      case 3:\n        let items = {};\n        column.map(value => {\n          if (value.selectList && value.selectList.length) {\n            if (value.key === 'customer') {\n              items = _objectSpread(_objectSpread({}, value.selectList[0]), {}, {\n                [value.key]: value.selectList[0].name,\n                [value.key + 'PK']: value.selectList[0].customer_id\n              }, items);\n            }\n          }\n\n          if (value.key === 'seq') {\n            items = {\n              [value.key]: basicRow.length + 1\n            };\n          }\n\n          if (value.key === 'id') {\n            items = {\n              tmpId: \"\"\n            };\n          }\n        });\n        let random_id = Math.random() * 1000;\n        setBasicRow([_objectSpread(_objectSpread({}, items), {}, {\n          id: `model_${random_id}`,\n          name: null,\n          additional: []\n        }), ...basicRow]);\n        break;\n\n      case 4:\n        SaveBasic();\n        break;\n\n      case 5:\n        Notiflix.Confirm.show(\"경고\", \"삭제하시겠습니까?\", \"확인\", \"취소\", () => {\n          DeleteBasic();\n        }, () => {});\n        break;\n    }\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 5\n    }\n  }, __jsx(PageHeader, {\n    isSearch: true,\n    searchKeyword: keyword,\n    onChangeSearchKeyword: keyword => {\n      if (keyword) {\n        router.push(`/mes/basic/customer/model?page=1&keyword=${keyword}&opt=${optionIndex}`);\n      } else {\n        router.push(`/mes/basic/customer/model?page=1&keyword=`);\n      }\n    },\n    searchOptionList: optionList,\n    onChangeSearchOption: option => {\n      setOptionIndex(option);\n    },\n    optionIndex: optionIndex,\n    title: \"고객사 모델 관리\",\n    buttons: ['엑셀로 등록', '엑셀로 받기', '항목관리', '행 추가', '저장하기', '삭제'],\n    buttonsOnclick: onClickHeaderButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 7\n    }\n  }), __jsx(ExcelTable, {\n    editable: true,\n    resizable: true,\n    headerList: [SelectColumn, ...column],\n    row: basicRow // setRow={setBasicRow}\n    ,\n    setRow: e => {\n      let tmp = selectList;\n      e.map(v => {\n        if (v.isChange) tmp.add(v.id);\n      });\n      setSelectList(tmp);\n      setBasicRow(e);\n    },\n    selectList: selectList //@ts-ignore\n    ,\n    setSelectList: setSelectList,\n    height: basicRow.length * 40 >= 40 * 18 + 56 ? 40 * 19 : basicRow.length * 40 + 56,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 7\n    }\n  }), __jsx(PaginationComponent, {\n    currentPage: pageInfo.page,\n    totalPage: pageInfo.total,\n    setPage: page => {\n      if (keyword) {\n        router.push(`/mes/basic/customer/model?page=${page}&keyword=${keyword}&opt=${option}`);\n      } else {\n        router.push(`/mes/basic/customer/model?page=${page}`);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst HeaderButton = styled.button`\n    height:32px;\n    color:white;\n    border-radius:6px;\n    font-size:15px;\n    font-weight:bold;\n    background:#717C90;\n    padding: 0 20px;\n    cursor: pointer;\n    display:flex;\n    margin-left: 16px;\n    justify-content:center;\n    align-items:center;\n`;\nexport { BasicModel };","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/basic/src/container/BasicModel.tsx"],"names":["React","useEffect","useState","ExcelTable","Header","PageHeader","RequestMethod","columnlist","MAX_VALUE","TextEditor","excelDownload","PaginationComponent","SelectColumn","Notiflix","useRouter","styled","title","BasicModel","page","keyword","option","router","excelOpen","setExcelOpen","excelUploadOpen","setExcelUploadOpen","basicRow","setBasicRow","name","id","column","setColumn","selectList","setSelectList","Set","optionList","setOptionList","optionIndex","setOptionIndex","pageInfo","setPageInfo","total","SearchBasic","then","Loading","remove","LoadBasic","loadAllSelectItems","tmpColumn","map","v","length","tmpKey","key","res","path","renderItem","pk","results","info_list","Object","keys","indexOf","value","unit_id","Promise","all","moddable","SaveBasic","row","i","has","selectKey","additional","push","type","selectData","split","unitWeight","Number","unit","filter","status","Report","success","DeleteBasic","circle","totalPages","cleanUpData","state","failure","back","isPaging","params","opt","cleanUpBasicData","tmpRow","data","tmpBasicRow","index","appendAdditional","random_id","Math","random","cm_id","customer","customer_id","customer_idPK","customerPK","model","crn","menuData","menus","menu","colName","width","tab","additionalMenus","editor","additionalData","downloadExcel","tmpSelectList","onClickHeaderButton","items","tmpId","Confirm","show","e","tmp","isChange","add","HeaderButton","button"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {\n  ExcelTable,\n  Header as PageHeader,\n  RequestMethod,\n  columnlist,\n  MAX_VALUE,\n  DropDownEditor,\n  TextEditor,\n  excelDownload,\n  PaginationComponent,\n  ExcelDownloadModal,\n  IExcelHeaderType, IItemMenuType\n} from 'shared'\n// @ts-ignore\nimport {SelectColumn} from 'react-data-grid'\nimport Notiflix from \"notiflix\";\nimport {useRouter} from 'next/router'\nimport {loadAll} from 'react-cookies'\nimport {NextPageContext} from 'next'\nimport TreeViewTable from '../../../main/component/TreeView/TreeView'\nimport {IMenu} from '../../../main/common/@types/type'\nimport {AUTHORITY_LIST} from '../../../main/common/configset'\nimport {AxiosResponse} from 'axios'\nimport styled from 'styled-components'\n\nexport interface IProps {\n  children?: any\n  page?: number\n  keyword?: string\n  option?: number\n}\n\nconst title = '권한 관리'\n\nconst BasicModel = ({page, keyword, option}: IProps) => {\n  const router = useRouter()\n\n  const [excelOpen, setExcelOpen] = useState<boolean>(false)\n  const [excelUploadOpen, setExcelUploadOpen] = useState<boolean>(false)\n\n  const [basicRow, setBasicRow] = useState<Array<any>>([{\n    name: \"\", id: \"\"\n  }])\n  const [column, setColumn] = useState<Array<IExcelHeaderType>>(columnlist[\"model\"])\n  const [selectList, setSelectList] = useState<Set<number>>(new Set())\n  const [optionList, setOptionList] = useState<string[]>(['고객사명','사업자 번호', '모델명'])\n  const [optionIndex, setOptionIndex] = useState<number>(0)\n\n  const [pageInfo, setPageInfo] = useState<{page: number, total: number}>({\n    page: 1,\n    total: 1\n  })\n\n  useEffect(() => {\n    if(keyword){\n      SearchBasic(keyword, option, page).then(() => {\n        Notiflix.Loading.remove()\n      })\n    }else{\n      LoadBasic(page).then(() => {\n        Notiflix.Loading.remove()\n      })\n    }\n  }, [page, keyword, option])\n\n  const loadAllSelectItems = async (column: IExcelHeaderType[]) => {\n    let tmpColumn = column.map(async (v: any) => {\n      if(v.selectList && v.selectList.length === 0){\n        let tmpKey = v.key\n        let res: any\n\n        res = await RequestMethod('get', `${tmpKey}List`,{\n          path: {\n            page: 1,\n            renderItem: MAX_VALUE,\n          }\n        })\n\n\n        let pk = \"\";\n\n        res.results.info_list && res.results.info_list.length && Object.keys(res.results.info_list[0]).map((v) => {\n          if(v.indexOf('_id') !== -1){\n            pk = v\n          }\n        })\n\n        return {\n          ...v,\n          selectList: [...res.results.info_list.map((value: any) => {\n            return {\n              ...value,\n              name: value.name,\n              // name: tmpKey === 'model' ? value.model : value.name,\n              pk: value[pk]\n            }\n          })]\n        }\n\n\n      }else{\n        if(v.selectList){\n          return {\n            ...v,\n            pk: v.unit_id\n          }\n        }else{\n          return v\n        }\n      }\n    })\n\n    // if(type !== 'productprocess'){\n    Promise.all(tmpColumn).then(res => {\n      setColumn([...res.map(v=> {\n        return {\n          ...v,\n          name: v.moddable ? v.name+'(필수)' : v.name\n        }\n      })])\n    })\n    // }\n  }\n\n  const SaveBasic = async () => {\n    let res: any\n    res = await RequestMethod('post', `modelSave`,\n      {\n        ['models']: basicRow.map((row, i) => {\n          if(selectList.has(row.id)){\n            let selectKey: string[] = []\n            let additional:any[] = []\n            column.map((v) => {\n              if(v.selectList){\n                selectKey.push(v.key)\n              }\n\n              if(v.type === 'additional'){\n                additional.push(v)\n              }\n            })\n\n            let selectData: any = {}\n\n            Object.keys(row).map(v => {\n              if(v.indexOf('PK') !== -1) {\n                selectData = {\n                  ...selectData,\n                  [v.split('PK')[0]]: row[v]\n                }\n              }\n\n              if(v === 'unitWeight') {\n                selectData = {\n                  ...selectData,\n                  unitWeight: Number(row['unitWeight'])\n                }\n              }\n\n              if(v === 'tmpId') {\n                selectData = {\n                  ...selectData,\n                  id: row['tmpId']\n                }\n              }\n            })\n\n            return {\n              ...row,\n              ...selectData,\n              additional: [\n                ...additional.map(v => {\n                  if(row[v.name]) {\n                    return {\n                      id: v.id,\n                      title: v.name,\n                      value: row[v.name],\n                      unit: v.unit\n                    }\n                  }\n                }).filter((v) => v)\n              ]\n            }\n\n          }\n        }).filter((v) => v)\n      })\n\n\n    if(res){\n      if(res.status === 200){\n        Notiflix.Report.success('저장되었습니다.','','확인');\n        if(keyword){\n          SearchBasic(keyword, option, page).then(() => {\n            Notiflix.Loading.remove()\n          })\n        }else{\n          LoadBasic(page).then(() => {\n            Notiflix.Loading.remove()\n          })\n        }\n      }\n    }\n  }\n\n  const DeleteBasic = async () => {\n    const res = await RequestMethod('delete', `modelDelete`,\n      {\n        ['models']: basicRow.map((row, i) => {\n          if(selectList.has(row.id)){\n            let pk = \"\"\n            Object.keys(row).map((v:string) => {\n              if(v.indexOf(\"_id\") !== -1){\n                pk = v\n              }\n            })\n\n            pk = 'cm_id'\n\n            return row[pk]\n\n          }\n        }).filter((v) => v)\n      })\n\n    if(res) {\n      if(res.status === 200){\n        Notiflix.Report.success('삭제 성공!', '', '확인', () => {\n          if(Number(page) === 1){\n            LoadBasic(1).then(() => {\n              Notiflix.Loading.remove()\n            })\n          }else{\n            if(keyword){\n              router.push(`/mes/basic/customer/model?page=1&keyword=${keyword}&opt=${option}`)\n            }else{\n              router.push(`/mes/basic/customer/model?page=1`)\n            }\n          }\n        })\n      }\n    }\n  }\n\n  const LoadBasic = async (page?: number) => {\n    Notiflix.Loading.circle()\n    const res = await RequestMethod('get', `modelList`,{\n      path: {\n        page: (page || page !== 0) ? page : 1,\n        renderItem: 19,\n      }\n    })\n\n    if(res && res.status === 200){\n      if(res.results.totalPages < page){\n        LoadBasic(page - 1).then(() => {\n          Notiflix.Loading.remove()\n        })\n      }else{\n        setPageInfo({\n          ...pageInfo,\n          page: res.results.page,\n          total: res.results.totalPages\n        })\n        cleanUpData(res)\n      }\n    }else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back()\n      })\n    }\n  }\n\n  const SearchBasic = async (keyword: any, option: number, isPaging?: string | string[] | number) => {\n    Notiflix.Loading.circle()\n    if(!isPaging){\n      setOptionIndex(option)\n    }\n\n    const res = await RequestMethod('get', `modelSearch`,{\n      path: {\n        page: isPaging ?? 1,\n        renderItem: 18,\n      },\n      params: {\n        keyword: keyword ?? '',\n        opt: option ?? 0\n      }\n    })\n\n    if(res && res.status === 200){\n      setPageInfo({\n        ...pageInfo,\n        page: res.results.page,\n        total: res.results.totalPages\n      })\n      cleanUpData(res)\n    }\n  }\n  const cleanUpBasicData = (res:any) => {\n    let tmpRow = res.data.results.info_list;\n\n    let tmpBasicRow = tmpRow.map((row: any, index: number) => {\n      let appendAdditional: any = {}\n\n      row.additional && row.additional.map((v: any) => {\n        appendAdditional = {\n          ...appendAdditional,\n          [v.title]: v.value\n\n        }\n      })\n      let random_id = Math.random()*1000;\n      return {\n        cm_id:row.cm_id,\n        customer: row.customer.name,\n        customer_id: row.customer.name,\n        customer_idPK: row.customer.customer_id,\n        customerPK: row.customer.customer_id,\n        model:row.model,\n        crn:row.customer.crn,\n        ...appendAdditional,\n        id: `model_${random_id}`,\n\n      }\n    })\n    setBasicRow([...tmpBasicRow])\n  }\n\n  const cleanUpData = (res: any) => {\n    let tmpColumn = columnlist[\"model\"];\n    let tmpRow = []\n    tmpColumn = tmpColumn.map((column: any) => {\n      let menuData: object | undefined;\n      res.results.menus && res.results.menus.map((menu: any) => {\n        if(menu.colName === column.key){\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab:menu.tab,\n            unit:menu.unit,\n            moddable: !menu.moddable\n          }\n        } else if(menu.colName === 'id' && column.key === 'tmpId'){\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab:menu.tab,\n            unit:menu.unit,\n            moddable: !menu.moddable\n          }\n        }\n      })\n\n      if(menuData){\n        return {\n          ...column,\n          ...menuData\n        }\n      }\n    }).filter((v:any) => v)\n\n    let additionalMenus = res.results.menus ? res.results.menus.map((menu:any) => {\n      if(menu.colName === null){\n        return {\n          id: menu.id,\n          name: menu.title,\n          width: menu.width,\n          key: menu.title,\n          editor: TextEditor,\n          type: 'additional',\n          unit: menu.unit\n        }\n      }\n    }).filter((v: any) => v) : []\n\n\n    tmpRow = res.results.info_list\n\n    loadAllSelectItems( [\n      ...tmpColumn,\n      ...additionalMenus\n    ] )\n\n\n    let selectKey = \"\"\n    let additionalData: any[] = []\n    tmpColumn.map((v: any) => {\n      if(v.selectList){\n        selectKey = v.key\n      }\n    })\n\n    additionalMenus.map((v: any) => {\n      if(v.type === 'additional'){\n        additionalData.push(v.key)\n      }\n    })\n\n    let pk = \"\";\n    Object.keys(tmpRow).map((v) => {\n      if(v.indexOf('_id') !== -1){\n        pk = v\n      }\n    })\n\n\n    let tmpBasicRow = tmpRow.map((row: any, index: number) => {\n      let appendAdditional: any = {}\n\n      row.additional && row.additional.map((v: any) => {\n        appendAdditional = {\n          ...appendAdditional,\n          [v.title]: v.value\n\n        }\n      })\n      let random_id = Math.random()*1000;\n      return {\n        cm_id:row.cm_id,\n        customer: row.customer.name,\n        customer_id: row.customer.name,\n        customer_idPK: row.customer.customer_id,\n        customerPK: row.customer.customer_id,\n        model:row.model,\n        crn:row.customer.crn,\n        ...appendAdditional,\n        id: `model_${random_id}`,\n\n      }\n    })\n\n    setBasicRow([...tmpBasicRow])\n  }\n\n  const downloadExcel = () => {\n    let tmpSelectList: boolean[] = []\n    basicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id))\n    })\n    excelDownload(column, basicRow, `model`, \"model\", tmpSelectList)\n  }\n\n  const onClickHeaderButton = (index: number) => {\n    switch(index){\n      case 0:\n        setExcelUploadOpen(true)\n        break;\n      case 1:\n        setExcelOpen(true)\n        break;\n      case 2:\n        router.push(`/mes/item/manage/model`)\n        break;\n      case 3:\n        let items = {}\n\n        column.map((value) => {\n          if(value.selectList && value.selectList.length){\n            if(value.key === 'customer') {\n              items = {\n                ...value.selectList[0],\n                [value.key] : value.selectList[0].name,\n                [value.key+'PK'] : value.selectList[0].customer_id,//여기 봐야됨!\n                ...items,\n              }\n            }\n\n          }\n\n          if(value.key === 'seq') {\n            items = {\n              [value.key]: basicRow.length+1\n            }\n          }\n\n          if(value.key === 'id') {\n            items = {\n              tmpId: \"\",\n            }\n          }\n\n        })\n        let random_id = Math.random()*1000;\n        setBasicRow([\n          {\n            ...items,\n            id: `model_${random_id}`,\n            name: null,\n            additional: [],\n          },\n          ...basicRow\n        ])\n        break;\n      case 4:\n        SaveBasic()\n        break;\n      case 5:\n        Notiflix.Confirm.show(\"경고\",\"삭제하시겠습니까?\",\"확인\",\"취소\",\n          ()=>{\n            DeleteBasic()\n          } ,\n          ()=>{},\n        )\n        break;\n\n    }\n  }\n\n  return (\n    <div>\n      <PageHeader\n        isSearch\n        searchKeyword={keyword}\n        onChangeSearchKeyword={(keyword) => {\n          if(keyword){\n            router.push(`/mes/basic/customer/model?page=1&keyword=${keyword}&opt=${optionIndex}`)\n          }else{\n            router.push(`/mes/basic/customer/model?page=1&keyword=`)\n          }\n        }}\n        searchOptionList={optionList}\n        onChangeSearchOption={(option) => {\n          setOptionIndex(option)\n        }}\n        optionIndex={optionIndex}\n        title={\"고객사 모델 관리\"}\n        buttons={\n          ['엑셀로 등록','엑셀로 받기', '항목관리', '행 추가', '저장하기', '삭제']\n        }\n        buttonsOnclick={onClickHeaderButton}\n      />\n      <ExcelTable\n        editable\n        resizable\n        headerList={[\n          SelectColumn,\n          ...column\n        ]}\n        row={basicRow}\n        // setRow={setBasicRow}\n        setRow={(e) => {\n          let tmp: Set<any> = selectList\n          e.map(v => {\n            if(v.isChange) tmp.add(v.id)\n          })\n          setSelectList(tmp)\n          setBasicRow(e)\n        }}\n        selectList={selectList}\n        //@ts-ignore\n        setSelectList={setSelectList}\n        height={basicRow.length * 40 >= 40*18+56 ? 40*19 : basicRow.length * 40 + 56}\n      />\n      <PaginationComponent\n        currentPage={pageInfo.page}\n        totalPage={pageInfo.total}\n        setPage={(page) => {\n          if(keyword){\n            router.push(`/mes/basic/customer/model?page=${page}&keyword=${keyword}&opt=${option}`)\n          }else{\n            router.push(`/mes/basic/customer/model?page=${page}`)\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nconst HeaderButton = styled.button`\n    height:32px;\n    color:white;\n    border-radius:6px;\n    font-size:15px;\n    font-weight:bold;\n    background:#717C90;\n    padding: 0 20px;\n    cursor: pointer;\n    display:flex;\n    margin-left: 16px;\n    justify-content:center;\n    align-items:center;\n`;\n\nexport {BasicModel};\n"]},"metadata":{},"sourceType":"module"}