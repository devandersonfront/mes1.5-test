{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/quality/defect/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from \"react\";\nimport MenuNavigation from \"../../../../component/MenuNav/MenuNavigation\";\nimport ProfileHeader from \"../../../../component/Profile/ProfileHeader\";\nimport { RequestMethod } from \"../../../../common/RequestFunctions\";\nimport PageHeader from \"../../../../component/Header/Header\";\nimport ExcelTable from \"../../../../component/Excel/ExcelTable\";\nimport ButtonGroup from \"../../../../component/ButtonGroup\";\n//@ts-ignore\nimport { SelectColumn } from \"react-data-grid\";\nimport { columnlist } from \"../../../../common/columnInit\"; //@ts-ignore\n\nimport Notiflix from \"notiflix\";\nimport moment from 'moment';\nimport { excelDownload } from '../../../../common/excelDownloadFunction';\nimport PeriodSelectCalendar from '../../../../component/Header/PeriodSelectCalendar';\nimport { useRouter } from 'next/router';\n\nconst RegisterBasicContainer = () => {\n  const router = useRouter();\n\n  const changeHeaderStatus = value => {\n    setHeaderStatus(value);\n  };\n\n  const {\n    0: processBasicRow,\n    1: setProcessBasicRow\n  } = useState([{\n    id: '',\n    customer_id: ''\n  }]);\n  const {\n    0: processColumn,\n    1: setProcessColumn\n  } = useState(columnlist[`qualityDefectTop`]);\n  const {\n    0: pauseBasicRow,\n    1: setPauseBasicRow\n  } = useState([]);\n  const {\n    0: pauseColumn,\n    1: setPauseColumn\n  } = useState(columnlist[`qualityDefectContents`].map(v => {\n    console.log(v.key);\n\n    if (v.key === 'amount') {\n      return _objectSpread(_objectSpread({}, v), {}, {\n        result: changeHeaderStatus\n      });\n    }\n\n    return v;\n  }));\n  const {\n    0: selectRow,\n    1: setSelectRow\n  } = useState(-1);\n  const {\n    0: state,\n    1: setState\n  } = useState(false);\n  const {\n    0: selectList,\n    1: setSelectList\n  } = useState(new Set());\n  const {\n    0: headerStatus,\n    1: setHeaderStatus\n  } = useState(\"\");\n  const {\n    0: selectDate,\n    1: setSelectDate\n  } = useState({\n    from: moment(new Date()).startOf('isoWeek').format('YYYY-MM-DD'),\n    to: moment(new Date()).endOf('isoWeek').format('YYYY-MM-DD')\n  });\n\n  const changeSelectDate = (from, to) => {\n    setSelectDate({\n      from: moment(new Date(from)).format('YYYY-MM-DD'),\n      to: moment(new Date(to)).format('YYYY-MM-DD')\n    });\n  };\n\n  useEffect(() => {\n    if (processBasicRow[0].product_id) {\n      LoadBasic().then(() => {\n        Notiflix.Loading.remove();\n      });\n    }\n  }, [processBasicRow, selectDate, headerStatus]);\n\n  const LoadPauseList = async value => {\n    Notiflix.Loading.circle();\n    const res = await RequestMethod(\"get\", `defectReasonList`, {\n      path: {\n        page: 1,\n        renderItem: 51,\n        process_id: value\n      }\n    });\n\n    if (res && res.status === 200) {\n      let tmpColumn = columnlist[`defectReason`];\n      tmpColumn = tmpColumn.map((value, index) => {\n        return _objectSpread(_objectSpread({}, value), {}, {\n          key: value.key,\n          name: value.name,\n          width: value.width\n        });\n      });\n      setPauseColumn(tmpColumn); // tmpColumn.push({key:})\n\n      let tmpRow = [];\n      tmpRow = res.results.info_list.map((column, index) => {\n        let menuData = {};\n        menuData = {\n          index: index + 1,\n          width: column.width // id:Math.random()*100\n          // id: info.ppr_id,\n          // name: info.reason,\n\n        };\n        let random_id = Math.random() * 1000;\n        return _objectSpread(_objectSpread({\n          id: random_id\n        }, column), menuData);\n      });\n      setPauseBasicRow([...tmpRow]);\n    }\n  };\n\n  const LoadBasic = async () => {\n    Notiflix.Loading.circle();\n    const res = await RequestMethod('get', `defectList`, {\n      path: {\n        product_id: processBasicRow[0].product_id,\n        process_id: processBasicRow[0].process_idPK,\n        pdr_id: processBasicRow[0].pdr_idPK\n      },\n      params: {\n        opt: headerStatus,\n        from: selectDate.from,\n        to: selectDate.to\n      }\n    });\n\n    if (res && res.status === 200) {\n      let tmpColumn = columnlist[`defectReason`];\n      let tmpRow = [];\n      tmpRow = res.results;\n\n      if (res.results.length >= 0) {\n        setPauseBasicRow(tmpRow.map(v => {\n          let random_id = Math.random() * 1000;\n          return _objectSpread(_objectSpread({}, v), {}, {\n            id: `processDefect_${random_id}`,\n            reason: v.pdr.reason,\n            process_id: v.process.name\n          });\n          LoadPauseList(v.process.process_id).then(() => {\n            Notiflix.Loading.remove();\n          });\n        }));\n      }\n    } else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back();\n      });\n    }\n  };\n\n  const downloadExcel = () => {\n    let tmpSelectList = [];\n    pauseBasicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id));\n    });\n    excelDownload(pauseColumn, pauseBasicRow, `불량통계`, \"불량통계\", tmpSelectList);\n  };\n\n  const buttonEvents = async index => {\n    switch (index) {\n      case 1:\n        downloadExcel();\n        return;\n\n      case 0:\n        let deleteBasicRow = pauseBasicRow.map(row => {\n          if (selectList.has(row.id)) {\n            return;\n          } else {\n            return _objectSpread({}, row);\n          }\n        }).filter(v => v);\n        setPauseBasicRow([...deleteBasicRow]);\n        return;\n    }\n  };\n\n  const sortObject = object => {\n    const compare_qty = (a, b) => {\n      // a should come before b in the sorted order\n      if (a.lengthIndex < b.lengthIndex) {\n        return -1; // a should come after b in the sorted order\n      } else if (a.lengthIndex > b.lengthIndex) {\n        return 1; // a and b are the same\n      } else {\n        return 0;\n      }\n    };\n\n    object.sort(compare_qty);\n    let sortData = object.map((v, index) => {\n      return _objectSpread(_objectSpread({}, v), {}, {\n        index: index + 1,\n        lengthIndex: index + 1\n      });\n    });\n    setPauseBasicRow([...sortData]);\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 5\n    }\n  }, __jsx(MenuNavigation, {\n    pageType: 'MES',\n    subType: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }\n  }, __jsx(ProfileHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }\n  }, __jsx(PageHeader, {\n    title: \"불량 통계\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 11\n    }\n  }), __jsx(ExcelTable, {\n    editable: true,\n    resizable: true,\n    headerList: [SelectColumn, ...processColumn],\n    row: processBasicRow,\n    setRow: setProcessBasicRow,\n    selectList: selectList //@ts-ignore\n    ,\n    setSelectList: setSelectList,\n    height: 80,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 11\n    }\n  }), __jsx(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      margin: \"15px 0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 11\n    }\n  }, processBasicRow[0].product_id ? __jsx(\"span\", {\n    style: {\n      color: \"white\",\n      fontSize: 22,\n      fontWeight: \"bold\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 19\n    }\n  }, \"\\uACF5\\uC815\\uBCC4 \\uBD88\\uB7C9 \\uD1B5\\uACC4\") : __jsx(\"span\", {\n    style: {\n      color: \"#ffffff58\",\n      fontSize: 22,\n      fontWeight: \"bold\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 19\n    }\n  }, \"\\uC81C\\uD488\\uC744 \\uC120\\uD0DD\\uD574\\uC8FC\\uC138\\uC694\"), __jsx(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 13\n    }\n  }, __jsx(PeriodSelectCalendar, {\n    selectDate: selectDate,\n    onChangeSelectDate: setSelectDate,\n    dataLimit: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 15\n    }\n  }), __jsx(ButtonGroup, {\n    buttons: ['선택 행 숨김', '엑셀로 받기'],\n    buttonsOnclick: buttonEvents,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 15\n    }\n  }))), __jsx(ExcelTable, {\n    editable: true,\n    headerList: [SelectColumn, ...pauseColumn],\n    row: pauseBasicRow,\n    setRow: e => {\n      setState(true);\n      setPauseBasicRow(e);\n    },\n    width: 1570,\n    height: 440 // setSelectList={changeSetSelectList}\n    ,\n    setSelectList: setSelectList,\n    selectList: selectList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default RegisterBasicContainer;","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/quality/defect/index.tsx"],"names":["React","useEffect","useState","MenuNavigation","ProfileHeader","RequestMethod","PageHeader","ExcelTable","ButtonGroup","SelectColumn","columnlist","Notiflix","moment","excelDownload","PeriodSelectCalendar","useRouter","RegisterBasicContainer","router","changeHeaderStatus","value","setHeaderStatus","processBasicRow","setProcessBasicRow","id","customer_id","processColumn","setProcessColumn","pauseBasicRow","setPauseBasicRow","pauseColumn","setPauseColumn","map","v","console","log","key","result","selectRow","setSelectRow","state","setState","selectList","setSelectList","Set","headerStatus","selectDate","setSelectDate","from","Date","startOf","format","to","endOf","changeSelectDate","product_id","LoadBasic","then","Loading","remove","LoadPauseList","circle","res","path","page","renderItem","process_id","status","tmpColumn","index","name","width","tmpRow","results","info_list","column","menuData","random_id","Math","random","process_idPK","pdr_id","pdr_idPK","params","opt","length","reason","pdr","process","Report","failure","back","downloadExcel","tmpSelectList","row","push","has","buttonEvents","deleteBasicRow","filter","sortObject","object","compare_qty","a","b","lengthIndex","sort","sortData","display","justifyContent","margin","color","fontSize","fontWeight","e"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AAEA,OAAOC,cAAP,MAA2B,8CAA3B;AACA,OAAOC,aAAP,MAA0B,6CAA1B;AACA,SAAQC,aAAR,QAA4B,qCAA5B;AACA,OAAOC,UAAP,MAAuB,qCAAvB;AACA,OAAOC,UAAP,MAAuB,wCAAvB;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AAGA;AACA,SAAQC,YAAR,QAA2B,iBAA3B;AACA,SAAQC,UAAR,QAAyB,+BAAzB,C,CACA;;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAAQC,aAAR,QAA4B,0CAA5B;AACA,OAAOC,oBAAP,MAAiC,mDAAjC;AACA,SAAQC,SAAR,QAAwB,aAAxB;;AAQA,MAAMC,sBAAsB,GAAG,MAAM;AACnC,QAAMC,MAAM,GAAGF,SAAS,EAAxB;;AAEA,QAAMG,kBAAkB,GAAIC,KAAD,IAAkB;AAC3CC,IAAAA,eAAe,CAACD,KAAD,CAAf;AACD,GAFD;;AAIA,QAAM;AAAA,OAACE,eAAD;AAAA,OAAkBC;AAAlB,MAAwCpB,QAAQ,CAAQ,CAAC;AAC7DqB,IAAAA,EAAE,EAAE,EADyD;AACrDC,IAAAA,WAAW,EAAE;AADwC,GAAD,CAAR,CAAtD;AAGA,QAAM;AAAA,OAACC,aAAD;AAAA,OAAgBC;AAAhB,MAAoCxB,QAAQ,CAA0BQ,UAAU,CAAE,kBAAF,CAApC,CAAlD;AAEA,QAAM;AAAA,OAACiB,aAAD;AAAA,OAAgBC;AAAhB,MAAoC1B,QAAQ,CAAQ,EAAR,CAAlD;AACA,QAAM;AAAA,OAAC2B,WAAD;AAAA,OAAcC;AAAd,MAAgC5B,QAAQ,CAA0BQ,UAAU,CAAE,uBAAF,CAAV,CAAoCqB,GAApC,CAAwCC,CAAC,IAAI;AACnHC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,GAAd;;AACA,QAAGH,CAAC,CAACG,GAAF,KAAU,QAAb,EAAsB;AACpB,6CACKH,CADL;AAEEI,QAAAA,MAAM,EAAElB;AAFV;AAID;;AACD,WAAOc,CAAP;AACD,GATuE,CAA1B,CAA9C;AAUA,QAAM;AAAA,OAACK,SAAD;AAAA,OAAYC;AAAZ,MAA4BpC,QAAQ,CAAM,CAAC,CAAP,CAA1C;AAEA,QAAM;AAAA,OAACqC,KAAD;AAAA,OAAQC;AAAR,MAAoBtC,QAAQ,CAAU,KAAV,CAAlC;AAEA,QAAM;AAAA,OAACuC,UAAD;AAAA,OAAaC;AAAb,MAA8BxC,QAAQ,CAAsB,IAAIyC,GAAJ,EAAtB,CAA5C;AACA,QAAM;AAAA,OAACC,YAAD;AAAA,OAAexB;AAAf,MAAkClB,QAAQ,CAAkB,EAAlB,CAAhD;AAEA,QAAM;AAAA,OAAC2C,UAAD;AAAA,OAAaC;AAAb,MAA8B5C,QAAQ,CAA2B;AACrE6C,IAAAA,IAAI,EAAEnC,MAAM,CAAC,IAAIoC,IAAJ,EAAD,CAAN,CAAmBC,OAAnB,CAA2B,SAA3B,EAAsCC,MAAtC,CAA6C,YAA7C,CAD+D;AAErEC,IAAAA,EAAE,EAAEvC,MAAM,CAAC,IAAIoC,IAAJ,EAAD,CAAN,CAAmBI,KAAnB,CAAyB,SAAzB,EAAoCF,MAApC,CAA2C,YAA3C;AAFiE,GAA3B,CAA5C;;AAKA,QAAMG,gBAAgB,GAAG,CAACN,IAAD,EAAcI,EAAd,KAA4B;AAEnDL,IAAAA,aAAa,CAAC;AACZC,MAAAA,IAAI,EAACnC,MAAM,CAAC,IAAIoC,IAAJ,CAASD,IAAT,CAAD,CAAN,CAAuBG,MAAvB,CAA8B,YAA9B,CADO;AAEZC,MAAAA,EAAE,EAACvC,MAAM,CAAC,IAAIoC,IAAJ,CAASG,EAAT,CAAD,CAAN,CAAqBD,MAArB,CAA4B,YAA5B;AAFS,KAAD,CAAb;AAID,GAND;;AAQAjD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGoB,eAAe,CAAC,CAAD,CAAf,CAAmBiC,UAAtB,EAAiC;AAC/BC,MAAAA,SAAS,GAAGC,IAAZ,CAAiB,MAAM;AACrB7C,QAAAA,QAAQ,CAAC8C,OAAT,CAAiBC,MAAjB;AACD,OAFD;AAGD;AACF,GANQ,EAMN,CAACrC,eAAD,EAAkBwB,UAAlB,EAA8BD,YAA9B,CANM,CAAT;;AAQA,QAAMe,aAAa,GAAG,MAAOxC,KAAP,IAAwB;AAC5CR,IAAAA,QAAQ,CAAC8C,OAAT,CAAiBG,MAAjB;AACA,UAAMC,GAAG,GAAG,MAAMxD,aAAa,CAAC,KAAD,EAAS,kBAAT,EAA2B;AACxDyD,MAAAA,IAAI,EAAE;AACJC,QAAAA,IAAI,EAAC,CADD;AAEJC,QAAAA,UAAU,EAAC,EAFP;AAGJC,QAAAA,UAAU,EAAC9C;AAHP;AADkD,KAA3B,CAA/B;;AAQA,QAAG0C,GAAG,IAAIA,GAAG,CAACK,MAAJ,KAAe,GAAzB,EAA6B;AAC3B,UAAIC,SAAS,GAAGzD,UAAU,CAAE,cAAF,CAA1B;AACAyD,MAAAA,SAAS,GAAGA,SAAS,CAACpC,GAAV,CAAc,CAACZ,KAAD,EAAWiD,KAAX,KAA4B;AACpD,+CAAWjD,KAAX;AAAkBgB,UAAAA,GAAG,EAAChB,KAAK,CAACgB,GAA5B;AAAiCkC,UAAAA,IAAI,EAAClD,KAAK,CAACkD,IAA5C;AAAkDC,UAAAA,KAAK,EAACnD,KAAK,CAACmD;AAA9D;AACD,OAFW,CAAZ;AAGAxC,MAAAA,cAAc,CAACqC,SAAD,CAAd,CAL2B,CAM3B;;AACA,UAAII,MAAM,GAAG,EAAb;AACAA,MAAAA,MAAM,GAAGV,GAAG,CAACW,OAAJ,CAAYC,SAAZ,CAAsB1C,GAAtB,CAA0B,CAAC2C,MAAD,EAAaN,KAAb,KAA8B;AAC/D,YAAIO,QAAgB,GAAG,EAAvB;AAEAA,QAAAA,QAAQ,GAAG;AACTP,UAAAA,KAAK,EAACA,KAAK,GAAC,CADH;AAETE,UAAAA,KAAK,EAAEI,MAAM,CAACJ,KAFL,CAGT;AACA;AACA;;AALS,SAAX;AAOA,YAAIM,SAAS,GAAGC,IAAI,CAACC,MAAL,KAAc,IAA9B;AACA;AACEvD,UAAAA,EAAE,EAAEqD;AADN,WAEKF,MAFL,GAGKC,QAHL;AAKD,OAhBQ,CAAT;AAiBA/C,MAAAA,gBAAgB,CAAC,CAAC,GAAG2C,MAAJ,CAAD,CAAhB;AACD;AACF,GArCD;;AAuCA,QAAMhB,SAAS,GAAG,YAAY;AAC5B5C,IAAAA,QAAQ,CAAC8C,OAAT,CAAiBG,MAAjB;AACA,UAAMC,GAAG,GAAG,MAAMxD,aAAa,CAAC,KAAD,EAAS,YAAT,EAAqB;AAClDyD,MAAAA,IAAI,EAAE;AACJR,QAAAA,UAAU,EAAEjC,eAAe,CAAC,CAAD,CAAf,CAAmBiC,UAD3B;AAEJW,QAAAA,UAAU,EAAE5C,eAAe,CAAC,CAAD,CAAf,CAAmB0D,YAF3B;AAGJC,QAAAA,MAAM,EAAE3D,eAAe,CAAC,CAAD,CAAf,CAAmB4D;AAHvB,OAD4C;AAMlDC,MAAAA,MAAM,EAAE;AACNC,QAAAA,GAAG,EAAEvC,YADC;AAENG,QAAAA,IAAI,EAAEF,UAAU,CAACE,IAFX;AAGNI,QAAAA,EAAE,EAAEN,UAAU,CAACM;AAHT;AAN0C,KAArB,CAA/B;;AAYA,QAAGU,GAAG,IAAIA,GAAG,CAACK,MAAJ,KAAe,GAAzB,EAA6B;AAC3B,UAAIC,SAAS,GAAGzD,UAAU,CAAE,cAAF,CAA1B;AACA,UAAI6D,MAAM,GAAG,EAAb;AAEAA,MAAAA,MAAM,GAAGV,GAAG,CAACW,OAAb;;AAEA,UAAGX,GAAG,CAACW,OAAJ,CAAYY,MAAZ,IAAsB,CAAzB,EAA2B;AAC1BxD,QAAAA,gBAAgB,CAAC2C,MAAM,CAACxC,GAAP,CAAWC,CAAC,IAAI;AAC/B,cAAI4C,SAAS,GAAGC,IAAI,CAACC,MAAL,KAAgB,IAAhC;AACA,iDACK9C,CADL;AAEET,YAAAA,EAAE,EAAG,iBAAgBqD,SAAU,EAFjC;AAGES,YAAAA,MAAM,EAAErD,CAAC,CAACsD,GAAF,CAAMD,MAHhB;AAIEpB,YAAAA,UAAU,EAAEjC,CAAC,CAACuD,OAAF,CAAUlB;AAJxB;AAMAV,UAAAA,aAAa,CAAC3B,CAAC,CAACuD,OAAF,CAAUtB,UAAX,CAAb,CAAoCT,IAApC,CAAyC,MAAM;AAC7C7C,YAAAA,QAAQ,CAAC8C,OAAT,CAAiBC,MAAjB;AACD,WAFD;AAGD,SAXgB,CAAD,CAAhB;AAYA;AACF,KApBD,MAoBM,IAAIG,GAAG,CAACtB,KAAJ,KAAc,GAAlB,EAAuB;AAC3B5B,MAAAA,QAAQ,CAAC6E,MAAT,CAAgBC,OAAhB,CAAwB,aAAxB,EAAuC,WAAvC,EAAoD,IAApD,EAA0D,MAAM;AAC9DxE,QAAAA,MAAM,CAACyE,IAAP;AACD,OAFD;AAGD;AACF,GAvCD;;AAyCA,QAAMC,aAAa,GAAG,MAAM;AAC1B,QAAIC,aAAwB,GAAG,EAA/B;AACAjE,IAAAA,aAAa,CAACI,GAAd,CAAkB8D,GAAG,IAAI;AACvBD,MAAAA,aAAa,CAACE,IAAd,CAAmBrD,UAAU,CAACsD,GAAX,CAAeF,GAAG,CAACtE,EAAnB,CAAnB;AACD,KAFD;AAGAV,IAAAA,aAAa,CAACgB,WAAD,EAAcF,aAAd,EAA8B,MAA9B,EAAqC,MAArC,EAA6CiE,aAA7C,CAAb;AACD,GAND;;AAQA,QAAMI,YAAY,GAAG,MAAM5B,KAAN,IAAuB;AAC1C,YAAQA,KAAR;AACE,WAAK,CAAL;AACEuB,QAAAA,aAAa;AACb;;AACF,WAAK,CAAL;AACE,YAAIM,cAAc,GAAGtE,aAAa,CAACI,GAAd,CAAkB8D,GAAG,IAAI;AAC5C,cAAGpD,UAAU,CAACsD,GAAX,CAAeF,GAAG,CAACtE,EAAnB,CAAH,EAA0B;AACxB;AACD,WAFD,MAEK;AACH,qCACKsE,GADL;AAGD;AACF,SARoB,EAQlBK,MARkB,CAQXlE,CAAC,IAAIA,CARM,CAArB;AAUAJ,QAAAA,gBAAgB,CAAC,CAAC,GAAGqE,cAAJ,CAAD,CAAhB;AACA;AAhBJ;AAkBD,GAnBD;;AAqBA,QAAME,UAAU,GAAIC,MAAD,IAAgB;AACjC,UAAMC,WAAW,GAAG,CAACC,CAAD,EAAQC,CAAR,KAAkB;AACpC;AACA,UAAGD,CAAC,CAACE,WAAF,GAAgBD,CAAC,CAACC,WAArB,EAAiC;AAC/B,eAAO,CAAC,CAAR,CAD+B,CAE/B;AACD,OAHD,MAGM,IAAGF,CAAC,CAACE,WAAF,GAAgBD,CAAC,CAACC,WAArB,EAAiC;AACrC,eAAO,CAAP,CADqC,CAErC;AACD,OAHK,MAGD;AACH,eAAO,CAAP;AACD;AACF,KAXD;;AAaAJ,IAAAA,MAAM,CAACK,IAAP,CAAYJ,WAAZ;AACA,QAAIK,QAAQ,GAAGN,MAAM,CAACrE,GAAP,CAAW,CAACC,CAAD,EAAWoC,KAAX,KAA0B;AAClD,6CAAWpC,CAAX;AAAcoC,QAAAA,KAAK,EAACA,KAAK,GAAC,CAA1B;AAA6BoC,QAAAA,WAAW,EAACpC,KAAK,GAAC;AAA/C;AACD,KAFc,CAAf;AAGAxC,IAAAA,gBAAgB,CAAC,CAAC,GAAG8E,QAAJ,CAAD,CAAhB;AACD,GAnBD;;AAqBA,SACE;AAAK,IAAA,KAAK,EAAE;AAACC,MAAAA,OAAO,EAAC;AAAT,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,cAAD;AAAgB,IAAA,QAAQ,EAAE,KAA1B;AAAiC,IAAA,OAAO,EAAE,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,KAAK,EAAE,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,UAAD;AACE,IAAA,QAAQ,MADV;AAEE,IAAA,SAAS,MAFX;AAGE,IAAA,UAAU,EAAE,CACVlG,YADU,EAEV,GAAGgB,aAFO,CAHd;AAOE,IAAA,GAAG,EAAEJ,eAPP;AAQE,IAAA,MAAM,EAAEC,kBARV;AASE,IAAA,UAAU,EAAEmB,UATd,CAUE;AAVF;AAWE,IAAA,aAAa,EAAEC,aAXjB;AAYE,IAAA,MAAM,EAAE,EAZV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAgBE;AAAK,IAAA,KAAK,EAAE;AAACiE,MAAAA,OAAO,EAAC,MAAT;AAAiBC,MAAAA,cAAc,EAAC,eAAhC;AAAiDC,MAAAA,MAAM,EAAC;AAAxD,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIxF,eAAe,CAAC,CAAD,CAAf,CAAmBiC,UAAnB,GACI;AAAM,IAAA,KAAK,EAAE;AAACwD,MAAAA,KAAK,EAAC,OAAP;AAAgBC,MAAAA,QAAQ,EAAC,EAAzB;AAA6BC,MAAAA,UAAU,EAAC;AAAxC,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDADJ,GAII;AAAM,IAAA,KAAK,EAAE;AAACF,MAAAA,KAAK,EAAC,WAAP;AAAoBC,MAAAA,QAAQ,EAAC,EAA7B;AAAiCC,MAAAA,UAAU,EAAC;AAA5C,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DANR,EAUE;AAAK,IAAA,KAAK,EAAE;AAACL,MAAAA,OAAO,EAAE;AAAV,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,oBAAD;AAAsB,IAAA,UAAU,EAAE9D,UAAlC;AAAiE,IAAA,kBAAkB,EAAEC,aAArF;AAAoG,IAAA,SAAS,EAAE,KAA/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,WAAD;AAAa,IAAA,OAAO,EAAE,CAAE,SAAF,EAAa,QAAb,CAAtB;AAA8C,IAAA,cAAc,EAAEkD,YAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAVF,CAhBF,EA+BE,MAAC,UAAD;AACE,IAAA,QAAQ,MADV;AAEE,IAAA,UAAU,EAAE,CACVvF,YADU,EAEV,GAAGoB,WAFO,CAFd;AAME,IAAA,GAAG,EAAEF,aANP;AAOE,IAAA,MAAM,EAAGsF,CAAD,IAAO;AACbzE,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAZ,MAAAA,gBAAgB,CAACqF,CAAD,CAAhB;AACD,KAVH;AAWE,IAAA,KAAK,EAAE,IAXT;AAYE,IAAA,MAAM,EAAE,GAZV,CAaE;AAbF;AAcE,IAAA,aAAa,EAAEvE,aAdjB;AAeE,IAAA,UAAU,EAAED,UAfd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA/BF,CAHF,CAFF,CADF;AA0DD,CA/OD;;AAiPA,eAAezB,sBAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport styled from \"styled-components\";\nimport MenuNavigation from \"../../../../component/MenuNav/MenuNavigation\";\nimport ProfileHeader from \"../../../../component/Profile/ProfileHeader\";\nimport {RequestMethod} from \"../../../../common/RequestFunctions\";\nimport PageHeader from \"../../../../component/Header/Header\";\nimport ExcelTable from \"../../../../component/Excel/ExcelTable\";\nimport ButtonGroup from \"../../../../component/ButtonGroup\";\n\nimport {IExcelHeaderType} from \"../../../../common/@types/type\";\n//@ts-ignore\nimport {SelectColumn} from \"react-data-grid\";\nimport {columnlist} from \"../../../../common/columnInit\";\n//@ts-ignore\nimport Notiflix from \"notiflix\";\nimport moment from 'moment'\nimport {excelDownload} from '../../../../common/excelDownloadFunction'\nimport PeriodSelectCalendar from '../../../../component/Header/PeriodSelectCalendar'\nimport {useRouter} from 'next/router'\n\ninterface SelectParameter {\n  from:string\n  to:string\n}\n\n\nconst RegisterBasicContainer = () => {\n  const router = useRouter()\n\n  const changeHeaderStatus = (value:number) => {\n    setHeaderStatus(value);\n  }\n\n  const [processBasicRow, setProcessBasicRow] = useState<any[]>([{\n    id: '', customer_id: ''\n  }]);\n  const [processColumn, setProcessColumn] = useState<Array<IExcelHeaderType>>(columnlist[`qualityDefectTop`] );\n\n  const [pauseBasicRow, setPauseBasicRow] = useState<any[]>([]);\n  const [pauseColumn, setPauseColumn] = useState<Array<IExcelHeaderType>>(columnlist[`qualityDefectContents`].map(v => {\n    console.log(v.key)\n    if(v.key === 'amount'){\n      return {\n        ...v,\n        result: changeHeaderStatus\n      }\n    }\n    return v\n  }));\n  const [selectRow, setSelectRow] = useState<any>(-1);\n\n  const [state, setState] = useState<boolean>(false);\n\n  const [selectList, setSelectList] = useState<ReadonlySet<number>>(new Set());\n  const [headerStatus, setHeaderStatus] = useState<number | string>(\"\");\n\n  const [selectDate, setSelectDate] = useState<{from:string, to:string}>({\n    from: moment(new Date()).startOf('isoWeek').format('YYYY-MM-DD'),\n    to: moment(new Date()).endOf('isoWeek').format('YYYY-MM-DD')\n  });\n\n  const changeSelectDate = (from:string, to:string) => {\n\n    setSelectDate({\n      from:moment(new Date(from)).format('YYYY-MM-DD'),\n      to:moment(new Date(to)).format('YYYY-MM-DD')\n    })\n  }\n\n  useEffect(() => {\n    if(processBasicRow[0].product_id){\n      LoadBasic().then(() => {\n        Notiflix.Loading.remove()\n      })\n    }\n  }, [processBasicRow, selectDate, headerStatus])\n\n  const LoadPauseList = async (value:string) => {\n    Notiflix.Loading.circle()\n    const res = await RequestMethod(\"get\", `defectReasonList`,{\n      path: {\n        page:1,\n        renderItem:51,\n        process_id:value\n      }\n    })\n\n    if(res && res.status === 200){\n      let tmpColumn = columnlist[`defectReason`];\n      tmpColumn = tmpColumn.map((value:any,index:number) => {\n        return {...value, key:value.key, name:value.name, width:value.width}\n      })\n      setPauseColumn(tmpColumn);\n      // tmpColumn.push({key:})\n      let tmpRow = [];\n      tmpRow = res.results.info_list.map((column: any,index:number) => {\n        let menuData: object = {};\n\n        menuData = {\n          index:index+1,\n          width: column.width,\n          // id:Math.random()*100\n          // id: info.ppr_id,\n          // name: info.reason,\n        }\n        let random_id = Math.random()*1000;\n        return {\n          id: random_id,\n          ...column,\n          ...menuData\n        }\n      })\n      setPauseBasicRow([...tmpRow]);\n    }\n  }\n\n  const LoadBasic = async () => {\n    Notiflix.Loading.circle()\n    const res = await RequestMethod('get', `defectList`,{\n      path: {\n        product_id: processBasicRow[0].product_id,\n        process_id: processBasicRow[0].process_idPK,\n        pdr_id: processBasicRow[0].pdr_idPK\n      },\n      params: {\n        opt: headerStatus,\n        from: selectDate.from,\n        to: selectDate.to,\n      }\n    })\n    if(res && res.status === 200){\n      let tmpColumn = columnlist[`defectReason`];\n      let tmpRow = []\n\n      tmpRow = res.results\n\n      if(res.results.length >= 0){\n       setPauseBasicRow(tmpRow.map(v => {\n         let random_id = Math.random() * 1000\n         return {\n           ...v,\n           id: `processDefect_${random_id}`,\n           reason: v.pdr.reason,\n           process_id: v.process.name\n         }\n         LoadPauseList(v.process.process_id).then(() => {\n           Notiflix.Loading.remove()\n         })\n       }))\n      }\n    }else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back()\n      })\n    }\n  }\n\n  const downloadExcel = () => {\n    let tmpSelectList: boolean[] = []\n    pauseBasicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id))\n    })\n    excelDownload(pauseColumn, pauseBasicRow, `불량통계`, \"불량통계\", tmpSelectList)\n  }\n\n  const buttonEvents = async(index:number) => {\n    switch (index) {\n      case 1 :\n        downloadExcel()\n        return\n      case 0 :\n        let deleteBasicRow = pauseBasicRow.map(row => {\n          if(selectList.has(row.id)){\n            return\n          }else{\n            return {\n              ...row,\n            }\n          }\n        }).filter(v => v)\n\n        setPauseBasicRow([...deleteBasicRow])\n        return\n    }\n  }\n\n  const sortObject = (object:any) => {\n    const compare_qty = (a:any, b:any) => {\n      // a should come before b in the sorted order\n      if(a.lengthIndex < b.lengthIndex){\n        return -1;\n        // a should come after b in the sorted order\n      }else if(a.lengthIndex > b.lengthIndex){\n        return 1;\n        // a and b are the same\n      }else{\n        return 0;\n      }\n    }\n\n    object.sort(compare_qty)\n    let sortData = object.map((v:object, index:number)=>{\n      return {...v, index:index+1, lengthIndex:index+1}\n    });\n    setPauseBasicRow([...sortData]);\n  }\n\n  return (\n    <div style={{display:\"flex\"}}>\n      <MenuNavigation pageType={'MES'} subType={2}/>\n      <div>\n        <ProfileHeader/>\n\n        <div>\n          <PageHeader title={\"불량 통계\"} />\n          <ExcelTable\n            editable\n            resizable\n            headerList={[\n              SelectColumn,\n              ...processColumn\n            ]}\n            row={processBasicRow}\n            setRow={setProcessBasicRow}\n            selectList={selectList}\n            //@ts-ignore\n            setSelectList={setSelectList}\n            height={80}\n          />\n          <div style={{display:\"flex\", justifyContent:\"space-between\", margin:\"15px 0\"}}>\n            {\n              processBasicRow[0].product_id\n                ? <span style={{color:\"white\", fontSize:22, fontWeight:\"bold\"}}>\n                            공정별 불량 통계\n                        </span>\n                : <span style={{color:\"#ffffff58\", fontSize:22, fontWeight:\"bold\"}}>\n                            제품을 선택해주세요\n                        </span>\n            }\n            <div style={{display: 'flex', }}>\n              <PeriodSelectCalendar selectDate={selectDate as SelectParameter} onChangeSelectDate={setSelectDate} dataLimit={false} />\n              <ButtonGroup buttons={[ '선택 행 숨김', '엑셀로 받기']} buttonsOnclick={buttonEvents}/>\n            </div>\n          </div>\n          <ExcelTable\n            editable\n            headerList={[\n              SelectColumn,\n              ...pauseColumn\n            ]}\n            row={pauseBasicRow}\n            setRow={(e) => {\n              setState(true)\n              setPauseBasicRow(e)\n            }}\n            width={1570}\n            height={440}\n            // setSelectList={changeSetSelectList}\n            setSelectList={setSelectList}\n            selectList={selectList}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default RegisterBasicContainer;\n"]},"metadata":{},"sourceType":"module"}