{"ast":null,"code":"import { RequestMethod } from './RequestFunctions';\nexport const excelDownload = async (titleObj, infoList, fileName, sheetName, downloadIndexs) => {\n  let tmpHeaders = {\n    cells: [],\n    height: 0,\n    merges: []\n  };\n  let tmpCells = [];\n\n  if (titleObj.length) {\n    tmpHeaders = {\n      cells: [...titleObj.map(value => {\n        var _value$name;\n\n        return {\n          key: value.key,\n          text: {\n            value: (_value$name = value.name) !== null && _value$name !== void 0 ? _value$name : \"\"\n          },\n          canModify: false\n        };\n      })],\n      merges: []\n    };\n    infoList.map((value, index) => {\n      if (downloadIndexs[index]) {\n        tmpCells.push({\n          cells: [...tmpHeaders.cells.map(cells => {\n            var _value$cells$key;\n\n            return {\n              text: {\n                value: cells.key ? (_value$cells$key = value[cells.key]) !== null && _value$cells$key !== void 0 ? _value$cells$key : \"\" : \"\"\n              },\n              canModify: true,\n              bold: {\n                top: 0x1,\n                bottom: 0x1,\n                left: 0x1,\n                right: 0x1\n              }\n            };\n          })],\n          merges: []\n        });\n      }\n    });\n  }\n\n  const body = {\n    sheets: [{\n      sheetName: sheetName,\n      rows: [tmpHeaders, ...tmpCells]\n    }]\n  };\n  const res = await RequestMethod('post', `excelDownload`, body, undefined, 'blob');\n\n  if (res) {\n    const downloadUrl = window.URL.createObjectURL(new Blob([res]));\n    const link = document.createElement('a');\n    link.href = downloadUrl;\n    link.setAttribute('download', `${fileName}.xls`); //any other extension\n\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n  }\n};","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/main/common/excelDownloadFunction.ts"],"names":["RequestMethod","excelDownload","titleObj","infoList","fileName","sheetName","downloadIndexs","tmpHeaders","cells","height","merges","tmpCells","length","map","value","key","text","name","canModify","index","push","bold","top","bottom","left","right","body","sheets","rows","res","undefined","downloadUrl","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","appendChild","click","remove"],"mappings":"AACA,SAAQA,aAAR,QAA4B,oBAA5B;AAmCA,OAAO,MAAMC,aAAa,GAAG,OAAOC,QAAP,EAAwBC,QAAxB,EAAyCC,QAAzC,EAA2DC,SAA3D,EAA8EC,cAA9E,KAA4G;AACvI,MAAIC,UAA6B,GAAG;AAACC,IAAAA,KAAK,EAAE,EAAR;AAAYC,IAAAA,MAAM,EAAE,CAApB;AAAuBC,IAAAA,MAAM,EAAE;AAA/B,GAApC;AACA,MAAIC,QAA6B,GAAG,EAApC;;AAEA,MAAGT,QAAQ,CAACU,MAAZ,EAAoB;AAClBL,IAAAA,UAAU,GAAG;AACXC,MAAAA,KAAK,EAAE,CAAC,GAAGN,QAAQ,CAACW,GAAT,CAAcC,KAAD,IAAW;AAAA;;AACjC,eAAO;AACLC,UAAAA,GAAG,EAAED,KAAK,CAACC,GADN;AAELC,UAAAA,IAAI,EAAE;AACJF,YAAAA,KAAK,iBAAEA,KAAK,CAACG,IAAR,qDAAgB;AADjB,WAFD;AAKLC,UAAAA,SAAS,EAAE;AALN,SAAP;AAOD,OARU,CAAJ,CADI;AAUXR,MAAAA,MAAM,EAAE;AAVG,KAAb;AAaAP,IAAAA,QAAQ,CAACU,GAAT,CAAc,CAACC,KAAD,EAAOK,KAAP,KAAiB;AAC7B,UAAGb,cAAc,CAACa,KAAD,CAAjB,EAAyB;AACvBR,QAAAA,QAAQ,CAACS,IAAT,CAAc;AACZZ,UAAAA,KAAK,EAAE,CAAC,GAAGD,UAAU,CAACC,KAAX,CAAiBK,GAAjB,CAAqBL,KAAK,IAAI;AAAA;;AACvC,mBAAO;AACLQ,cAAAA,IAAI,EAAE;AACJF,gBAAAA,KAAK,EAAEN,KAAK,CAACO,GAAN,uBAAYD,KAAK,CAACN,KAAK,CAACO,GAAP,CAAjB,+DAAgC,EAAhC,GAAqC;AADxC,eADD;AAILG,cAAAA,SAAS,EAAE,IAJN;AAKLG,cAAAA,IAAI,EAAC;AACHC,gBAAAA,GAAG,EAAC,GADD;AAEHC,gBAAAA,MAAM,EAAC,GAFJ;AAGHC,gBAAAA,IAAI,EAAC,GAHF;AAIHC,gBAAAA,KAAK,EAAC;AAJH;AALA,aAAP;AAYD,WAbU,CAAJ,CADK;AAeZf,UAAAA,MAAM,EAAE;AAfI,SAAd;AAiBD;AACF,KApBD;AAqBD;;AAED,QAAMgB,IAAI,GAAG;AACXC,IAAAA,MAAM,EAAE,CAAC;AACPtB,MAAAA,SAAS,EAAEA,SADJ;AAEPuB,MAAAA,IAAI,EAAE,CACJrB,UADI,EAEJ,GAAGI,QAFC;AAFC,KAAD;AADG,GAAb;AASA,QAAMkB,GAAG,GAAG,MAAM7B,aAAa,CAAC,MAAD,EAAU,eAAV,EAA0B0B,IAA1B,EAAgCI,SAAhC,EAA2C,MAA3C,CAA/B;;AAEA,MAAID,GAAJ,EAAS;AACP,UAAME,WAAW,GAAGC,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2B,IAAIC,IAAJ,CAAS,CAACN,GAAD,CAAT,CAA3B,CAApB;AACA,UAAMO,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAb;AACAF,IAAAA,IAAI,CAACG,IAAL,GAAYR,WAAZ;AACAK,IAAAA,IAAI,CAACI,YAAL,CAAkB,UAAlB,EAA+B,GAAEpC,QAAS,MAA1C,EAJO,CAI2C;;AAClDiC,IAAAA,QAAQ,CAACX,IAAT,CAAce,WAAd,CAA0BL,IAA1B;AACAA,IAAAA,IAAI,CAACM,KAAL;AACAN,IAAAA,IAAI,CAACO,MAAL;AACD;AACF,CA7DM","sourcesContent":["import {SF_ENDPOINT_EXCEL, TOKEN_NAME} from './configset'\nimport {RequestMethod} from './RequestFunctions'\n\ninterface ExcelCellTextType {\n  fontSize?: number\n  value: string\n  color?: string\n  bold?: boolean\n}\n\ninterface ExcelCellBorderType {\n  top?: number\n  bottom?: number\n  left?: number\n  right?: number\n}\n\ninterface ExcelCellMergeType {\n  mergeFrom: number,\n  mergeTo: number\n}\n\ninterface ExcelCellType {\n  key?: string\n  text: ExcelCellTextType\n  canModify: boolean\n  bgColor?: string\n  border?: ExcelCellBorderType\n}\n\ninterface ExcelDownloadType {\n  height?: number\n  cells: ExcelCellType[]\n  merges: ExcelCellMergeType[]\n}\n\nexport const excelDownload = async (titleObj: any[], infoList: any[], fileName: string, sheetName: string, downloadIndexs: boolean[]) => {\n  let tmpHeaders: ExcelDownloadType = {cells: [], height: 0, merges: []}\n  let tmpCells: ExcelDownloadType[] = []\n\n  if(titleObj.length) {\n    tmpHeaders = {\n      cells: [...titleObj.map((value) => {\n        return {\n          key: value.key,\n          text: {\n            value: value.name ?? \"\",\n          },\n          canModify: false,\n        }\n      })],\n      merges: []\n    }\n\n    infoList.map(((value,index) => {\n      if(downloadIndexs[index]){\n        tmpCells.push({\n          cells: [...tmpHeaders.cells.map(cells => {\n            return {\n              text: {\n                value: cells.key ? value[cells.key] ?? \"\" : \"\",\n              },\n              canModify: true,\n              bold:{\n                top:0x1,\n                bottom:0x1,\n                left:0x1,\n                right:0x1\n              }\n            }\n          })],\n          merges: []\n        })\n      }\n    }))\n  }\n\n  const body = {\n    sheets: [{\n      sheetName: sheetName,\n      rows: [\n        tmpHeaders,\n        ...tmpCells\n      ]\n    }]\n  }\n  const res = await RequestMethod('post', `excelDownload`, body, undefined, 'blob')\n\n  if (res) {\n    const downloadUrl = window.URL.createObjectURL(new Blob([res]));\n    const link = document.createElement('a');\n    link.href = downloadUrl;\n    link.setAttribute('download', `${fileName}.xls`); //any other extension\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}