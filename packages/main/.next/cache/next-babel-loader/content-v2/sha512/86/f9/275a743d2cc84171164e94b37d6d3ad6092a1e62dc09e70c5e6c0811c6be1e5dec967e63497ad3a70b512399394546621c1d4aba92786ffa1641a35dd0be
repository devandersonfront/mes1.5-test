{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/operaction/list.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport ExcelTable from '../../../component/Excel/ExcelTable';\nimport MenuNavigation from '../../../component/MenuNav/MenuNavigation';\nimport ProfileHeader from '../../../component/Profile/ProfileHeader';\nimport PageHeader from '../../../component/Header/Header'; // @ts-ignore\n\nimport { SelectColumn } from 'react-data-grid';\nimport { RequestMethod } from '../../../common/RequestFunctions';\nimport { columnlist } from \"../../../common/columnInit\";\nimport Notiflix from \"notiflix\";\nimport { useRouter } from 'next/router';\nimport { MAX_VALUE } from '../../../common/configset';\nimport TextEditor from '../../../component/InputBox/ExcelBasicInputBox';\nimport { excelDownload } from '../../../common/excelDownloadFunction';\nimport PaginationComponent from '../../../component/Pagination/PaginationComponent';\nimport ExcelDownloadModal from '../../../component/Modal/ExcelDownloadMoadal';\nimport moment from 'moment';\nconst title = '작업지시서 리스트';\nconst optList = ['고객사명', '모델명', 'CODE', '품명', '공정', '기계', 'Lot번호'];\nconst statusList = ['시작 전', '작업중', '일시정지', '작업종료', '미완료'];\n\nconst BasicContainer = ({\n  page,\n  keyword,\n  option\n}) => {\n  const router = useRouter();\n  const {\n    0: excelOpen,\n    1: setExcelOpen\n  } = useState(false);\n  const {\n    0: basicRow,\n    1: setBasicRow\n  } = useState([{\n    name: \"\",\n    id: \"\"\n  }]);\n  const {\n    0: headerStatus,\n    1: setHeaderStatus\n  } = useState(\"\");\n  const {\n    0: column,\n    1: setColumn\n  } = useState(columnlist.operationList);\n  const {\n    0: selectList,\n    1: setSelectList\n  } = useState(new Set());\n  const {\n    0: optionList,\n    1: setOptionList\n  } = useState(optList);\n  const {\n    0: optionIndex,\n    1: setOptionIndex\n  } = useState(0);\n  const {\n    0: pageInfo,\n    1: setPageInfo\n  } = useState({\n    page: 1,\n    total: 1\n  });\n  const {\n    0: selectDate,\n    1: setSelectDate\n  } = useState({\n    from: moment().startOf('isoWeek').format('YYYY-MM-DD'),\n    to: moment().endOf('isoWeek').format('YYYY-MM-DD')\n  });\n\n  const changeHeaderStatus = value => {\n    setHeaderStatus(value);\n  };\n\n  const checkStatus = value => {\n    if (value === -1) {\n      return \"/1,2,3,4/\";\n    } else {\n      return value;\n    }\n  };\n\n  useEffect(() => {\n    setOptionIndex(option);\n\n    if (keyword) {\n      SearchBasic(keyword, option, page).then(() => {\n        Notiflix.Loading.remove();\n      });\n    } else {\n      LoadBasic(page).then(() => {\n        Notiflix.Loading.remove();\n      });\n    }\n  }, [page, keyword, option, selectDate, headerStatus]);\n\n  const loadAllSelectItems = async column => {\n    let tmpColumn = column.map(async v => {\n      if (v.selectList && v.selectList.length === 0) {\n        let tmpKey = v.key;\n\n        if (tmpKey === 'customer_id') {\n          tmpKey = 'customer';\n        } else if (tmpKey === 'cm_id') {\n          tmpKey = 'model';\n        }\n\n        const res = await RequestMethod('get', `${tmpKey}List`, {\n          path: {\n            page: 1,\n            renderItem: MAX_VALUE\n          }\n        });\n        return _objectSpread(_objectSpread({}, v), {}, {\n          selectList: [...res.results.info_list.map(value => {\n            return _objectSpread(_objectSpread({}, value), {}, {\n              pk: value.ca_id\n            });\n          })]\n        });\n      } else {\n        if (v.selectList) {\n          return _objectSpread(_objectSpread({}, v), {}, {\n            pk: v.unit_id\n          });\n        } else if (v.key === \"status\") {\n          return _objectSpread(_objectSpread({}, v), {}, {\n            result: changeHeaderStatus\n          });\n        } else {\n          return v;\n        }\n      }\n    });\n    Promise.all(tmpColumn).then(res => {\n      setColumn([...res.map(v => {\n        return _objectSpread(_objectSpread({}, v), {}, {\n          name: v.moddable ? v.name + '(필수)' : v.name\n        });\n      })]);\n    });\n  };\n\n  const SaveBasic = async () => {\n    let res = await RequestMethod('put', `operationModify`, {\n      sheets: basicRow.map((row, i) => {\n        if (selectList.has(row.id)) {\n          var _row$mold;\n\n          let selectData = {};\n          return _objectSpread(_objectSpread(_objectSpread({}, row), selectData), {}, {\n            ln_id: row.ln_idPK,\n            machine_id: row.machine_idPK,\n            process_id: row.process_idPK,\n            mold_id: (_row$mold = row.mold) === null || _row$mold === void 0 ? void 0 : _row$mold.mold_id\n          });\n        }\n      }).filter(v => v)\n    });\n\n    if (res) {\n      if (res.status === 200) {\n        Notiflix.Report.success('저장되었습니다.', '', '확인');\n\n        if (keyword) {\n          SearchBasic(keyword, option, page).then(() => {\n            Notiflix.Loading.remove();\n          });\n        } else {\n          LoadBasic(page).then(() => {\n            Notiflix.Loading.remove();\n          });\n        }\n      }\n    }\n  };\n\n  const DeleteBasic = async () => {\n    const res = await RequestMethod('delete', `operationDelete`, {\n      sheets: basicRow.map((row, i) => {\n        if (selectList.has(row.id)) {\n          return row.osd_id;\n        }\n      }).filter(v => v)\n    });\n\n    if (res) {\n      if (res.status === 200) {\n        if (keyword) {\n          SearchBasic(keyword, option, page).then(() => {\n            Notiflix.Loading.remove();\n          });\n        } else {\n          LoadBasic(page).then(() => {\n            Notiflix.Loading.remove();\n          });\n        }\n      }\n    }\n  };\n\n  const LoadBasic = async page => {\n    Notiflix.Loading.circle();\n    const res = await RequestMethod('get', `operactionList`, {\n      path: {\n        page: page || page !== 0 ? page : 1,\n        renderItem: 18,\n        status: headerStatus\n      },\n      params: {\n        from: selectDate.from,\n        to: selectDate.to\n      }\n    });\n\n    if (res && res.status === 200) {\n      if (res.results.totalPages !== 0 && res.results.totalPages < page) {\n        LoadBasic(page - 1).then(() => {\n          Notiflix.Loading.remove();\n        });\n      } else {\n        setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n          page: res.results.page,\n          total: res.results.totalPages\n        }));\n        cleanUpData(res);\n      }\n    } else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back();\n      });\n    }\n  };\n\n  const SearchBasic = async (keyword, option, isPaging) => {\n    Notiflix.Loading.circle();\n\n    if (!isPaging) {\n      setOptionIndex(option);\n    }\n\n    const res = await RequestMethod('get', `operationSearch`, {\n      path: {\n        page: isPaging !== null && isPaging !== void 0 ? isPaging : 1,\n        renderItem: 18,\n        status: headerStatus\n      },\n      params: {\n        keyword: keyword !== null && keyword !== void 0 ? keyword : '',\n        opt: option !== null && option !== void 0 ? option : 0,\n        from: selectDate.from,\n        to: selectDate.to\n      }\n    });\n\n    if (res && res.status === 200) {\n      setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n        page: res.results.page,\n        total: res.results.totalPages\n      }));\n      cleanUpData(res);\n    }\n  };\n\n  const changeRow = row => {\n    var _row$product, _row$product2, _row$product3, _row$product4, _row$product5, _row$product6, _row$product7, _row$product8, _row$process, _row$process2, _row$mold2, _row$machine, _row$machine2, _row$lot_number$numbe, _row$lot_number, _row$lot_number$ln_id, _row$lot_number2;\n\n    let tmpData = {};\n    return _objectSpread(_objectSpread({}, row), {}, {\n      identification: row.identification,\n      date: row.date,\n      customer_id: (_row$product = row.product) === null || _row$product === void 0 ? void 0 : _row$product.raw_material.model.customer.name,\n      customer_idPK: (_row$product2 = row.product) === null || _row$product2 === void 0 ? void 0 : _row$product2.raw_material.model.customer.customer_id,\n      cm_id: (_row$product3 = row.product) === null || _row$product3 === void 0 ? void 0 : _row$product3.raw_material.model.model,\n      cm_idPK: (_row$product4 = row.product) === null || _row$product4 === void 0 ? void 0 : _row$product4.raw_material.model.cm_id,\n      code: (_row$product5 = row.product) === null || _row$product5 === void 0 ? void 0 : _row$product5.raw_material.code,\n      rm_id: (_row$product6 = row.product) === null || _row$product6 === void 0 ? void 0 : _row$product6.raw_material.rm_id,\n      name: (_row$product7 = row.product) === null || _row$product7 === void 0 ? void 0 : _row$product7.raw_material.name,\n      texture: (_row$product8 = row.product) === null || _row$product8 === void 0 ? void 0 : _row$product8.raw_material.texture,\n      process_id: (_row$process = row.process) === null || _row$process === void 0 ? void 0 : _row$process.name,\n      process_idPK: (_row$process2 = row.process) === null || _row$process2 === void 0 ? void 0 : _row$process2.process_id,\n      seq: row.seq,\n      mold_id: (_row$mold2 = row.mold) === null || _row$mold2 === void 0 ? void 0 : _row$mold2.name,\n      machine_id: (_row$machine = row.machine) === null || _row$machine === void 0 ? void 0 : _row$machine.name,\n      machine_idPK: (_row$machine2 = row.machine) === null || _row$machine2 === void 0 ? void 0 : _row$machine2.machine_id,\n      goal: row.goal,\n      ln_id: (_row$lot_number$numbe = (_row$lot_number = row.lot_number) === null || _row$lot_number === void 0 ? void 0 : _row$lot_number.number) !== null && _row$lot_number$numbe !== void 0 ? _row$lot_number$numbe : undefined,\n      ln_idPK: (_row$lot_number$ln_id = (_row$lot_number2 = row.lot_number) === null || _row$lot_number2 === void 0 ? void 0 : _row$lot_number2.ln_id) !== null && _row$lot_number$ln_id !== void 0 ? _row$lot_number$ln_id : undefined,\n      status: statusList[row.status]\n    }, tmpData);\n  };\n\n  const cleanUpData = res => {\n    let tmpColumn = columnlist.operationList;\n    let tmpRow = [];\n    tmpColumn = tmpColumn.map(column => {\n      let menuData;\n      res.results.menus && res.results.menus.map(menu => {\n        if (menu.colName === column.key) {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit,\n            moddable: !menu.moddable\n          };\n        } else if (menu.colName === 'id' && column.key === 'tmpId') {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit,\n            moddable: !menu.moddable\n          };\n        }\n      });\n\n      if (menuData) {\n        return _objectSpread(_objectSpread({}, column), menuData);\n      }\n    }).filter(v => v);\n    loadAllSelectItems(tmpColumn);\n    let additionalMenus = res.results.menus ? res.results.menus.map(menu => {\n      if (menu.colName === null) {\n        return {\n          id: menu.id,\n          name: menu.title,\n          width: menu.width,\n          key: menu.title,\n          editor: TextEditor,\n          type: 'additional',\n          unit: menu.unit\n        };\n      }\n    }).filter(v => v) : [];\n    tmpRow = res.results.info_list;\n    let additionalData = [];\n    additionalMenus.map(v => {\n      if (v.type === 'additional') {\n        additionalData.push(v.key);\n      }\n    });\n    let tmpBasicRow = tmpRow.map((row, index) => {\n      let realTableData = changeRow(row);\n      let appendAdditional = {};\n      row.additional && row.additional.map(v => {\n        appendAdditional = _objectSpread(_objectSpread({}, appendAdditional), {}, {\n          [v.title]: v.value\n        });\n      });\n      const random_id = Math.random() * 1000;\n      return _objectSpread(_objectSpread(_objectSpread({}, realTableData), appendAdditional), {}, {\n        id: `rawinput_${random_id}`\n      });\n    });\n    setBasicRow([...tmpBasicRow]);\n  };\n\n  const downloadExcel = () => {\n    let tmpSelectList = [];\n    basicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id));\n    });\n    excelDownload(column, basicRow, `원자재 입고 관리`, 'rawmaterial_input', tmpSelectList);\n  };\n\n  const onClickHeaderButton = index => {\n    switch (index) {\n      case 0:\n        setExcelOpen(true);\n        break;\n\n      case 1:\n        router.push(`/mes/item/manage/operation`);\n        break;\n\n      case 2:\n        SaveBasic();\n        break;\n\n      case 3:\n        DeleteBasic();\n        break;\n    }\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 5\n    }\n  }, __jsx(MenuNavigation, {\n    pageType: 'MES',\n    subType: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    style: {\n      paddingBottom: 40\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 7\n    }\n  }, __jsx(ProfileHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 9\n    }\n  }), __jsx(PageHeader, {\n    isSearch: true,\n    searchKeyword: keyword,\n    onChangeSearchKeyword: keyword => {\n      if (keyword) {\n        router.push(`/mes/operaction/list?page=1&keyword=${keyword}&opt=${optionIndex}`);\n      } else {\n        router.push(`/mes/operaction/list?page=1&keyword=`);\n      }\n    },\n    searchOptionList: optionList,\n    optionIndex: optionIndex,\n    onChangeSearchOption: option => {\n      setOptionIndex(option);\n    },\n    isCalendar: true,\n    calendarType: 'period',\n    selectDate: selectDate //@ts-ignore\n    ,\n    setSelectDate: setSelectDate,\n    title: title,\n    buttons: ['엑셀로 받기', '항목관리', '저장하기', '삭제'],\n    buttonsOnclick: onClickHeaderButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 9\n    }\n  }), __jsx(ExcelTable, {\n    editable: true,\n    resizable: true,\n    headerList: [SelectColumn, ...column],\n    row: basicRow // setRow={setBasicRow}\n    ,\n    setRow: e => {\n      let tmp = selectList;\n      e.map(v => {\n        if (v.isChange) tmp.add(v.id);\n      });\n      setSelectList(tmp);\n      setBasicRow(e);\n    },\n    selectList: selectList //@ts-ignore\n    ,\n    setSelectList: setSelectList,\n    height: basicRow.length * 40 >= 40 * 18 + 56 ? 40 * 19 : basicRow.length * 40 + 56,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 9\n    }\n  }), __jsx(PaginationComponent, {\n    currentPage: pageInfo.page,\n    totalPage: pageInfo.total,\n    setPage: page => {\n      if (keyword) {\n        router.push(`/mes/operaction/list?page=${page}&keyword=${keyword}&opt=${option}`);\n      } else {\n        router.push(`/mes/operaction/list?page=${page}`);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 9\n    }\n  })), __jsx(ExcelDownloadModal, {\n    isOpen: excelOpen,\n    column: column,\n    basicRow: basicRow,\n    filename: `작업지시서리스트`,\n    sheetname: `작업지시서리스트`,\n    selectList: selectList,\n    tab: 'ROLE_PROD_02',\n    setIsOpen: setExcelOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport const getServerSideProps = ctx => {\n  var _ctx$query$page, _ctx$query$keyword, _ctx$query$opt;\n\n  return {\n    props: {\n      page: (_ctx$query$page = ctx.query.page) !== null && _ctx$query$page !== void 0 ? _ctx$query$page : 1,\n      keyword: (_ctx$query$keyword = ctx.query.keyword) !== null && _ctx$query$keyword !== void 0 ? _ctx$query$keyword : \"\",\n      option: (_ctx$query$opt = ctx.query.opt) !== null && _ctx$query$opt !== void 0 ? _ctx$query$opt : 0\n    }\n  };\n}; // BasicContainer.getInitialProps = async ({ query }) => {\n//   let { page, keyword, opt } = query\n//   if (typeof page === 'string')\n//     page = parseInt(page);\n//   if (typeof opt === 'string')\n//     opt = parseInt(opt);\n//   return { page, keyword, option: opt };\n// }\n\nexport default BasicContainer;","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/operaction/list.tsx"],"names":["React","useEffect","useState","ExcelTable","MenuNavigation","ProfileHeader","PageHeader","SelectColumn","RequestMethod","columnlist","Notiflix","useRouter","MAX_VALUE","TextEditor","excelDownload","PaginationComponent","ExcelDownloadModal","moment","title","optList","statusList","BasicContainer","page","keyword","option","router","excelOpen","setExcelOpen","basicRow","setBasicRow","name","id","headerStatus","setHeaderStatus","column","setColumn","operationList","selectList","setSelectList","Set","optionList","setOptionList","optionIndex","setOptionIndex","pageInfo","setPageInfo","total","selectDate","setSelectDate","from","startOf","format","to","endOf","changeHeaderStatus","value","checkStatus","SearchBasic","then","Loading","remove","LoadBasic","loadAllSelectItems","tmpColumn","map","v","length","tmpKey","key","res","path","renderItem","results","info_list","pk","ca_id","unit_id","result","Promise","all","moddable","SaveBasic","sheets","row","i","has","selectData","ln_id","ln_idPK","machine_id","machine_idPK","process_id","process_idPK","mold_id","mold","filter","status","Report","success","DeleteBasic","osd_id","circle","params","totalPages","cleanUpData","state","failure","back","isPaging","opt","changeRow","tmpData","identification","date","customer_id","product","raw_material","model","customer","customer_idPK","cm_id","cm_idPK","code","rm_id","texture","process","seq","machine","goal","lot_number","number","undefined","tmpRow","menuData","menus","menu","colName","width","tab","unit","additionalMenus","editor","type","additionalData","push","tmpBasicRow","index","realTableData","appendAdditional","additional","random_id","Math","random","downloadExcel","tmpSelectList","onClickHeaderButton","display","paddingBottom","e","tmp","isChange","add","getServerSideProps","ctx","props","query"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport ExcelTable from '../../../component/Excel/ExcelTable'\nimport MenuNavigation from '../../../component/MenuNav/MenuNavigation'\nimport ProfileHeader from '../../../component/Profile/ProfileHeader'\nimport PageHeader from '../../../component/Header/Header'\n// @ts-ignore\nimport {SelectColumn} from 'react-data-grid'\nimport {IExcelHeaderType, IItemMenuType} from '../../../common/@types/type'\nimport {RequestMethod} from '../../../common/RequestFunctions'\nimport {columnlist} from \"../../../common/columnInit\";\nimport Notiflix from \"notiflix\";\nimport {useRouter} from 'next/router'\nimport {MAX_VALUE} from '../../../common/configset'\nimport DropDownEditor from '../../../component/Dropdown/ExcelBasicDropdown'\nimport TextEditor from '../../../component/InputBox/ExcelBasicInputBox'\nimport {excelDownload} from '../../../common/excelDownloadFunction'\nimport {loadAll} from 'react-cookies'\nimport PaginationComponent from '../../../component/Pagination/PaginationComponent'\nimport {NextPageContext} from 'next'\nimport ExcelDownloadModal from '../../../component/Modal/ExcelDownloadMoadal'\nimport moment from 'moment'\n\nconst title = '작업지시서 리스트'\nconst optList = ['고객사명', '모델명', 'CODE', '품명', '공정', '기계', 'Lot번호']\n\ninterface IProps {\n  children?: any\n  page?: number\n  keyword?: string\n  option?: number\n}\n\nconst statusList = ['시작 전', '작업중', '일시정지', '작업종료', '미완료']\n\nconst BasicContainer = ({page, keyword, option}: IProps) => {\n  const router = useRouter()\n\n  const [excelOpen, setExcelOpen] = useState<boolean>(false)\n\n  const [basicRow, setBasicRow] = useState<Array<any>>([{\n    name: \"\", id: \"\"\n  }])\n\n  const [headerStatus, setHeaderStatus] = useState<number | string>(\"\");\n\n  const [column, setColumn] = useState<Array<IExcelHeaderType>>(columnlist.operationList)\n  const [selectList, setSelectList] = useState<Set<number>>(new Set())\n  const [optionList, setOptionList] = useState<string[]>(optList)\n  const [optionIndex, setOptionIndex] = useState<number>(0)\n\n  const [pageInfo, setPageInfo] = useState<{page: number, total: number}>({\n    page: 1,\n    total: 1\n  })\n\n  const [selectDate, setSelectDate] = useState<{from:string, to:string}>({\n    from: moment().startOf('isoWeek').format('YYYY-MM-DD'),\n    to: moment().endOf('isoWeek').format('YYYY-MM-DD')\n  });\n\n  const changeHeaderStatus = (value:number) => {\n    setHeaderStatus(value);\n  }\n\n  const checkStatus = (value:number) => {\n      if(value === -1){\n        return \"/1,2,3,4/\"\n      }else{\n        return value\n      }\n  }\n\n  useEffect(() => {\n    setOptionIndex(option)\n    if(keyword){\n      SearchBasic(keyword, option, page).then(() => {\n        Notiflix.Loading.remove()\n      })\n    }else{\n      LoadBasic(page).then(() => {\n        Notiflix.Loading.remove()\n      })\n    }\n  }, [page, keyword, option, selectDate, headerStatus])\n\n  const loadAllSelectItems = async (column: IExcelHeaderType[]) => {\n    let tmpColumn = column.map(async (v: any) => {\n\n      if(v.selectList && v.selectList.length === 0){\n        let tmpKey = v.key\n\n        if(tmpKey === 'customer_id'){\n          tmpKey = 'customer'\n        } else if(tmpKey === 'cm_id'){\n          tmpKey = 'model'\n        }\n\n\n        const res = await RequestMethod('get', `${tmpKey}List`,{\n          path: {\n            page: 1,\n            renderItem: MAX_VALUE,\n          }\n        })\n\n        return {\n          ...v,\n          selectList: [...res.results.info_list.map((value: any) => {\n            return {\n              ...value,\n              pk: value.ca_id\n            }\n          })]\n        }\n      }else{\n        if(v.selectList){\n          return {\n            ...v,\n            pk: v.unit_id\n          }\n        }else if(v.key === \"status\"){\n          return {\n            ...v,\n            result: changeHeaderStatus\n          }\n        } else{\n          return v\n        }\n      }\n    })\n\n    Promise.all(tmpColumn).then(res => {\n      setColumn([...res.map(v=> {\n        return {\n          ...v,\n          name: v.moddable ? v.name+'(필수)' : v.name\n        }\n      })])\n    })\n  }\n\n  const SaveBasic = async () => {\n    let res = await RequestMethod('put', `operationModify`,\n      {\n        sheets: basicRow.map((row, i) => {\n          if(selectList.has(row.id)){\n\n            let selectData: any = {}\n\n            return {\n              ...row,\n              ...selectData,\n              ln_id: row.ln_idPK,\n              machine_id: row.machine_idPK,\n              process_id: row.process_idPK,\n              mold_id: row.mold?.mold_id,\n            }\n\n          }\n        }).filter((v) => v)\n      })\n\n    if(res){\n      if(res.status === 200){\n        Notiflix.Report.success('저장되었습니다.','','확인');\n        if(keyword){\n          SearchBasic(keyword, option, page).then(() => {\n            Notiflix.Loading.remove()\n          })\n        }else{\n          LoadBasic(page).then(() => {\n            Notiflix.Loading.remove()\n          })\n        }\n      }\n    }\n  }\n\n  const DeleteBasic = async () => {\n    const res = await RequestMethod('delete', `operationDelete`,\n      {\n        sheets: basicRow.map((row, i) => {\n          if(selectList.has(row.id)){\n            return row.osd_id\n          }\n        }).filter((v) => v)\n      })\n\n    if(res) {\n      if(res.status === 200){\n        if(keyword){\n          SearchBasic(keyword, option, page).then(() => {\n            Notiflix.Loading.remove()\n          })\n        }else{\n          LoadBasic(page).then(() => {\n            Notiflix.Loading.remove()\n          })\n        }\n        \n      }\n    }\n  }\n\n  const LoadBasic = async (page?: number) => {\n    Notiflix.Loading.circle()\n    const res = await RequestMethod('get', `operactionList`,{\n      path: {\n        page: (page || page !== 0) ? page : 1,\n        renderItem: 18,\n        status:headerStatus\n      },\n      params: {\n        from: selectDate.from,\n        to: selectDate.to\n      }\n    })\n\n    if(res && res.status === 200){\n      if(res.results.totalPages !== 0 && res.results.totalPages < page){\n        LoadBasic(page - 1).then(() => {\n          Notiflix.Loading.remove()\n        })\n      }else{\n        setPageInfo({\n          ...pageInfo,\n          page: res.results.page,\n          total: res.results.totalPages,\n        })\n        cleanUpData(res)\n      }\n    }else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back()\n      })\n    }\n  }\n\n  const SearchBasic = async (keyword: any, option: number, isPaging?: number) => {\n    Notiflix.Loading.circle()\n    if(!isPaging){\n      setOptionIndex(option)\n    }\n\n    const res = await RequestMethod('get', `operationSearch`,{\n      path: {\n        page: isPaging ?? 1,\n        renderItem: 18,\n        status:headerStatus\n      },\n      params: {\n        keyword: keyword ?? '',\n        opt: option ?? 0,\n        from: selectDate.from,\n        to: selectDate.to\n      }\n    })\n\n    if(res && res.status === 200) {\n      setPageInfo({\n        ...pageInfo,\n        page: res.results.page,\n        total: res.results.totalPages\n      })\n      cleanUpData(res)\n    }\n  }\n\n  const changeRow = (row: any) => {\n    let tmpData = {}\n\n    return {\n      ...row,\n      identification: row.identification,\n      date: row.date,\n      customer_id: row.product?.raw_material.model.customer.name,\n      customer_idPK: row.product?.raw_material.model.customer.customer_id,\n      cm_id: row.product?.raw_material.model.model,\n      cm_idPK: row.product?.raw_material.model.cm_id,\n      code: row.product?.raw_material.code,\n      rm_id: row.product?.raw_material.rm_id,\n      name: row.product?.raw_material.name,\n      texture: row.product?.raw_material.texture,\n      process_id: row.process?.name,\n      process_idPK: row.process?.process_id,\n      seq: row.seq,\n      mold_id: row.mold?.name,\n      machine_id: row.machine?.name,\n      machine_idPK: row.machine?.machine_id,\n      goal: row.goal,\n      ln_id: row.lot_number?.number ?? undefined,\n      ln_idPK: row.lot_number?.ln_id ?? undefined,\n      status: statusList[row.status],\n      ...tmpData\n    }\n  }\n\n  const cleanUpData = (res: any) => {\n    let tmpColumn = columnlist.operationList\n    let tmpRow = []\n    tmpColumn = tmpColumn.map((column: any) => {\n      let menuData: object | undefined;\n      res.results.menus && res.results.menus.map((menu: any) => {\n        if(menu.colName === column.key){\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab:menu.tab,\n            unit:menu.unit,\n            moddable: !menu.moddable\n          }\n        } else if(menu.colName === 'id' && column.key === 'tmpId'){\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab:menu.tab,\n            unit:menu.unit,\n            moddable: !menu.moddable\n          }\n        }\n      })\n\n      if(menuData){\n        return {\n          ...column,\n          ...menuData\n        }\n      }\n    }).filter((v:any) => v)\n\n    loadAllSelectItems(tmpColumn)\n\n    let additionalMenus = res.results.menus ? res.results.menus.map((menu:any) => {\n      if(menu.colName === null){\n        return {\n          id: menu.id,\n          name: menu.title,\n          width: menu.width,\n          key: menu.title,\n          editor: TextEditor,\n          type: 'additional',\n          unit: menu.unit\n        }\n      }\n    }).filter((v: any) => v) : []\n\n    tmpRow = res.results.info_list\n\n    let additionalData: any[] = []\n\n    additionalMenus.map((v: any) => {\n      if(v.type === 'additional'){\n        additionalData.push(v.key)\n      }\n    })\n\n    let tmpBasicRow = tmpRow.map((row: any, index: number) => {\n      let realTableData: any = changeRow(row)\n      let appendAdditional: any = {}\n\n      row.additional && row.additional.map((v: any) => {\n        appendAdditional = {\n          ...appendAdditional,\n          [v.title]: v.value\n        }\n      })\n\n      const random_id = Math.random()*1000\n\n      return {\n        // ...row,\n        ...realTableData,\n        ...appendAdditional,\n        id: `rawinput_${random_id}`,\n      }\n    })\n\n    setBasicRow([...tmpBasicRow])\n  }\n\n  const downloadExcel = () => {\n    let tmpSelectList: boolean[] = []\n    basicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id))\n    })\n    excelDownload(column, basicRow, `원자재 입고 관리`, 'rawmaterial_input', tmpSelectList)\n  }\n\n  const onClickHeaderButton = (index: number) => {\n    switch(index){\n      case 0:\n        setExcelOpen(true)\n        break;\n      case 1:\n        router.push(`/mes/item/manage/operation`)\n        break;\n      case 2:\n        SaveBasic()\n        break;\n      case 3:\n        DeleteBasic()\n        break;\n    }\n  }\n\n  return (\n    <div style={{display: 'flex', }}>\n      <MenuNavigation pageType={'MES'} subType={0}/>\n      <div style={{paddingBottom: 40}}>\n        <ProfileHeader/>\n        <PageHeader\n          isSearch\n          searchKeyword={keyword}\n          onChangeSearchKeyword={(keyword) => {\n            if(keyword){\n              router.push(`/mes/operaction/list?page=1&keyword=${keyword}&opt=${optionIndex}`)\n            }else{\n              router.push(`/mes/operaction/list?page=1&keyword=`)\n            }\n          }}\n          searchOptionList={optionList}\n          optionIndex={optionIndex}\n          onChangeSearchOption={(option) => {\n            setOptionIndex(option)\n          }}\n          isCalendar\n          calendarType={'period'}\n          selectDate={selectDate}\n          //@ts-ignore\n          setSelectDate={setSelectDate}\n          title={title}\n          buttons={['엑셀로 받기', '항목관리', '저장하기', '삭제']}\n          buttonsOnclick={onClickHeaderButton}\n\n        />\n        <ExcelTable\n          editable\n          resizable\n          headerList={[\n            SelectColumn,\n            ...column\n          ]}\n          row={basicRow}\n          // setRow={setBasicRow}\n          setRow={(e) => {\n            let tmp: Set<any> = selectList\n            e.map(v => {\n              if(v.isChange) tmp.add(v.id)\n            })\n            setSelectList(tmp)\n            setBasicRow(e)\n          }}\n          selectList={selectList}\n          //@ts-ignore\n          setSelectList={setSelectList}\n          height={basicRow.length * 40 >= 40*18+56 ? 40*19 : basicRow.length * 40 + 56}\n        />\n        <PaginationComponent\n          currentPage={pageInfo.page}\n          totalPage={pageInfo.total}\n          setPage={(page) => {\n            if(keyword){\n              router.push(`/mes/operaction/list?page=${page}&keyword=${keyword}&opt=${option}`)\n            }else{\n              router.push(`/mes/operaction/list?page=${page}`)\n            }\n          }}\n        />\n      </div>\n      <ExcelDownloadModal\n        isOpen={excelOpen}\n        column={column}\n        basicRow={basicRow}\n        filename={`작업지시서리스트`}\n        sheetname={`작업지시서리스트`}\n        selectList={selectList}\n        tab={'ROLE_PROD_02'}\n        setIsOpen={setExcelOpen}\n      />\n    </div>\n  );\n}\n\nexport const getServerSideProps = (ctx: NextPageContext) => {\n  return {\n    props: {\n      page: ctx.query.page ?? 1,\n      keyword: ctx.query.keyword ?? \"\",\n      option: ctx.query.opt ?? 0,\n    }\n  }\n}\n\n// BasicContainer.getInitialProps = async ({ query }) => {\n//   let { page, keyword, opt } = query\n//   if (typeof page === 'string')\n//     page = parseInt(page);\n//   if (typeof opt === 'string')\n//     opt = parseInt(opt);\n//   return { page, keyword, option: opt };\n// }\n\nexport default BasicContainer;\n"]},"metadata":{},"sourceType":"module"}