{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/user/Desktop/sizl/mono_pop/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/shared/src/components/Excel/ExcelTable.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  ::-webkit-scrollbar{\\n    display:block;\\n    width:\", \";\\n    height:8px;\\n  }\\n\\n  ::-webkit-scrollbar-thumb{\\n    background:#484848;\\n  }\\n\\n  ::-webkit-scrollbar-track{\\n    background:none;\\n  }\\n\\n  ::-webkit-scrollbar-corner{\\n    display:none;\\n  }\\n  \\n  \", \"\\n    \\n  \\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useEffect, useState } from 'react';\nimport styled from \"styled-components\"; // @ts-ignore\n\nimport DataGrid from 'react-data-grid';\nimport { SearchModalStyle } from '../../styles/styledComponents';\nimport { RequestMethod } from \"../../common/RequestFunctions\";\n\nvar ExcelTable = function ExcelTable(_ref) {\n  _s();\n\n  var headerList = _ref.headerList,\n      setHeaderList = _ref.setHeaderList,\n      row = _ref.row,\n      width = _ref.width,\n      maxWidth = _ref.maxWidth,\n      rowHeight = _ref.rowHeight,\n      height = _ref.height,\n      maxHeight = _ref.maxHeight,\n      editable = _ref.editable,\n      resizable = _ref.resizable,\n      selectable = _ref.selectable,\n      setRow = _ref.setRow,\n      setSelectRow = _ref.setSelectRow,\n      selectList = _ref.selectList,\n      setSelectList = _ref.setSelectList,\n      type = _ref.type,\n      disableVirtualization = _ref.disableVirtualization,\n      selectPage = _ref.selectPage,\n      setSelectPage = _ref.setSelectPage,\n      overflow = _ref.overflow,\n      headerAlign = _ref.headerAlign;\n\n  var _useState = useState(selectList !== null && selectList !== void 0 ? selectList : new Set()),\n      selectedRows = _useState[0],\n      setSelectedRows = _useState[1]; // const [selectPage, setSelectPage] = useState<number>(1);\n\n\n  var onePageHeight = 600;\n\n  var rowKeyGetter = function rowKeyGetter(row) {\n    return row.id;\n  };\n\n  var scrollState = function scrollState() {\n    if (overflow) {\n      return \"0px\";\n    } else {\n      return \"8px\";\n    }\n  };\n\n  var tempData = [];\n  useEffect(function () {\n    setSelectList && setSelectList(selectedRows);\n  }, [selectedRows]);\n  useEffect(function () {\n    var allWidth = 0;\n    headerList.map(function (v) {\n      allWidth += v.width;\n    });\n  }, [headerList]);\n\n  var showDataGrid = function showDataGrid() {\n    return __jsx(DataGridTable //@ts-ignore\n    , {\n      rowClass: function rowClass(row) {\n        return row.border ? 'selectRow' : undefined;\n      },\n      headerRowHeight: 40 //@ts-ignore\n      ,\n      rowKeyGetter: rowKeyGetter //@ts-ignore\n      ,\n      className: 'cell',\n      columns: headerList,\n      rows: row,\n      onColumnResize: function onColumnResize(v, i) {\n        tempData.map(function (time, i) {\n          clearTimeout(time);\n        }); // headerList[v-1].width = i;\n        //\n        // setHeaderList && setHeaderList(headerList)\n\n        tempData.push(setTimeout(function () {\n          var tmpHeader = headerList[v].name.indexOf('(필수)') === -1 ? headerList[v].name : headerList[v - 1].name.split('(필수)')[0];\n          RequestMethod(\"post\", \"itemSave\", {\n            tab: headerList[v].tab,\n            menus: [{\n              mi_id: headerList[v].id,\n              width: i <= 80 ? 80 : i,\n              title: tmpHeader,\n              hide: false\n            }]\n          }).then(function (res) {\n            headerList[v].width = i <= 80 ? 80 : i;\n            setHeaderList && setHeaderList(headerList);\n          });\n        }, 800));\n      },\n      rowHeight: rowHeight !== null && rowHeight !== void 0 ? rowHeight : 40,\n      defaultColumnOptions: {\n        resizable: resizable,\n        editable: editable\n      },\n      onRowsChange: setRow,\n      emptyRowsView: function emptyRowsView() {\n        return __jsx(\"div\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 28\n          }\n        }, \"empty\");\n      },\n      onSelectedRows: function onSelectedRows(e) {},\n      onSelectedRowsChange: setSelectedRows,\n      selectedRows: selectedRows,\n      onRowChange: function onRowChange(e) {\n        setSelectedRows(e);\n      },\n      onRowClick: function onRowClick(i, r) {\n        setSelectRow && setSelectRow(i);\n      },\n      style: {\n        border: \"none\",\n        overflow: \"auto\",\n        width: width !== null && width !== void 0 ? width : 1576,\n        maxWidth: maxWidth,\n        height: height !== null && height !== void 0 ? height : 760,\n        maxHeight: maxHeight,\n        backgroundColor: '#00000000',\n        textAlign: 'center'\n      },\n      theme: scrollState,\n      state: type,\n      enableVirtualization: !disableVirtualization,\n      onScroll: function onScroll(e) {\n        if (e.target.scrollTop > onePageHeight * (selectPage - 1)) {\n          setSelectPage(selectPage + 1);\n        }\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 12\n      }\n    });\n  };\n\n  if (type === 'searchModal') {\n    return __jsx(SearchModalStyle // @ts-ignore\n    , {\n      headerAlign: headerAlign,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 12\n      }\n    }, showDataGrid());\n  } else {\n    return showDataGrid(); // <ExcelDataStyle>\n    // </ExcelDataStyle>\n  }\n};\n\n_s(ExcelTable, \"4Z0bMGFYnU10RGTgw/3G2Bl8SYU=\");\n\n_c = ExcelTable;\nvar DataGridTable = styled(DataGrid)(_templateObject(), function (props) {\n  return props.theme;\n}, function (props) {\n  return props.state === \"searchModal\" ? \"\" : \"\\n    .rdg{\\n        border:none;\\n        \\n    }\\n    .rdg-cell{\\n        border:none;\\n        margin-bottom:1px;\\n        border-right: 1px solid #151E2D;\\n        \\n    }\\n    \\n    .rdg-header-row{\\n        background:#111319;\\n        color:white;\\n        // grid-gap:1px;\\n        border:none;\\n        // grid-gap:1px;\\n    }\\n    \\n    .rdg-row {\\n        border:none;\\n        background:none;\\n        background-color:none;\\n        color:white;\\n        // grid-gap:1px;\\n        &:hover{\\n            background:none;\\n            background-color:none;\\n        }\\n        \\n    }\\n    .rdg-row > .rdg-cell{\\n        background:#353B48;\\n        // &:hover{\\n        //     background:red;\\n        // }\\n    }\\n    \\n    .rdg-row[aria-selected=true]{\\n        background:none;\\n        &:hover{\\n            background:none;\\n            background-color:none;\\n        }\\n    }\\n    \\n    .editDropdown > option {\\n      background:#484848;\\n    }\\n   \\n    .rdg-row[aria-selected=true]{\\n        background:none;\\n    }\\n\\n    .rdg-checkbox-input:checked + div{\\n        width:20px;\\n        height:20px;\\n        box-shadow:none;\\n        border:none;\\n        background: url(\".concat(require('../../../public/images/check_box_activated.png'), \") ;\\n        background-size: 20px 20px;\\n    }\\n    \\n    .c1wupbe700-canary49 {\\n      padding: 0;\\n    }\\n    \\n  div .cell .rdg-row {\\n    background-color: #353B48;\\n  }\\n  \\n  .editCell {\\n    background-color: #00000000;\\n    color: white;\\n    width: 100%;\\n    height: 100%;\\n  }\\n  \\n  .editDropdown {\\n    background-color: #00000000;\\n    color: white;\\n    width: 100%;\\n    height: 100%;\\n  }\\n  .editDropdown > option {\\n    background:#484848;\\n  }\\n  \");\n});\n_c2 = DataGridTable;\nexport { ExcelTable };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ExcelTable\");\n$RefreshReg$(_c2, \"DataGridTable\");","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/shared/src/components/Excel/ExcelTable.tsx"],"names":["useEffect","useState","styled","DataGrid","SearchModalStyle","RequestMethod","ExcelTable","headerList","setHeaderList","row","width","maxWidth","rowHeight","height","maxHeight","editable","resizable","selectable","setRow","setSelectRow","selectList","setSelectList","type","disableVirtualization","selectPage","setSelectPage","overflow","headerAlign","Set","selectedRows","setSelectedRows","onePageHeight","rowKeyGetter","id","scrollState","tempData","allWidth","map","v","showDataGrid","border","undefined","i","time","clearTimeout","push","setTimeout","tmpHeader","name","indexOf","split","tab","menus","mi_id","title","hide","then","res","e","r","backgroundColor","textAlign","target","scrollTop","DataGridTable","props","theme","state","require"],"mappings":"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","sourcesContent":["import {useEffect, useState} from 'react'\nimport styled from \"styled-components\";\n// @ts-ignore\nimport DataGrid, {TextEditor} from 'react-data-grid'\nimport {IExcelHeaderType} from '../../@types/type'\nimport {ExcelDataStyle, SearchModalStyle} from '../../styles/styledComponents'\nimport {RequestMethod} from \"../../common/RequestFunctions\";\nimport {NextComponentType, NextPage} from 'next'\n\ninterface IProps {\n  headerList: Array<IExcelHeaderType>\n  setHeaderList?:(value:Array<IExcelHeaderType>) => void\n  row: Array<any>\n  width?: number\n  maxWidth?:number\n  rowHeight?: number\n  height?:number\n  maxHeight?:number\n  editable?: boolean\n  resizable?: boolean\n  selectable?: boolean\n  setRow: (row: Array<any>) => void\n  setSelectRow?: (index: number) => void\n  setSelectList?: (selectedRows: ReadonlySet<number>) => void\n  selectList?: ReadonlySet<number>\n  type?: 'searchModal'\n  disableVirtualization?: boolean\n  selectPage?:number\n  setSelectPage?:(value:number)=>void\n  overflow?:\"hidden\"\n  headerAlign?: string\n}\n\nconst ExcelTable = ({headerList, setHeaderList, row, width, maxWidth, rowHeight, height, maxHeight, editable, resizable, selectable, setRow, setSelectRow, selectList, setSelectList, type, disableVirtualization, selectPage, setSelectPage, overflow, headerAlign}: IProps) => {\n  const [selectedRows, setSelectedRows] = useState<ReadonlySet<number>>(selectList ?? new Set());\n  // const [selectPage, setSelectPage] = useState<number>(1);\n  const onePageHeight = 600;\n  const rowKeyGetter = (row: any) => {\n    return row.id;\n  }\n\n  const scrollState = () => {\n    if(overflow){\n      return \"0px\"\n    }else{\n      return \"8px\"\n    }\n\n  }\n\n  let tempData:any[] = [];\n\n  useEffect(() => {\n    setSelectList && setSelectList(selectedRows)\n  }, [selectedRows])\n\n  useEffect(() => {\n    let allWidth = 0\n    headerList.map((v: any) => {\n      allWidth += v.width\n    })\n  }, [headerList])\n\n\n\n  const showDataGrid = () => {\n\n    return <DataGridTable\n      //@ts-ignore\n      rowClass={(row) => row.border ? 'selectRow' : undefined}\n      headerRowHeight={40}\n      //@ts-ignore\n      rowKeyGetter={rowKeyGetter}\n      //@ts-ignore\n      className={'cell'}\n      columns={headerList}\n      rows={row}\n      onColumnResize={(v, i) => {\n        tempData.map((time,i)=>{\n            clearTimeout(time)\n        })\n        // headerList[v-1].width = i;\n        //\n        // setHeaderList && setHeaderList(headerList)\n        tempData.push(\n            setTimeout(()=>{\n              let tmpHeader = headerList[v].name.indexOf('(필수)') === -1 ? headerList[v].name : headerList[v-1].name.split('(필수)')[0]\n              RequestMethod(\"post\", \"itemSave\", {tab:headerList[v].tab, menus:[{mi_id:headerList[v].id, width:i <= 80 ? 80 : i,title:tmpHeader, hide:false}]} )\n                  .then((res)=> {\n                    headerList[v].width = i <= 80 ? 80 : i;\n\n                    setHeaderList && setHeaderList(headerList)\n                  })\n            },800)\n        );\n      }}\n      rowHeight={rowHeight ?? 40}\n      defaultColumnOptions={{\n        resizable: resizable,\n        editable: editable,\n      }}\n      onRowsChange={setRow}\n      emptyRowsView={() => <div>empty</div>}\n      onSelectedRows={(e:any)=>{\n      }}\n      onSelectedRowsChange={setSelectedRows}\n      selectedRows={selectedRows}\n      onRowChange={(e:any)=>{\n        setSelectedRows(e)\n      }}\n      onRowClick={(i, r) => {\n        setSelectRow && setSelectRow(i)\n      }}\n      style={{\n        border:\"none\",\n        overflow:\"auto\",\n        width: width ?? 1576,\n        maxWidth: maxWidth,\n        height: height ?? 760,\n        maxHeight:maxHeight,\n        backgroundColor: '#00000000',\n        textAlign: 'center',\n      }}\n      theme={scrollState}\n      state={type}\n      enableVirtualization={!disableVirtualization}\n      onScroll={(e:any)=>{\n        if(e.target.scrollTop > onePageHeight * (selectPage-1)){\n          setSelectPage(selectPage+1);\n        }\n      }}\n\n    />\n  }\n\n  if(type === 'searchModal'){\n    return <SearchModalStyle\n      // @ts-ignore\n      headerAlign={headerAlign}\n    >\n      {showDataGrid()}\n    </SearchModalStyle>\n  } else {\n    return showDataGrid()\n    // <ExcelDataStyle>\n    // </ExcelDataStyle>\n  }\n\n}\n\nconst DataGridTable = styled(DataGrid)`\n  ::-webkit-scrollbar{\n    display:block;\n    width:${(props:any)=> props.theme};\n    height:8px;\n  }\n\n  ::-webkit-scrollbar-thumb{\n    background:#484848;\n  }\n\n  ::-webkit-scrollbar-track{\n    background:none;\n  }\n\n  ::-webkit-scrollbar-corner{\n    display:none;\n  }\n  \n  ${(props:any) => props.state === \"searchModal\" ? \"\" : \n    `\n    .rdg{\n        border:none;\n        \n    }\n    .rdg-cell{\n        border:none;\n        margin-bottom:1px;\n        border-right: 1px solid #151E2D;\n        \n    }\n    \n    .rdg-header-row{\n        background:#111319;\n        color:white;\n        // grid-gap:1px;\n        border:none;\n        // grid-gap:1px;\n    }\n    \n    .rdg-row {\n        border:none;\n        background:none;\n        background-color:none;\n        color:white;\n        // grid-gap:1px;\n        &:hover{\n            background:none;\n            background-color:none;\n        }\n        \n    }\n    .rdg-row > .rdg-cell{\n        background:#353B48;\n        // &:hover{\n        //     background:red;\n        // }\n    }\n    \n    .rdg-row[aria-selected=true]{\n        background:none;\n        &:hover{\n            background:none;\n            background-color:none;\n        }\n    }\n    \n    .editDropdown > option {\n      background:#484848;\n    }\n   \n    .rdg-row[aria-selected=true]{\n        background:none;\n    }\n\n    .rdg-checkbox-input:checked + div{\n        width:20px;\n        height:20px;\n        box-shadow:none;\n        border:none;\n        background: url(${require('../../../public/images/check_box_activated.png')}) ;\n        background-size: 20px 20px;\n    }\n    \n    .c1wupbe700-canary49 {\n      padding: 0;\n    }\n    \n  div .cell .rdg-row {\n    background-color: #353B48;\n  }\n  \n  .editCell {\n    background-color: #00000000;\n    color: white;\n    width: 100%;\n    height: 100%;\n  }\n  \n  .editDropdown {\n    background-color: #00000000;\n    color: white;\n    width: 100%;\n    height: 100%;\n  }\n  .editDropdown > option {\n    background:#484848;\n  }\n  `\n}\n    \n  \n`;\n\nexport {ExcelTable};\n"]},"metadata":{},"sourceType":"module"}