{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/operaction/register.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport ExcelTable from '../../../component/Excel/ExcelTable';\nimport MenuNavigation from '../../../component/MenuNav/MenuNavigation';\nimport ProfileHeader from '../../../component/Profile/ProfileHeader';\nimport PageHeader from '../../../component/Header/Header'; // @ts-ignore\n\nimport { SelectColumn } from 'react-data-grid';\nimport { RequestMethod } from '../../../common/RequestFunctions';\nimport { columnlist } from \"../../../common/columnInit\";\nimport Notiflix from \"notiflix\";\nimport { useRouter } from 'next/router';\nimport { MAX_VALUE } from '../../../common/configset';\nimport TextEditor from '../../../component/InputBox/ExcelBasicInputBox';\nimport { excelDownload } from '../../../common/excelDownloadFunction';\nimport moment from 'moment';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { delete_all_machine_list, delete_machine_list, insert_machine_list, insert_machine_list_index } from \"../../../reducer/machineSelect\";\nconst title = '작업지시서 등록';\nconst optList = ['고객사명', '모델명', 'CODE', '품명', '공정', '기계', 'Lot번호'];\n\nconst BasicContainer = ({\n  page,\n  keyword,\n  option\n}) => {\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const selector = useSelector(state => state.MachineSelectReducer);\n  const {\n    0: basicRow,\n    1: setBasicRow\n  } = useState([{\n    name: \"\",\n    id: \"\",\n    index: 1,\n    date: moment().format('YYYY-MM-DD')\n  }]);\n  const {\n    0: column,\n    1: setColumn\n  } = useState(columnlist.operationRegister);\n  const {\n    0: selectList,\n    1: setSelectList\n  } = useState(new Set());\n  const {\n    0: optionList,\n    1: setOptionList\n  } = useState(optList);\n  const {\n    0: optionIndex,\n    1: setOptionIndex\n  } = useState(0);\n  const {\n    0: isLoad,\n    1: setIsLoad\n  } = useState(0);\n  const {\n    0: isGoal,\n    1: setIsGoal\n  } = useState(0);\n  const {\n    0: pageInfo,\n    1: setPageInfo\n  } = useState({\n    page: 1,\n    total: 1\n  });\n  useEffect(() => {\n    // setOptionIndex(option)\n    // if(keyword){\n    //   SearchBasic(keyword, option, page)\n    // }else{\n    //   LoadBasic(page).then(() => {})\n    // }\n    // loadAllSelectItems(column).then((column) => {})\n    LoadMenu();\n  }, [page, keyword, option]);\n  useEffect(() => {\n    console.log(basicRow[0].pp_id);\n\n    if (basicRow[0].pp_id && basicRow[0].pp_id !== isLoad) {\n      ProductProcessSearch(basicRow[0].pp_id);\n    }\n  }, [basicRow]);\n  useEffect(() => {\n    dispatch(delete_all_machine_list());\n  }, []);\n\n  const ProductProcessSearch = async pp_id => {\n    const res = await RequestMethod('get', `productprocessList`, {\n      path: {\n        pp_id\n      }\n    });\n    const recentRes = await RequestMethod('get', `operationRecent`, {\n      path: {\n        pp_id\n      }\n    });\n\n    if (res && res.status === 200 && recentRes && recentRes.status === 200) {\n      Notiflix.Report.info(\"\", recentRes.message, \"확인\");\n      let tmpRow = [basicRow[0]];\n      res.results.processes.map((v, i) => {\n        const random_id = Math.random() * 1000;\n        recentRes.results.processes.map((value, i) => {\n          if (value.seq === v.seq) {\n            v = _objectSpread(_objectSpread({}, value), v);\n          }\n        });\n\n        if (i === 0) {\n          tmpRow[0] = _objectSpread(_objectSpread(_objectSpread({}, tmpRow[0]), v), {}, {\n            process_id: v.process.name,\n            process_idPK: v.process.process_id,\n            mold: v.mold,\n            id: `operation_${random_id}`,\n            machine_id: v.machine ? v.machine.name : null,\n            machine_idPK: v.machine ? v.machine.machine_id : null\n          });\n        } else {\n          tmpRow.push(_objectSpread(_objectSpread({}, v), {}, {\n            process_id: v.process.name,\n            process_idPK: v.process.process_id,\n            mold: v.mold_name,\n            id: `operation_${random_id}`,\n            machine_id: v.machine ? v.machine.name : null,\n            machine_idPK: v.machine ? v.machine.machine_id : null\n          }));\n        }\n      });\n      setIsLoad(pp_id);\n      setBasicRow([...tmpRow]);\n      dispatch(insert_machine_list({\n        process_length: tmpRow.length,\n        machineList: tmpRow\n      }));\n    }\n  };\n\n  const loadAllSelectItems = async column => {\n    let tmpColumn = column.map(async v => {\n      if (v.selectList) {\n        return _objectSpread(_objectSpread({}, v), {}, {\n          pk: v.unit_id\n        });\n      } else {\n        return v;\n      }\n    });\n    Promise.all(tmpColumn).then(res => {\n      setColumn([...res.map(v => {\n        return _objectSpread({}, v);\n      })]);\n    });\n  };\n\n  const SaveBasic = async () => {\n    let processesSetting = [];\n    selector.machineList.map((v, i) => {\n      processesSetting.push(_objectSpread(_objectSpread({}, v), {}, {\n        process_id: v.process_idPK,\n        machine_id: typeof v.machine_id === \"string\" ? v.machine_idPK : v.machine_id\n      }));\n    });\n    let res = await RequestMethod('post', `operationSave`, {\n      operation: {\n        date: selector.machineList[0].date,\n        customer_id: selector.machineList[0].customer_idPK,\n        cm_id: selector.machineList[0].cm_idPK,\n        product_id: selector.machineList[0].product_id,\n        processes: selector.machineList.map((row, i) => {\n          if (selectList.has(row.id)) {\n            let additional = [];\n            column.map(v => {\n              if (v.type === 'additional') {\n                additional.push(v);\n              }\n            });\n            let selectData = {};\n            return _objectSpread(_objectSpread(_objectSpread({}, row), selectData), {}, {\n              id: row.tmpId,\n              // seq: i+1,\n              authority: row.authorityPK,\n              last: basicRow.length - 1 === i ? true : false,\n              machine_id: row.machine_idPK,\n              process_id: row.process_idPK,\n              ln_id: row.ln_idPK,\n              additional: [...additional.map(v => {\n                if (row[v.name]) {\n                  return {\n                    id: v.id,\n                    title: v.name,\n                    value: row[v.name],\n                    unit: v.unit\n                  };\n                }\n              }).filter(v => v)]\n            });\n          }\n        }).filter(v => v)\n      }\n    });\n\n    if (res) {\n      if (res.status === 200) {\n        Notiflix.Report.success('저장되었습니다.', '', '확인');\n      }\n    }\n  };\n\n  const DeleteBasic = async () => {\n    let tmpRow = [];\n    tmpRow = basicRow.map(v => {\n      if (selectList.has(v.id)) {\n        return;\n      }\n\n      return v;\n    }).filter(v => v).map((v, index) => {\n      return _objectSpread(_objectSpread({}, v), {}, {\n        seq: index + 1\n      });\n    });\n\n    if (tmpRow.length > 0 && selectList.size > 0) {\n      // selector.machineList.splice(selectList, 1);\n      dispatch(delete_machine_list());\n      Notiflix.Report.success(\"삭제되었습니다.\", \"\", \"확인\");\n      setBasicRow([...tmpRow]);\n    } else {\n      Notiflix.Report.warning(\"1개 이상의 작업이 필요합니다!\", \"\", \"확인\");\n    }\n  };\n\n  const loadLotInfo = async () => {\n    Notiflix.Loading.circle();\n    const res = await RequestMethod('get', `rawinSearch`, {\n      path: {\n        page: page,\n        renderItem: MAX_VALUE,\n        customer_id: basicRow[0].customer_idPK,\n        cm_id: basicRow[0].cm_idPK,\n        rm_id: basicRow[0].rm_id\n      },\n      params: {\n        keyword: keyword !== null && keyword !== void 0 ? keyword : '',\n        opt: option !== null && option !== void 0 ? option : 0,\n        nz: true\n      }\n    });\n    return res.results.info_list.length;\n  };\n\n  const LoadMenu = async () => {\n    const res = await RequestMethod('get', `itemList`, {\n      path: {\n        tab: 'ROLE_PROD_01'\n      }\n    });\n\n    if (res && res.status === 200) {\n      let tmpColumn = column;\n      tmpColumn = tmpColumn.map(column => {\n        let menuData;\n        res.results.bases && res.results.bases.map(menu => {\n          if (menu.colName === column.key) {\n            menuData = {\n              id: menu.mi_id,\n              name: menu.title,\n              width: menu.width,\n              tab: 'ROLE_PROD_01',\n              unit: menu.unit,\n              moddable: !menu.moddable\n            };\n          } else if (menu.colName === 'id' && column.key === 'tmpId') {\n            menuData = {\n              id: menu.mi_id,\n              name: menu.title,\n              width: menu.width,\n              tab: 'ROLE_PROD_01',\n              unit: menu.unit,\n              moddable: !menu.moddable\n            };\n          }\n        });\n\n        if (menuData) {\n          return _objectSpread(_objectSpread({}, column), menuData);\n        }\n      }).filter(v => v);\n      loadAllSelectItems(tmpColumn);\n    } else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back();\n      });\n    }\n  };\n\n  const changeRow = row => {\n    let tmpData = {};\n    return _objectSpread({\n      ln_id: row.ln_id,\n      rm_id: row.raw_material.rm_id,\n      customer_id: row.raw_material.model.customer.name,\n      cm_id: row.raw_material.model.model,\n      code: row.raw_material.code,\n      name: row.raw_material.name,\n      texture: row.raw_material.texture,\n      depth: row.raw_material.depth,\n      width: row.raw_material.width,\n      height: row.raw_material.height,\n      type: row.raw_material.type,\n      amount: row.amount,\n      date: row.date,\n      number: row.number\n    }, tmpData);\n  };\n\n  const cleanUpData = res => {\n    let tmpColumn = columnlist.operationRegister;\n    let tmpRow = [];\n    tmpColumn = tmpColumn.map(column => {\n      let menuData;\n      res.results.menus && res.results.menus.map(menu => {\n        if (menu.colName === column.key) {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit,\n            moddable: !menu.moddable\n          };\n        } else if (menu.colName === 'id' && column.key === 'tmpId') {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit,\n            moddable: !menu.moddable\n          };\n        }\n      });\n\n      if (menuData) {\n        return _objectSpread(_objectSpread({}, column), menuData);\n      }\n    }).filter(v => v);\n    loadAllSelectItems(tmpColumn);\n    let additionalMenus = res.results.menus ? res.results.menus.map(menu => {\n      if (menu.colName === null) {\n        return {\n          id: menu.id,\n          name: menu.title,\n          width: menu.width,\n          key: menu.title,\n          editor: TextEditor,\n          type: 'additional',\n          unit: menu.unit\n        };\n      }\n    }).filter(v => v) : [];\n    tmpRow = res.results.info_list;\n    let additionalData = [];\n    additionalMenus.map(v => {\n      if (v.type === 'additional') {\n        additionalData.push(v.key);\n      }\n    });\n    let tmpBasicRow = tmpRow.map((row, index) => {\n      let realTableData = changeRow(row);\n      let appendAdditional = {};\n      row.additional && row.additional.map(v => {\n        appendAdditional = _objectSpread(_objectSpread({}, appendAdditional), {}, {\n          [v.title]: v.value\n        });\n      });\n      const random_id = Math.random() * 1000;\n      return _objectSpread(_objectSpread(_objectSpread({}, realTableData), appendAdditional), {}, {\n        id: `rawinput_${random_id}`\n      });\n    });\n    setBasicRow([...tmpBasicRow]);\n  };\n\n  const downloadExcel = () => {\n    let tmpSelectList = [];\n    basicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id));\n    });\n    excelDownload(column, basicRow, `작업지시서등록`, '작업지시서등록', tmpSelectList);\n  };\n\n  const onClickHeaderButton = index => {\n    switch (index) {\n      case 0:\n        downloadExcel();\n        break;\n\n      case 1:\n        loadLotInfo().then(lotLength => {\n          Notiflix.Loading.remove();\n\n          if (!selector.machineList[0].product_id) {\n            Notiflix.Report.failure('저장 실패', '품목을 선택해주세요', '확인');\n            return;\n          } else if (!selector.machineList[0].goal && selector.machineList[0].goal !== 0 || selector.machineList[0].seq !== 1 || !selectList.has(selector.machineList[0].id)) {\n            // Notiflix.Report.failure('저장 실패', '목표 생산량을 입력해주세요', '확인', )\n            SaveBasic();\n            return;\n          }\n\n          Notiflix.Confirm.show('저장하시겠습니까?', `제품 (${selector.machineList[0].code})에 대한 Lot ${lotLength}개가 존재합니다. 입력하신 ${selector.machineList[0].goal}이 맞습니까?`, '저장', '취소', () => {\n            SaveBasic();\n          }, () => {});\n        });\n        break;\n\n      case 2:\n        Notiflix.Confirm.show(\"경고\", \"삭제하시겠습니까?\", \"확인\", \"취소\", () => {\n          DeleteBasic();\n        }, () => {});\n        break;\n    }\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 7\n    }\n  }, __jsx(MenuNavigation, {\n    pageType: 'MES',\n    subType: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    style: {\n      paddingBottom: 40\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 9\n    }\n  }, __jsx(ProfileHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 11\n    }\n  }), __jsx(PageHeader, {\n    title: title,\n    buttons: ['엑셀로 받기', '저장하기', '삭제'],\n    buttonsOnclick: onClickHeaderButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 11\n    }\n  }), __jsx(ExcelTable, {\n    editable: true,\n    resizable: true,\n    headerList: [SelectColumn, ...column],\n    row: selector.machineList // row={basicRow}\n    // setRow={setBasicRow}\n    ,\n    setRow: e => {\n      let tmp = selectList;\n      e.map(v => {\n        if (v.isChange) tmp.add(v.id);\n      });\n      let tmpRow = e;\n      let tmpSelect = selectList;\n\n      if (e.length > 1 && e[1].goal && e[1].goal !== isGoal) {\n        setIsGoal(e[1].goal);\n        tmpRow = tmpRow.map((v, i) => {\n          tmpSelect.add(v.id);\n\n          if (i === 0) {\n            return _objectSpread(_objectSpread({}, v), {}, {\n              goal: Number(e[0].goal)\n            });\n          } else {\n            return _objectSpread(_objectSpread({}, v), {}, {\n              goal: Number(e[1].goal)\n            });\n          }\n        });\n        console.log(tmpRow);\n        setSelectList(tmpSelect);\n      }\n\n      setSelectList(tmp);\n      console.log(tmpRow);\n      setBasicRow([...tmpRow]); // dispatch(insert_machine_list({...selector, machineList:[...tmpRow]}))\n    },\n    setSelectRow: e => {\n      dispatch(insert_machine_list_index(e));\n    },\n    selectList: selectList //@ts-ignore\n    ,\n    setSelectList: setSelectList,\n    height: basicRow.length * 40 >= 40 * 18 + 40 ? 40 * 18 : basicRow.length * 40 + 56,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport const getServerSideProps = ctx => {\n  var _ctx$query$page, _ctx$query$keyword, _ctx$query$opt;\n\n  return {\n    props: {\n      page: (_ctx$query$page = ctx.query.page) !== null && _ctx$query$page !== void 0 ? _ctx$query$page : 1,\n      keyword: (_ctx$query$keyword = ctx.query.keyword) !== null && _ctx$query$keyword !== void 0 ? _ctx$query$keyword : \"\",\n      option: (_ctx$query$opt = ctx.query.opt) !== null && _ctx$query$opt !== void 0 ? _ctx$query$opt : 0\n    }\n  };\n}; // BasicContainer.getInitialProps = async ({ query }) => {\n//   let { page, keyword, opt } = query\n//   if (typeof page === 'string')\n//     page = parseInt(page);\n//   if (typeof opt === 'string')\n//     opt = parseInt(opt);\n//   return { page, keyword, option: opt };\n// }\n\nexport default BasicContainer;","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/operaction/register.tsx"],"names":["React","useEffect","useState","ExcelTable","MenuNavigation","ProfileHeader","PageHeader","SelectColumn","RequestMethod","columnlist","Notiflix","useRouter","MAX_VALUE","TextEditor","excelDownload","moment","useDispatch","useSelector","delete_all_machine_list","delete_machine_list","insert_machine_list","insert_machine_list_index","title","optList","BasicContainer","page","keyword","option","router","dispatch","selector","state","MachineSelectReducer","basicRow","setBasicRow","name","id","index","date","format","column","setColumn","operationRegister","selectList","setSelectList","Set","optionList","setOptionList","optionIndex","setOptionIndex","isLoad","setIsLoad","isGoal","setIsGoal","pageInfo","setPageInfo","total","LoadMenu","console","log","pp_id","ProductProcessSearch","res","path","recentRes","status","Report","info","message","tmpRow","results","processes","map","v","i","random_id","Math","random","value","seq","process_id","process","process_idPK","mold","machine_id","machine","machine_idPK","push","mold_name","process_length","length","machineList","loadAllSelectItems","tmpColumn","pk","unit_id","Promise","all","then","SaveBasic","processesSetting","operation","customer_id","customer_idPK","cm_id","cm_idPK","product_id","row","has","additional","type","selectData","tmpId","authority","authorityPK","last","ln_id","ln_idPK","unit","filter","success","DeleteBasic","size","warning","loadLotInfo","Loading","circle","renderItem","rm_id","params","opt","nz","info_list","tab","menuData","bases","menu","colName","key","mi_id","width","moddable","failure","back","changeRow","tmpData","raw_material","model","customer","code","texture","depth","height","amount","number","cleanUpData","menus","additionalMenus","editor","additionalData","tmpBasicRow","realTableData","appendAdditional","downloadExcel","tmpSelectList","onClickHeaderButton","lotLength","remove","goal","Confirm","show","display","paddingBottom","e","tmp","isChange","add","tmpSelect","Number","getServerSideProps","ctx","props","query"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport ExcelTable from '../../../component/Excel/ExcelTable'\nimport MenuNavigation from '../../../component/MenuNav/MenuNavigation'\nimport ProfileHeader from '../../../component/Profile/ProfileHeader'\nimport PageHeader from '../../../component/Header/Header'\n// @ts-ignore\nimport {SelectColumn} from 'react-data-grid'\nimport {IExcelHeaderType, IItemMenuType} from '../../../common/@types/type'\nimport {RequestMethod} from '../../../common/RequestFunctions'\nimport {columnlist} from \"../../../common/columnInit\";\nimport Notiflix from \"notiflix\";\nimport {useRouter} from 'next/router'\nimport {MAX_VALUE} from '../../../common/configset'\nimport DropDownEditor from '../../../component/Dropdown/ExcelBasicDropdown'\nimport TextEditor from '../../../component/InputBox/ExcelBasicInputBox'\nimport {excelDownload} from '../../../common/excelDownloadFunction'\nimport {loadAll} from 'react-cookies'\nimport PaginationComponent from '../../../component/Pagination/PaginationComponent'\nimport {NextPageContext} from 'next'\nimport moment from 'moment'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootState} from \"../../../reducer\";\nimport {\n  delete_all_machine_list,\n  delete_machine_list,\n  insert_machine_list,\n  insert_machine_list_index\n} from \"../../../reducer/machineSelect\";\n\nconst title = '작업지시서 등록'\nconst optList = ['고객사명', '모델명', 'CODE', '품명', '공정', '기계', 'Lot번호']\n\ninterface IProps {\n  children?: any\n  page?: number\n  keyword?: string\n  option?: number\n}\n\nconst BasicContainer = ({page, keyword, option}: IProps) => {\n  const router = useRouter()\n\n  const dispatch = useDispatch();\n  const selector = useSelector((state:RootState) => state.MachineSelectReducer);\n\n  const [basicRow, setBasicRow] = useState<Array<any>>([{\n    name: \"\", id: \"\", index: 1, date: moment().format('YYYY-MM-DD')\n  }])\n  const [column, setColumn] = useState<Array<IExcelHeaderType>>(columnlist.operationRegister)\n  const [selectList, setSelectList] = useState<Set<any>>(new Set())\n  const [optionList, setOptionList] = useState<string[]>(optList)\n  const [optionIndex, setOptionIndex] = useState<number>(0)\n  const [isLoad, setIsLoad] = useState<number>(0)\n  const [isGoal, setIsGoal] = useState<number>(0)\n\n  const [pageInfo, setPageInfo] = useState<{page: number, total: number}>({\n    page: 1,\n    total: 1\n  })\n  useEffect(() => {\n    // setOptionIndex(option)\n    // if(keyword){\n    //   SearchBasic(keyword, option, page)\n    // }else{\n    //   LoadBasic(page).then(() => {})\n    // }\n    // loadAllSelectItems(column).then((column) => {})\n    LoadMenu()\n  }, [page, keyword, option])\n\n  useEffect(() => {\n    console.log(basicRow[0].pp_id)\n    if(basicRow[0].pp_id && basicRow[0].pp_id !== isLoad){\n      ProductProcessSearch(basicRow[0].pp_id)\n\n    }\n\n  }, [basicRow])\n\n\n  useEffect(()=>{\n    dispatch(delete_all_machine_list());\n  },[])\n  const ProductProcessSearch = async (pp_id: number) => {\n    const res = await RequestMethod('get', `productprocessList`,{\n      path: {\n        pp_id\n      }\n    })\n\n    const recentRes = await RequestMethod('get', `operationRecent`,{\n      path: {\n        pp_id\n      }\n    })\n\n    if(res && res.status === 200 && recentRes && recentRes.status === 200) {\n      Notiflix.Report.info(\"\",recentRes.message,\"확인\");\n      let tmpRow = [basicRow[0]]\n\n      res.results.processes.map((v, i) => {\n        const random_id = Math.random()*1000\n        recentRes.results.processes.map((value,i)=>{\n          if(value.seq === v.seq){\n            v = {...value, ...v}\n          }\n        })\n        if(i === 0){\n          tmpRow[0] = {\n            ...tmpRow[0],\n            ...v,\n            process_id: v.process.name,\n            process_idPK: v.process.process_id,\n            mold: v.mold,\n            id: `operation_${random_id}`,\n            machine_id:v.machine ? v.machine.name : null,\n            machine_idPK:v.machine? v.machine.machine_id : null\n          }\n        }else{\n          tmpRow.push({\n            ...v,\n            process_id: v.process.name,\n            process_idPK: v.process.process_id,\n            mold: v.mold_name,\n            id: `operation_${random_id}`,\n            machine_id:v.machine? v.machine.name : null,\n            machine_idPK:v.machine ? v.machine.machine_id : null\n          })\n        }\n      })\n      setIsLoad(pp_id)\n      setBasicRow([...tmpRow])\n      dispatch(insert_machine_list({process_length:tmpRow.length, machineList:tmpRow}))\n    }\n  }\n\n  const loadAllSelectItems = async (column: IExcelHeaderType[]) => {\n    let tmpColumn = column.map(async (v: any) => {\n      if(v.selectList){\n        return {\n          ...v,\n          pk: v.unit_id\n        }\n      }else{\n        return v\n      }\n    })\n\n    Promise.all(tmpColumn).then(res => {\n      setColumn([...res.map(v=> {\n        return {\n          ...v,\n        }\n      })])\n    })\n  }\n\n  const SaveBasic = async () => {\n\n    let processesSetting = [];\n\n    selector.machineList.map((v,i)=>{\n      processesSetting.push({...v, process_id:v.process_idPK, machine_id: typeof v.machine_id === \"string\" ? v.machine_idPK : v.machine_id})\n    })\n    let res = await RequestMethod('post', `operationSave`,\n        {\n          operation: {\n            date: selector.machineList[0].date,\n            customer_id: selector.machineList[0].customer_idPK,\n            cm_id: selector.machineList[0].cm_idPK,\n            product_id: selector.machineList[0].product_id,\n            processes:\n             selector.machineList.map((row, i) => {\n                          if(selectList.has(row.id)){\n                            let additional:any[] = []\n                            column.map((v) => {\n                              if(v.type === 'additional'){\n                                additional.push(v)\n                              }\n                            })\n\n                            let selectData: any = {}\n\n                            return {\n                              ...row,\n                              ...selectData,\n                              id: row.tmpId,\n                              // seq: i+1,\n                              authority: row.authorityPK,\n                              last: basicRow.length -1 === i ? true : false,\n                              machine_id: row.machine_idPK,\n                              process_id: row.process_idPK,\n                              ln_id: row.ln_idPK,\n                              additional: [\n                                ...additional.map(v => {\n                                  if(row[v.name]) {\n                                    return {\n                                      id: v.id,\n                                      title: v.name,\n                                      value: row[v.name],\n                                      unit: v.unit\n                                    }\n                                  }\n                                }).filter((v) => v)\n                              ]\n                            }\n\n                          }\n                        }).filter((v) => v)\n          }\n        })\n\n    if(res){\n      if(res.status === 200){\n        Notiflix.Report.success('저장되었습니다.','','확인');\n      }\n    }\n  }\n\n  const DeleteBasic = async () => {\n    let tmpRow = []\n    tmpRow = basicRow.map((v) => {\n      if(selectList.has(v.id)){\n        return\n      }\n      return v\n    }).filter(v => v).map((v, index) => {\n      return {\n        ...v,\n        seq: index+1,\n      }\n    })\n\n    if(tmpRow.length > 0 && selectList.size > 0){\n      // selector.machineList.splice(selectList, 1);\n      dispatch(delete_machine_list());\n      Notiflix.Report.success(\"삭제되었습니다.\",\"\",\"확인\");\n      setBasicRow([...tmpRow])\n    }else{\n      Notiflix.Report.warning(\"1개 이상의 작업이 필요합니다!\",\"\",\"확인\");\n    }\n  }\n\n  const loadLotInfo = async () => {\n    Notiflix.Loading.circle()\n    const res = await RequestMethod('get', `rawinSearch`,{\n      path: {\n        page: page,\n        renderItem: MAX_VALUE,\n        customer_id: basicRow[0].customer_idPK,\n        cm_id: basicRow[0].cm_idPK,\n        rm_id: basicRow[0].rm_id\n      },\n      params: {\n        keyword: keyword ?? '',\n        opt: option ?? 0,\n        nz: true\n      }\n    })\n\n    return (res.results.info_list.length)\n  }\n\n  const LoadMenu = async () => {\n    const res = await RequestMethod('get', `itemList`,{\n      path: {\n        tab: 'ROLE_PROD_01'\n      }\n    })\n\n    if(res && res.status === 200) {\n      let tmpColumn = column\n      tmpColumn = tmpColumn.map((column: any) => {\n        let menuData: object | undefined;\n        res.results.bases && res.results.bases.map((menu: any) => {\n          if(menu.colName === column.key){\n            menuData = {\n              id: menu.mi_id,\n              name: menu.title,\n              width: menu.width,\n              tab:'ROLE_PROD_01',\n              unit:menu.unit,\n              moddable: !menu.moddable,\n            }\n          } else if(menu.colName === 'id' && column.key === 'tmpId'){\n            menuData = {\n              id: menu.mi_id,\n              name: menu.title,\n              width: menu.width,\n              tab:'ROLE_PROD_01',\n              unit:menu.unit,\n              moddable: !menu.moddable\n            }\n          }\n        })\n\n        if(menuData){\n          return {\n            ...column,\n            ...menuData\n          }\n        }\n      }).filter((v:any) => v)\n      loadAllSelectItems(tmpColumn)\n    }else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back()\n      })\n    }\n  }\n\n  const changeRow = (row: any) => {\n    let tmpData = {}\n\n    return {\n      ln_id: row.ln_id,\n      rm_id: row.raw_material.rm_id,\n      customer_id: row.raw_material.model.customer.name,\n      cm_id: row.raw_material.model.model,\n      code: row.raw_material.code,\n      name: row.raw_material.name,\n      texture: row.raw_material.texture,\n      depth: row.raw_material.depth,\n      width: row.raw_material.width,\n      height: row.raw_material.height,\n      type: row.raw_material.type,\n      amount: row.amount,\n      date: row.date,\n      number: row.number,\n      ...tmpData\n    }\n  }\n\n  const cleanUpData = (res: any) => {\n    let tmpColumn = columnlist.operationRegister\n    let tmpRow = []\n    tmpColumn = tmpColumn.map((column: any) => {\n      let menuData: object | undefined;\n      res.results.menus && res.results.menus.map((menu: any) => {\n        if(menu.colName === column.key){\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab:menu.tab,\n            unit:menu.unit,\n            moddable: !menu.moddable,\n          }\n        } else if(menu.colName === 'id' && column.key === 'tmpId'){\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab:menu.tab,\n            unit:menu.unit,\n            moddable: !menu.moddable\n          }\n        }\n      })\n\n      if(menuData){\n        return {\n          ...column,\n          ...menuData\n        }\n      }\n    }).filter((v:any) => v)\n\n    loadAllSelectItems(tmpColumn)\n\n    let additionalMenus = res.results.menus ? res.results.menus.map((menu:any) => {\n      if(menu.colName === null){\n        return {\n          id: menu.id,\n          name: menu.title,\n          width: menu.width,\n          key: menu.title,\n          editor: TextEditor,\n          type: 'additional',\n          unit: menu.unit\n        }\n      }\n    }).filter((v: any) => v) : []\n\n    tmpRow = res.results.info_list\n\n    let additionalData: any[] = []\n\n    additionalMenus.map((v: any) => {\n      if(v.type === 'additional'){\n        additionalData.push(v.key)\n      }\n    })\n\n    let tmpBasicRow = tmpRow.map((row: any, index: number) => {\n      let realTableData: any = changeRow(row)\n      let appendAdditional: any = {}\n\n      row.additional && row.additional.map((v: any) => {\n        appendAdditional = {\n          ...appendAdditional,\n          [v.title]: v.value\n        }\n      })\n\n      const random_id = Math.random()*1000\n\n      return {\n        // ...row,\n        ...realTableData,\n        ...appendAdditional,\n        id: `rawinput_${random_id}`,\n      }\n    })\n\n    setBasicRow([...tmpBasicRow])\n  }\n\n  const downloadExcel = () => {\n    let tmpSelectList: boolean[] = []\n    basicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id))\n    })\n    excelDownload(column, basicRow, `작업지시서등록`, '작업지시서등록', tmpSelectList)\n  }\n\n  const onClickHeaderButton = (index: number) => {\n    switch(index){\n      case 0:\n        downloadExcel()\n        break;\n      case 1:\n        loadLotInfo().then((lotLength) => {\n          Notiflix.Loading.remove()\n\n          if(!selector.machineList[0].product_id){\n            Notiflix.Report.failure('저장 실패', '품목을 선택해주세요', '확인', )\n            return\n          } else if (\n            (!selector.machineList[0].goal && selector.machineList[0].goal !== 0)\n            ||\n            (selector.machineList[0].seq !==1 || !selectList.has(selector.machineList[0].id))\n          ) {\n            // Notiflix.Report.failure('저장 실패', '목표 생산량을 입력해주세요', '확인', )\n            SaveBasic()\n            return\n          }\n\n          Notiflix.Confirm.show(\n              '저장하시겠습니까?',\n              `제품 (${selector.machineList[0].code})에 대한 Lot ${lotLength}개가 존재합니다. 입력하신 ${selector.machineList[0].goal}이 맞습니까?`,\n              '저장',\n              '취소',\n              () => {\n                SaveBasic()\n              },\n              () => {\n              }\n          )\n        })\n\n        break;\n      case 2:\n\n        Notiflix.Confirm.show(\"경고\",\"삭제하시겠습니까?\",\"확인\",\"취소\",\n            ()=>{\n              DeleteBasic()\n            },\n            ()=>{}\n        );\n\n        break;\n\n    }\n  }\n\n  return (\n      <div style={{display: 'flex', }}>\n        <MenuNavigation pageType={'MES'} subType={0}/>\n        <div style={{paddingBottom: 40}}>\n          <ProfileHeader/>\n          <PageHeader\n              title={title}\n              buttons={['엑셀로 받기', '저장하기', '삭제']}\n              buttonsOnclick={onClickHeaderButton}\n          />\n          <ExcelTable\n              editable\n              resizable\n              headerList={[\n                SelectColumn,\n                ...column\n              ]}\n              row={selector.machineList}\n              // row={basicRow}\n              // setRow={setBasicRow}\n              setRow={(e) => {\n                let tmp: Set<any> = selectList\n                e.map(v => {\n                  if(v.isChange) tmp.add(v.id)\n                })\n\n                let tmpRow = e\n                let tmpSelect = selectList\n\n                if(e.length > 1 && e[1].goal && e[1].goal !== isGoal) {\n                  setIsGoal(e[1].goal)\n\n                  tmpRow = tmpRow.map((v, i) => {\n                    tmpSelect.add(v.id)\n                    if(i === 0){\n                      return {\n                        ...v,\n                        goal:Number(e[0].goal)\n                      }\n                    }else{\n                      return {\n                        ...v,\n                        goal:Number(e[1].goal)\n                      }\n                    }\n                  })\n                  console.log(tmpRow)\n\n                  setSelectList(tmpSelect)\n                }\n\n                setSelectList(tmp)\n                console.log(tmpRow)\n                setBasicRow([...tmpRow])\n                // dispatch(insert_machine_list({...selector, machineList:[...tmpRow]}))\n              }}\n              setSelectRow={(e)=>{\n                dispatch(insert_machine_list_index(e))\n              }}\n              selectList={selectList}\n              //@ts-ignore\n              setSelectList={setSelectList}\n              height={basicRow.length * 40 >= 40*18+40 ? 40*18 : basicRow.length * 40 + 56}\n          />\n        </div>\n      </div>\n  );\n}\n\nexport const getServerSideProps = (ctx: NextPageContext) => {\n  return {\n    props: {\n      page: ctx.query.page ?? 1,\n      keyword: ctx.query.keyword ?? \"\",\n      option: ctx.query.opt ?? 0,\n    }\n  }\n}\n\n// BasicContainer.getInitialProps = async ({ query }) => {\n//   let { page, keyword, opt } = query\n//   if (typeof page === 'string')\n//     page = parseInt(page);\n//   if (typeof opt === 'string')\n//     opt = parseInt(opt);\n//   return { page, keyword, option: opt };\n// }\n\nexport default BasicContainer;\n"]},"metadata":{},"sourceType":"module"}