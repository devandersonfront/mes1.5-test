{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/stock/productlist.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from \"react\";\nimport MenuNavigation from \"../../../component/MenuNav/MenuNavigation\";\nimport ProfileHeader from \"../../../component/Profile/ProfileHeader\";\nimport PageHeader from \"../../../component/Header/Header\";\nimport ExcelTable from \"../../../component/Excel/ExcelTable\";\nimport { RequestMethod } from \"../../../common/RequestFunctions\";\nimport { columnlist } from \"../../../common/columnInit\";\n//@ts-ignore\nimport { SelectColumn } from \"react-data-grid\"; //@ts-ignore\n\nimport Notiflix from \"notiflix\";\nimport { ScrollSync, ScrollSyncPane } from \"react-scroll-sync\";\nimport ProductTitleFomatter from \"../../../component/Formatter/ProductTitleFomatter\";\nimport moment from \"moment\";\nimport UnitContainer from \"../../../component/Unit/UnitContainer\";\nimport { excelDownload } from \"../../../common/excelDownloadFunction\";\nimport { useRouter } from \"next/router\";\n\nconst Productlist = ({\n  page,\n  keyword,\n  option\n}) => {\n  const router = useRouter();\n  const {\n    0: rowData,\n    1: setRowData\n  } = useState([]);\n  const {\n    0: dateData,\n    1: setDateData\n  } = useState([]);\n  const {\n    0: column,\n    1: setColumn\n  } = useState(columnlist.stockProduct);\n  const {\n    0: dateColumn,\n    1: setDateColumn\n  } = useState(columnlist.stockDate);\n  const {\n    0: selectList,\n    1: setSelectList\n  } = useState(new Set()); // const [keyword, setKeyword] = useState<string>(\"\");\n  // const [option, setOption] = useState<number>(0)\n\n  const {\n    0: optionIndex,\n    1: setOptionIndex\n  } = useState(option);\n  const {\n    0: selectMonth,\n    1: setSelectMonth\n  } = useState(moment(new Date()).startOf(\"month\").format('YYYY-MM'));\n\n  const changeSelectMonth = value => {\n    setSelectMonth(value);\n  };\n\n  const {\n    0: modalResult,\n    1: setModalResult\n  } = useState();\n  const {\n    0: excelTableWidths,\n    1: setExcelTableWidths\n  } = useState({\n    model: 0,\n    data: 0\n  });\n  const {\n    0: selectDate,\n    1: setSelectDate\n  } = useState({\n    from: moment(new Date()).startOf(\"month\").format('YYYY-MM-DD'),\n    to: moment(new Date()).endOf(\"month\").format('YYYY-MM-DD')\n  });\n  useEffect(() => {\n    setOptionIndex(option); // if(keyword){\n    //     SearchBasic(keyword, option, page).then(() => {\n    //         Notiflix.Loading.remove()\n    //     })\n    // }else{\n\n    LoadData().then(() => {\n      Notiflix.Loading.remove();\n    }).then(() => {\n      Notiflix.Loading.remove();\n    }); // }\n  }, [page, keyword, option]);\n\n  const changeSelectDate = (from, to) => {\n    setSelectDate({\n      from: from,\n      to: to\n    });\n  };\n\n  const LoadData = async () => {\n    Notiflix.Loading.standard();\n    const res = await RequestMethod('get', 'stockProductList', {\n      path: {\n        tab: \"ROLE_STK_03\"\n      },\n      params: {\n        keyword: keyword,\n        opt: option,\n        from: selectDate.from,\n        to: selectDate.to\n      }\n    });\n\n    if (res && res.status === 200) {\n      // if(res.results.summaries.length > 0){\n      cleanUpData(res, \"model\");\n      cleanUpData(res, \"date\"); // }\n\n      Notiflix.Loading.remove(300);\n    }\n  };\n\n  const cleanUpData = async (res, version) => {\n    let tmpColumn = columnlist.stockProduct;\n    let tmpRow = [];\n    let tmpRow_date = [];\n    let result = [];\n    let totalWidth = 0;\n\n    switch (version) {\n      case \"model\":\n        tmpColumn = columnlist.stockProduct.map((column, index) => {\n          let menuData;\n          res.results.menus && res.results.menus.map(menu => {\n            if (menu.colName === column.key) {\n              menuData = {\n                id: menu.id,\n                name: menu.title,\n                width: menu.width,\n                tab: menu.tab,\n                unit: menu.unit\n              };\n            } else if (menu.colName === 'id' && column.key === 'tmpId') {\n              menuData = {\n                id: menu.id,\n                name: menu.title,\n                width: menu.width,\n                tab: menu.tab,\n                unit: menu.unit\n              };\n            }\n          });\n\n          if (menuData) {\n            return _objectSpread(_objectSpread({}, column), menuData);\n          }\n        }).filter(v => v);\n        tmpColumn.map(v => {\n          totalWidth += v.width;\n        });\n        setExcelTableWidths({\n          data: 1576 - totalWidth,\n          model: totalWidth\n        });\n        setColumn([...tmpColumn]);\n        break;\n        return;\n\n      case \"date\":\n        if (res.results.summaries.length > 0) {\n          tmpColumn = res.results.summaries[0].statistics.logs.map(col => {\n            result.push({\n              key: col.date,\n              name: col.date,\n              formatter: UnitContainer,\n              unitData: 'EA',\n              width: 100\n            });\n          });\n          setDateColumn([{\n            key: \"title\",\n            name: \"생산/납품\",\n            formatter: ProductTitleFomatter,\n            width: 100,\n            frozen: true\n          }, {\n            key: \"carryforward\",\n            name: \"전월 이월\",\n            formatter: UnitContainer,\n            unitData: \"EA\",\n            frozen: true\n          }, {\n            key: \"total\",\n            name: \"합계\",\n            formatter: UnitContainer,\n            unitData: 'EA',\n            width: 100,\n            frozen: true\n          }, ...result]);\n          result = [];\n        } else {\n          result = [];\n        }\n\n        break;\n        return;\n\n      default:\n        break;\n        return;\n    }\n\n    tmpRow = res.results.summaries;\n    let tmpBasicRow_model = tmpRow.map((row, index) => {\n      let random_id = Math.random() * 1000;\n      return _objectSpread(_objectSpread({}, row), {}, {\n        customer_id: row.product.raw_material.model.customer.name,\n        cm_id: row.product.raw_material.model.model,\n        model: row.product.raw_material.model.model,\n        code: row.product.raw_material.code,\n        name: row.product.raw_material.name,\n        id: `product_${random_id}`\n      });\n    });\n    tmpRow.map((row, index) => {\n      let random = Math.random() * 1000;\n      let tmp_row_produced = {};\n      let tmp_row_shipped = {};\n      row.statistics.logs.map(log => {\n        tmp_row_produced[log.date] = log.produced;\n        tmp_row_shipped[log.date] = log.shipped;\n      });\n      tmp_row_produced[\"carryforward\"] = row.statistics.carryforward;\n      tmp_row_produced[\"total\"] = row.statistics.total_produced + row.statistics.carryforward;\n      tmp_row_shipped[\"total\"] = row.statistics.total_shipped;\n      tmpRow_date.push(_objectSpread({\n        title: \"생산\",\n        id: `product_${random}`\n      }, tmp_row_produced));\n      tmpRow_date.push(_objectSpread({\n        title: \"납품\",\n        id: `product_${random + 1}`\n      }, tmp_row_shipped));\n    });\n\n    if (version === \"model\") {\n      setRowData([...tmpBasicRow_model]);\n    } else if (version === \"date\") {\n      setDateData([...tmpRow_date]);\n    }\n  };\n\n  const downloadExcel = () => {\n    let tmpSelectList = [];\n    let tmpSelectListData = [];\n    rowData.map(row => {\n      tmpSelectList.push(selectList.has(row.id));\n      tmpSelectList.push(selectList.has(row.id)); // if(selectList.has(row.id)){\n\n      let sumProducedObject = {};\n      let sumShippedObject = {};\n      Object.keys(row).map(value => {\n        if (value === \"statistics\") {\n          row[value].logs.map(data => {\n            sumProducedObject[data.date] = data.produced;\n            sumShippedObject[data.date] = data.shipped;\n          });\n        } else {\n          sumProducedObject[value] = row[value];\n        }\n      });\n      sumProducedObject[\"title\"] = \"생산\";\n      sumProducedObject[\"carryforward\"] = row.statistics.carryforward;\n      sumProducedObject[\"total\"] = row.statistics.total_produced;\n      sumShippedObject[\"title\"] = \"납품\"; // sumShippedObject[\"carryforward\"] = row.statistics.carryforward;\n\n      sumShippedObject[\"total\"] = row.statistics.total_shipped;\n      tmpSelectListData.push(sumProducedObject);\n      tmpSelectListData.push(sumShippedObject); // }\n    });\n    excelDownload([...column, ...dateColumn], tmpSelectListData, `${selectDate.from} ~ ${selectDate.to} 생산/납품 현황`, `${selectDate.from} ~ ${selectDate.to}`, tmpSelectList);\n  };\n\n  const buttonClickEvents = number => {\n    switch (number) {\n      case 0:\n        downloadExcel();\n        return;\n\n      default:\n        return;\n    }\n  };\n\n  useEffect(() => {\n    LoadData();\n  }, [selectDate, keyword]);\n  useEffect(() => {\n    let modelWidth = 0;\n    column.map(v => {\n      modelWidth += v.width;\n    });\n    modelWidth += 36;\n    setExcelTableWidths(_objectSpread(_objectSpread({}, excelTableWidths), {}, {\n      data: 1576 - modelWidth,\n      model: modelWidth\n    }));\n  }, [column]);\n  return __jsx(ScrollSync, {\n    horizontal: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 13\n    }\n  }, __jsx(MenuNavigation, {\n    pageType: 'MES',\n    subType: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    style: {\n      width: 1576\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 17\n    }\n  }, __jsx(ProfileHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 21\n    }\n  }), __jsx(PageHeader, {\n    title: \"생산/납품 현황\",\n    buttons: [\"엑셀로 받기\"],\n    buttonsOnclick: buttonClickEvents,\n    isSearch: true,\n    searchOptionList: [\"고객사명\", \"고객사 모델\", \"CODE\", \"품명\"],\n    onChangeSearchOption: option => {\n      setOptionIndex(option);\n    },\n    isCalendar: true,\n    searchKeyword: keyword,\n    onChangeSearchKeyword: keyword => {\n      if (keyword) {\n        router.push(`/mes/stock/productlist?page=1&keyword=${keyword}&opt=${optionIndex}`);\n      } else {\n        router.push(`/mes/stock/productlist?page=1&keyword=`);\n      }\n    },\n    calendarType: \"month\",\n    onChangeSelectDate: changeSelectDate,\n    selectDate: selectMonth,\n    setSelectDate: changeSelectMonth,\n    optionIndex: optionIndex,\n    dataLimit: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 21\n    }\n  }), __jsx(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 21\n    }\n  }, __jsx(ScrollSyncPane, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 25\n    }\n  }, __jsx(ExcelTable, {\n    headerList: [SelectColumn, ...column],\n    setHeaderList: value => {\n      // value.splice(0,1);\n      value.map((v, i) => {\n        if (v.name === \"\") {\n          value.splice(i, 1);\n        }\n      });\n      setColumn([...value]);\n    },\n    selectList: selectList,\n    setSelectList: setSelectList,\n    row: rowData,\n    setRow: setRowData,\n    width: excelTableWidths.model,\n    rowHeight: 80,\n    overflow: \"hidden\",\n    resizable: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 29\n    }\n  })), __jsx(ScrollSyncPane, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 25\n    }\n  }, __jsx(ExcelTable, {\n    headerList: dateColumn,\n    row: dateData,\n    setRow: setRowData,\n    maxWidth: excelTableWidths.data,\n    rowHeight: 40,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 29\n    }\n  }))))));\n};\n\nexport const getServerSideProps = ctx => {\n  var _ctx$query$page, _ctx$query$keyword, _ctx$query$opt;\n\n  return {\n    props: {\n      page: (_ctx$query$page = ctx.query.page) !== null && _ctx$query$page !== void 0 ? _ctx$query$page : 1,\n      keyword: (_ctx$query$keyword = ctx.query.keyword) !== null && _ctx$query$keyword !== void 0 ? _ctx$query$keyword : \"\",\n      option: (_ctx$query$opt = ctx.query.opt) !== null && _ctx$query$opt !== void 0 ? _ctx$query$opt : 0\n    }\n  };\n}; // Productlist.getInitialProps = async ({ query }) => {\n//     let { page, keyword, opt } = query\n//     if (typeof page === 'string')\n//         page = parseInt(page);\n//     if (typeof opt === 'string')\n//         opt = parseInt(opt);\n//     return { page, keyword, option: opt };\n// }\n\nexport default Productlist;","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/stock/productlist.tsx"],"names":["React","useEffect","useState","MenuNavigation","ProfileHeader","PageHeader","ExcelTable","RequestMethod","columnlist","SelectColumn","Notiflix","ScrollSync","ScrollSyncPane","ProductTitleFomatter","moment","UnitContainer","excelDownload","useRouter","Productlist","page","keyword","option","router","rowData","setRowData","dateData","setDateData","column","setColumn","stockProduct","dateColumn","setDateColumn","stockDate","selectList","setSelectList","Set","optionIndex","setOptionIndex","selectMonth","setSelectMonth","Date","startOf","format","changeSelectMonth","value","modalResult","setModalResult","excelTableWidths","setExcelTableWidths","model","data","selectDate","setSelectDate","from","to","endOf","LoadData","then","Loading","remove","changeSelectDate","standard","res","path","tab","params","opt","status","cleanUpData","version","tmpColumn","tmpRow","tmpRow_date","result","totalWidth","map","index","menuData","results","menus","menu","colName","key","id","name","title","width","unit","filter","v","summaries","length","statistics","logs","col","push","date","formatter","unitData","frozen","tmpBasicRow_model","row","random_id","Math","random","customer_id","product","raw_material","customer","cm_id","code","tmp_row_produced","tmp_row_shipped","log","produced","shipped","carryforward","total_produced","total_shipped","downloadExcel","tmpSelectList","tmpSelectListData","has","sumProducedObject","sumShippedObject","Object","keys","buttonClickEvents","number","modelWidth","display","justifyContent","i","splice","getServerSideProps","ctx","props","query"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport MenuNavigation from \"../../../component/MenuNav/MenuNavigation\";\nimport ProfileHeader from \"../../../component/Profile/ProfileHeader\";\nimport PageHeader from \"../../../component/Header/Header\";\nimport ExcelTable from \"../../../component/Excel/ExcelTable\";\nimport {RequestMethod} from \"../../../common/RequestFunctions\";\nimport {columnlist} from \"../../../common/columnInit\";\nimport {IExcelHeaderType} from \"../../../common/@types/type\";\n//@ts-ignore\nimport {SelectColumn} from \"react-data-grid\";\n//@ts-ignore\nimport Notiflix from \"notiflix\";\nimport {ScrollSync, ScrollSyncPane} from \"react-scroll-sync\";\nimport ProductTitleFomatter from \"../../../component/Formatter/ProductTitleFomatter\";\nimport moment from \"moment\";\nimport UnitContainer from \"../../../component/Unit/UnitContainer\";\nimport {excelDownload} from \"../../../common/excelDownloadFunction\";\nimport {NextPageContext} from \"next\";\nimport {useRouter} from \"next/router\";\nimport BasicContainer from '../basic/customer'\n\n\ninterface IProps {\n    children?: any\n    page?: number\n    keyword?: string\n    option?: number\n}\n\n\nconst Productlist = ({page, keyword, option}: IProps) => {\n\n    const router = useRouter();\n\n    const [rowData, setRowData] = useState<any[]>([]);\n    const [dateData, setDateData] = useState<any[]>([]);\n    const [column, setColumn] = useState<Array<IExcelHeaderType>>(columnlist.stockProduct);\n    const [dateColumn, setDateColumn] = useState<Array<IExcelHeaderType>>(columnlist.stockDate);\n\n    const [selectList, setSelectList] = useState<ReadonlySet<number>>(new Set());\n\n    // const [keyword, setKeyword] = useState<string>(\"\");\n    // const [option, setOption] = useState<number>(0)\n    const [optionIndex, setOptionIndex] = useState<number>(option)\n\n    const [selectMonth, setSelectMonth] = useState<string>(moment(new Date()).startOf(\"month\").format('YYYY-MM'))\n\n    const changeSelectMonth = (value:string) => {\n        setSelectMonth(value);\n    }\n    const [modalResult, setModalResult] = useState<any>();\n\n    const [excelTableWidths, setExcelTableWidths] = useState<{model:number, data:number}>({model:0, data:0});\n\n    const [selectDate, setSelectDate] = useState<{from:string, to:string}>({\n        from: moment(new Date()).startOf(\"month\").format('YYYY-MM-DD'),\n        to: moment(new Date()).endOf(\"month\").format('YYYY-MM-DD')\n    });\n\n    useEffect(() => {\n        setOptionIndex(option)\n        // if(keyword){\n        //     SearchBasic(keyword, option, page).then(() => {\n        //         Notiflix.Loading.remove()\n        //     })\n        // }else{\n            LoadData().then(() => {\n                Notiflix.Loading.remove()\n            }).then(() => {\n                Notiflix.Loading.remove()\n            })\n        // }\n    }, [page, keyword, option])\n\n    const changeSelectDate = (from:string, to:string) => {\n        setSelectDate({from:from, to:to});\n    }\n\n    const LoadData = async() => {\n        Notiflix.Loading.standard();\n        const res = await RequestMethod('get', 'stockProductList', {\n            path:{\n                tab:\"ROLE_STK_03\"\n            },\n            params:{\n                keyword:keyword,\n                opt:option,\n                from:selectDate.from,\n                to:selectDate.to\n            }\n        });\n\n        if(res && res.status === 200 ){\n            // if(res.results.summaries.length > 0){\n                cleanUpData(res, \"model\");\n                cleanUpData(res, \"date\");\n            // }\n            Notiflix.Loading.remove(300);\n        }\n    }\n\n    const cleanUpData = async(res: any, version:string) => {\n        let tmpColumn = columnlist.stockProduct;\n        let tmpRow = [];\n        let tmpRow_date = [];\n        let result = [];\n        let totalWidth = 0;\n        switch (version){\n            case \"model\":\n                tmpColumn = columnlist.stockProduct.map((column: any, index) => {\n                    let menuData: object | undefined;\n                    res.results.menus && res.results.menus.map((menu: any) => {\n                        if(menu.colName === column.key){\n                            menuData = {\n                                id: menu.id,\n                                name: menu.title,\n                                width: menu.width,\n                                tab:menu.tab,\n                                unit:menu.unit,\n                            }\n                        } else if(menu.colName === 'id' && column.key === 'tmpId'){\n                            menuData = {\n                                id: menu.id,\n                                name: menu.title,\n                                width: menu.width,\n                                tab:menu.tab,\n                                unit:menu.unit\n                            }\n                        }\n                    })\n\n                    if(menuData){\n                        return {\n                            ...column,\n                            ...menuData\n                        }\n                    }\n                }).filter((v:any) => v)\n\n                tmpColumn.map((v)=>{\n                    totalWidth +=v.width\n                })\n\n                setExcelTableWidths({data:1576-totalWidth, model:totalWidth})\n                setColumn([...tmpColumn]);\n\n                break;\n                return\n            case \"date\":\n                if(res.results.summaries.length > 0){\n                    tmpColumn = res.results.summaries[0].statistics.logs.map((col)=>{\n                            result.push(\n                                {key:col.date, name:col.date, formatter: UnitContainer, unitData: 'EA', width:100},\n                                );\n                        })\n                    setDateColumn([\n                        {key:\"title\", name:\"생산/납품\",formatter:ProductTitleFomatter, width:100, frozen:true},\n                        {key:\"carryforward\", name:\"전월 이월\", formatter: UnitContainer, unitData:\"EA\",frozen:true},\n                        {key:\"total\", name:\"합계\", formatter: UnitContainer, unitData: 'EA',width:100, frozen:true},\n                        ...result,\n                    ]);\n                    result = [];\n                }else{\n                    result = [];\n\n                }\n                break;\n                return\n            default :\n                break;\n                return\n        }\n\n        tmpRow = res.results.summaries\n\n\n        let tmpBasicRow_model = tmpRow.map((row: any, index: number) => {\n            let random_id = Math.random()*1000;\n                return {\n                    ...row,\n                    customer_id: row.product.raw_material.model.customer.name,\n                    cm_id:row.product.raw_material.model.model,\n                    model:row.product.raw_material.model.model,\n                    code:row.product.raw_material.code,\n                    name: row.product.raw_material.name,\n                    id: `product_${random_id}`,\n                }\n        })\n       tmpRow.map((row: any, index: number) => {\n                let random = Math.random()*1000;\n                let tmp_row_produced = {};\n                let tmp_row_shipped = {};\n                row.statistics.logs.map((log)=>{\n                    tmp_row_produced[log.date] = log.produced;\n                    tmp_row_shipped[log.date] = log.shipped;\n                })\n                tmp_row_produced[\"carryforward\"] = row.statistics.carryforward;\n                tmp_row_produced[\"total\"] = row.statistics.total_produced + row.statistics.carryforward;\n                tmp_row_shipped[\"total\"] = row.statistics.total_shipped;\n\n                tmpRow_date.push({\n                    title:\"생산\",\n                    id: `product_${random}`,\n                    ...tmp_row_produced\n                })\n\n                tmpRow_date.push({\n                    title:\"납품\",\n                    id: `product_${random+1}`,\n                    ...tmp_row_shipped\n                })\n        })\n\n\n        if(version === \"model\"){\n            setRowData([...tmpBasicRow_model])\n        }else if(version === \"date\"){\n            setDateData([...tmpRow_date]);\n        }\n    }\n\n    const downloadExcel = () => {\n        let tmpSelectList: boolean[] = []\n        let tmpSelectListData:any[] = []\n        rowData.map(row => {\n            tmpSelectList.push(selectList.has(row.id))\n            tmpSelectList.push(selectList.has(row.id))\n            // if(selectList.has(row.id)){\n            let sumProducedObject:any = {};\n            let sumShippedObject:any = {};\n            Object.keys(row).map((value)=>{\n                if(value === \"statistics\"){\n                    row[value].logs.map((data)=>{\n                        sumProducedObject[data.date] =  data.produced;\n                        sumShippedObject[data.date] = data.shipped;\n                    })\n                }else{\n                    sumProducedObject[value] = row[value];\n                }\n            })\n\n            sumProducedObject[\"title\"] = \"생산\";\n            sumProducedObject[\"carryforward\"] = row.statistics.carryforward;\n            sumProducedObject[\"total\"] = row.statistics.total_produced;\n\n            sumShippedObject[\"title\"] = \"납품\";\n            // sumShippedObject[\"carryforward\"] = row.statistics.carryforward;\n            sumShippedObject[\"total\"] = row.statistics.total_shipped;\n\n            tmpSelectListData.push(sumProducedObject);\n            tmpSelectListData.push(sumShippedObject);\n            // }\n        })\n        excelDownload([...column, ...dateColumn], tmpSelectListData, `${selectDate.from} ~ ${selectDate.to} 생산/납품 현황`, `${selectDate.from} ~ ${selectDate.to}`, tmpSelectList)\n    }\n    const buttonClickEvents = (number:number) => {\n        switch (number){\n            case 0:\n                downloadExcel()\n                return\n            default:\n                return\n        }\n    }\n\n    useEffect(()=>{\n        LoadData();\n    },[selectDate, keyword])\n\n    useEffect(()=>{\n        let modelWidth = 0;\n        column.map((v)=>{\n            modelWidth += v.width;\n        })\n        modelWidth += 36;\n        setExcelTableWidths({...excelTableWidths,data:1576-modelWidth, model:modelWidth})\n\n    },[column])\n    return(\n        <ScrollSync horizontal={false}>\n            <div style={{display:\"flex\"}}>\n                <MenuNavigation pageType={'MES'} subType={3}/>\n                <div style={{width:1576}}>\n                    <ProfileHeader/>\n                    <PageHeader\n                        title={\"생산/납품 현황\"}\n                        buttons={[\"엑셀로 받기\"]}\n                        buttonsOnclick={buttonClickEvents}\n                        isSearch={true}\n                        searchOptionList={[\"고객사명\",\"고객사 모델\",\"CODE\", \"품명\"]}\n                        onChangeSearchOption={(option) => {\n\n                            setOptionIndex(option)\n                        }}\n                        isCalendar={true}\n                        searchKeyword={keyword}\n                        onChangeSearchKeyword={(keyword) => {\n                            if(keyword){\n                                router.push(`/mes/stock/productlist?page=1&keyword=${keyword}&opt=${optionIndex}`)\n                            }else{\n                                router.push(`/mes/stock/productlist?page=1&keyword=`)\n                            }\n                        }}\n                        calendarType={\"month\"}\n                        onChangeSelectDate={changeSelectDate}\n                        selectDate={selectMonth}\n                        setSelectDate={changeSelectMonth}\n                        optionIndex={optionIndex}\n                        dataLimit={true}\n                    />\n                    <div style={{display:\"flex\",justifyContent:\"center\"}}>\n                        <ScrollSyncPane>\n                            <ExcelTable headerList={[\n                                            SelectColumn,\n                                            ...column\n                                        ]}\n                                        setHeaderList={(value) => {\n                                            // value.splice(0,1);\n                                            value.map((v,i)=>{\n                                                if(v.name === \"\"){\n                                                    value.splice(i, 1);\n                                                }\n                                            })\n                                            setColumn([...value])\n                                        }}\n                                        selectList={selectList}\n                                        setSelectList={setSelectList}\n                                        row={rowData} setRow={setRowData} width={excelTableWidths.model} rowHeight={80} overflow={\"hidden\"}\n                                        resizable\n                            />\n                        </ScrollSyncPane>\n                        <ScrollSyncPane>\n                            <ExcelTable headerList={dateColumn} row={dateData} setRow={setRowData} maxWidth={excelTableWidths.data} rowHeight={40}   />\n                        </ScrollSyncPane>\n                    </div>\n                </div>\n            </div>\n        </ScrollSync>\n    );\n}\n\nexport const getServerSideProps = (ctx: NextPageContext) => {\n    return {\n        props: {\n            page: ctx.query.page ?? 1,\n            keyword: ctx.query.keyword ?? \"\",\n            option: ctx.query.opt ?? 0,\n        }\n    }\n}\n\n// Productlist.getInitialProps = async ({ query }) => {\n//     let { page, keyword, opt } = query\n//     if (typeof page === 'string')\n//         page = parseInt(page);\n//     if (typeof opt === 'string')\n//         opt = parseInt(opt);\n//     return { page, keyword, option: opt };\n// }\n\nexport default Productlist;\n"]},"metadata":{},"sourceType":"module"}