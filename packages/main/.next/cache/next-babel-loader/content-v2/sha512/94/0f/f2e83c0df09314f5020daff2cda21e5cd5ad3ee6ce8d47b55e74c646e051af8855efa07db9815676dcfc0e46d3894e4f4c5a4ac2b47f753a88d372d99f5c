{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/record/register.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport ExcelTable from '../../../component/Excel/ExcelTable';\nimport MenuNavigation from '../../../component/MenuNav/MenuNavigation';\nimport ProfileHeader from '../../../component/Profile/ProfileHeader';\nimport PageHeader from '../../../component/Header/Header'; // @ts-ignore\n\nimport { SelectColumn } from 'react-data-grid';\nimport { RequestMethod } from '../../../common/RequestFunctions';\nimport { columnlist } from \"../../../common/columnInit\";\nimport Notiflix from \"notiflix\";\nimport { useRouter } from 'next/router';\nimport TextEditor from '../../../component/InputBox/ExcelBasicInputBox';\nimport { excelDownload } from '../../../common/excelDownloadFunction';\nimport moment from 'moment';\nconst title = '작업 완료 등록';\nconst optList = ['고객사명', '모델명', 'CODE', '품명', '공정', '기계', 'Lot번호'];\n\nconst BasicContainer = () => {\n  const router = useRouter();\n  const {\n    0: basicRow,\n    1: setBasicRow\n  } = useState([{\n    name: \"\",\n    id: `rawinput_${Math.random() * 1000}`,\n    date: moment().format('YYYY-MM-DD'),\n    start: `${moment().format('YYYY-MM-DD HH:mm')}:00`,\n    end: undefined,\n    poor_quantities: []\n  }]);\n  const {\n    0: column,\n    1: setColumn\n  } = useState(columnlist.recordRegister);\n  const {\n    0: selectList,\n    1: setSelectList\n  } = useState(new Set());\n  const {\n    0: isGoal,\n    1: setIsGoal\n  } = useState(0);\n  const {\n    0: pageInfo,\n    1: setPageInfo\n  } = useState({\n    page: 1,\n    total: 1\n  });\n  useEffect(() => {\n    // loadAllSelectItems(column).then((column) => {})\n    LoadMenu();\n  }, []);\n\n  const loadAllSelectItems = async (column, pp_id) => {\n    if (pp_id) {\n      const res = await RequestMethod('get', `productprocessList`, {\n        path: {\n          pp_id\n        }\n      });\n    }\n\n    let tmpColumn = column.map(async v => {\n      if (v.selectList && v.selectList.length === 0 && v.key === 'seq') {\n        return _objectSpread(_objectSpread({}, v), {}, {\n          selectList: []\n        });\n      } else {\n        if (v.selectList) {\n          return _objectSpread(_objectSpread({}, v), {}, {\n            pk: v.unit_id\n          });\n        } else {\n          return v;\n        }\n      }\n    });\n    Promise.all(tmpColumn).then(res => {\n      setColumn([...res.map(v => {\n        return _objectSpread(_objectSpread({}, v), {}, {\n          name: v.moddable ? v.name + '(필수)' : v.name\n        });\n      })]);\n    });\n  };\n\n  const SaveBasic = async () => {\n    let tmpRow = basicRow.map(v => {\n      if (selectList.has(v.id)) {\n        var _v$poor_quantities, _v$paused_times;\n\n        return _objectSpread(_objectSpread({}, v), {}, {\n          customer_id: v.customer_idPK,\n          osd_id: v.osd_idPK,\n          cm_id: v.cm_idPK,\n          mold_id: v.mold_idPK,\n          machine_id: v.machine_idPK,\n          process_id: v.process_idPK,\n          ln_id: v.ln_idPK,\n          paused_time: v.paused_timePK,\n          good_quantity: Number(v.good_quantity),\n          user_id: v.user_idPK,\n          poor_quantities: (_v$poor_quantities = v.poor_quantities) !== null && _v$poor_quantities !== void 0 ? _v$poor_quantities : [],\n          paused_times: (_v$paused_times = v.paused_times) !== null && _v$paused_times !== void 0 ? _v$paused_times : []\n        });\n      }\n    }).filter(v => v);\n\n    if (tmpRow.length) {\n      let res = await RequestMethod('post', `recordSave`, {\n        records: [...tmpRow]\n      });\n\n      if (res) {\n        if (res.status === 200) {\n          Notiflix.Report.success('저장되었습니다.', '', '확인');\n        }\n      }\n    } else {\n      Notiflix.Report.failure('저장 실패', '저장할 데이터를 선택해주세요', '확인');\n    }\n  };\n\n  const DeleteBasic = async () => {\n    let tmpRow = basicRow.map((row, index) => {\n      if (selectList.has(row.id)) {\n        return;\n      }\n\n      return row;\n    }).filter(v => v);\n    Notiflix.Report.success('삭제되었습니다.', '', '확인');\n    setBasicRow([...tmpRow]);\n  };\n\n  const LoadMenu = async () => {\n    const res = await RequestMethod('get', `itemList`, {\n      path: {\n        tab: 'ROLE_PROD_05'\n      }\n    });\n\n    if (res && res.status === 200) {\n      let tmpColumn = column;\n      tmpColumn = tmpColumn.map(column => {\n        let menuData;\n        res.results.bases && res.results.bases.map(menu => {\n          if (menu.colName === column.key) {\n            menuData = {\n              id: menu.mi_id,\n              name: menu.title,\n              width: menu.width,\n              tab: 'ROLE_PROD_05',\n              unit: menu.unit,\n              moddable: !menu.moddable\n            };\n          } else if (menu.colName === 'id' && column.key === 'tmpId') {\n            menuData = {\n              id: menu.mi_id,\n              name: menu.title,\n              width: menu.width,\n              tab: 'ROLE_PROD_05',\n              unit: menu.unit,\n              moddable: !menu.moddable\n            };\n          }\n        });\n\n        if (menuData) {\n          return _objectSpread(_objectSpread({}, column), menuData);\n        }\n      }).filter(v => v);\n      loadAllSelectItems(tmpColumn);\n    } else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back();\n      });\n    }\n  };\n\n  const changeRow = row => {\n    let tmpData = {};\n    return _objectSpread({\n      ln_id: row.ln_id,\n      rm_id: row.raw_material.rm_id,\n      customer_id: row.raw_material.model.customer.name,\n      cm_id: row.raw_material.model.model,\n      code: row.raw_material.code,\n      name: row.raw_material.name,\n      texture: row.raw_material.texture,\n      depth: row.raw_material.depth,\n      width: row.raw_material.width,\n      height: row.raw_material.height,\n      type: row.raw_material.type,\n      amount: row.amount,\n      date: row.date,\n      number: row.number\n    }, tmpData);\n  };\n\n  const cleanUpData = res => {\n    let tmpColumn = columnlist.operationRegister;\n    let tmpRow = [];\n    tmpColumn = tmpColumn.map(column => {\n      let menuData;\n      res.results.menus && res.results.menus.map(menu => {\n        if (menu.colName === column.key) {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit,\n            moddable: !menu.moddable\n          };\n        } else if (menu.colName === 'id' && column.key === 'tmpId') {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit,\n            moddable: !menu.moddable\n          };\n        }\n      });\n\n      if (menuData) {\n        return _objectSpread(_objectSpread({}, column), menuData);\n      }\n    }).filter(v => v);\n    loadAllSelectItems(tmpColumn);\n    let additionalMenus = res.results.menus ? res.results.menus.map(menu => {\n      if (menu.colName === null) {\n        return {\n          id: menu.id,\n          name: menu.title,\n          width: menu.width,\n          key: menu.title,\n          editor: TextEditor,\n          type: 'additional',\n          unit: menu.unit\n        };\n      }\n    }).filter(v => v) : [];\n    tmpRow = res.results.info_list;\n    let additionalData = [];\n    additionalMenus.map(v => {\n      if (v.type === 'additional') {\n        additionalData.push(v.key);\n      }\n    });\n    let tmpBasicRow = tmpRow.map((row, index) => {\n      let realTableData = changeRow(row);\n      let appendAdditional = {};\n      row.additional && row.additional.map(v => {\n        appendAdditional = _objectSpread(_objectSpread({}, appendAdditional), {}, {\n          [v.title]: v.value\n        });\n      });\n      const random_id = Math.random() * 1000;\n      return _objectSpread(_objectSpread(_objectSpread({}, realTableData), appendAdditional), {}, {\n        id: `rawinput_${random_id}`\n      });\n    });\n    setBasicRow([...tmpBasicRow]);\n  };\n\n  const downloadExcel = () => {\n    let tmpSelectList = [];\n    basicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id));\n    });\n    excelDownload(column, basicRow, `작업완료등록`, '작업완료등록', tmpSelectList);\n  };\n\n  const onClickHeaderButton = index => {\n    switch (index) {\n      case 0:\n        downloadExcel();\n        break;\n      // case 1:\n      //   router.push(`/mes/item/manage/rawin`)\n      //   break;\n\n      case 1:\n        let items = {};\n        column.map(value => {\n          if (value.selectList && value.selectList.length) {\n            items = _objectSpread(_objectSpread({}, value.selectList[0]), {}, {\n              [value.key]: value.selectList[0].name,\n              [value.key + 'PK']: value.selectList[0].pk\n            }, items);\n          }\n        });\n        const random_id = Math.random() * 1000;\n        setBasicRow([_objectSpread(_objectSpread({}, items), {}, {\n          id: `rawinput_${random_id}`,\n          name: '',\n          date: moment().format('YYYY-MM-DD'),\n          start: `${moment().format('YYYY-MM-DD HH:mm')}:00`,\n          end: null\n        }), ...basicRow]);\n        break;\n\n      case 2:\n        SaveBasic();\n        break;\n\n      case 3:\n        Notiflix.Confirm.show(\"경고\", \"삭제하시겠습니까?\", \"확인\", \"취소\", () => {\n          DeleteBasic();\n        }, () => {});\n        break;\n    }\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 5\n    }\n  }, __jsx(MenuNavigation, {\n    pageType: 'MES',\n    subType: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    style: {\n      paddingBottom: 40\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 7\n    }\n  }, __jsx(ProfileHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 9\n    }\n  }), __jsx(PageHeader, {\n    title: title,\n    buttons: ['엑셀로 받기', '행 추가', '저장하기', '삭제'],\n    buttonsOnclick: onClickHeaderButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 9\n    }\n  }), __jsx(ExcelTable, {\n    editable: true,\n    resizable: true,\n    headerList: [SelectColumn, ...column],\n    row: basicRow // setRow={setBasicRow}\n    ,\n    setRow: e => {\n      let tmp = selectList;\n      e.map(v => {\n        if (v.isChange) tmp.add(v.id);\n      });\n      setSelectList(tmp);\n      setBasicRow(e);\n    },\n    selectList: selectList //@ts-ignore\n    ,\n    setSelectList: setSelectList,\n    height: basicRow.length * 40 >= 40 * 18 + 40 ? 40 * 18 : basicRow.length * 40 + 56,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport const getServerSideProps = ctx => {\n  var _ctx$query$page, _ctx$query$keyword, _ctx$query$opt;\n\n  return {\n    props: {\n      page: (_ctx$query$page = ctx.query.page) !== null && _ctx$query$page !== void 0 ? _ctx$query$page : 1,\n      keyword: (_ctx$query$keyword = ctx.query.keyword) !== null && _ctx$query$keyword !== void 0 ? _ctx$query$keyword : \"\",\n      option: (_ctx$query$opt = ctx.query.opt) !== null && _ctx$query$opt !== void 0 ? _ctx$query$opt : 0\n    }\n  };\n};\nexport default BasicContainer;","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/record/register.tsx"],"names":["React","useEffect","useState","ExcelTable","MenuNavigation","ProfileHeader","PageHeader","SelectColumn","RequestMethod","columnlist","Notiflix","useRouter","TextEditor","excelDownload","moment","title","optList","BasicContainer","router","basicRow","setBasicRow","name","id","Math","random","date","format","start","end","undefined","poor_quantities","column","setColumn","recordRegister","selectList","setSelectList","Set","isGoal","setIsGoal","pageInfo","setPageInfo","page","total","LoadMenu","loadAllSelectItems","pp_id","res","path","tmpColumn","map","v","length","key","pk","unit_id","Promise","all","then","moddable","SaveBasic","tmpRow","has","customer_id","customer_idPK","osd_id","osd_idPK","cm_id","cm_idPK","mold_id","mold_idPK","machine_id","machine_idPK","process_id","process_idPK","ln_id","ln_idPK","paused_time","paused_timePK","good_quantity","Number","user_id","user_idPK","paused_times","filter","records","status","Report","success","failure","DeleteBasic","row","index","tab","menuData","results","bases","menu","colName","mi_id","width","unit","state","back","changeRow","tmpData","rm_id","raw_material","model","customer","code","texture","depth","height","type","amount","number","cleanUpData","operationRegister","menus","additionalMenus","editor","info_list","additionalData","push","tmpBasicRow","realTableData","appendAdditional","additional","value","random_id","downloadExcel","tmpSelectList","onClickHeaderButton","items","Confirm","show","display","paddingBottom","e","tmp","isChange","add","getServerSideProps","ctx","props","query","keyword","option","opt"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport ExcelTable from '../../../component/Excel/ExcelTable'\nimport MenuNavigation from '../../../component/MenuNav/MenuNavigation'\nimport ProfileHeader from '../../../component/Profile/ProfileHeader'\nimport PageHeader from '../../../component/Header/Header'\n// @ts-ignore\nimport {SelectColumn} from 'react-data-grid'\nimport {IExcelHeaderType, IItemMenuType} from '../../../common/@types/type'\nimport {RequestMethod} from '../../../common/RequestFunctions'\nimport {columnlist} from \"../../../common/columnInit\";\nimport Notiflix from \"notiflix\";\nimport {useRouter} from 'next/router'\nimport {MAX_VALUE} from '../../../common/configset'\nimport DropDownEditor from '../../../component/Dropdown/ExcelBasicDropdown'\nimport TextEditor from '../../../component/InputBox/ExcelBasicInputBox'\nimport {excelDownload} from '../../../common/excelDownloadFunction'\nimport {loadAll} from 'react-cookies'\nimport PaginationComponent from '../../../component/Pagination/PaginationComponent'\nimport {NextPageContext} from 'next'\nimport moment from 'moment'\n\nconst title = '작업 완료 등록'\nconst optList = ['고객사명', '모델명', 'CODE', '품명', '공정', '기계', 'Lot번호']\n\ninterface IProps {\n  children?: any\n  page?: number\n  keyword?: string\n  option?: number\n}\n\nconst BasicContainer = () => {\n  const router = useRouter()\n\n  const [basicRow, setBasicRow] = useState<Array<any>>([{\n    name: \"\", id: `rawinput_${Math.random()*1000}`,\n    date: moment().format('YYYY-MM-DD'),\n    start: `${moment().format('YYYY-MM-DD HH:mm')}:00`,\n    end: undefined,\n    poor_quantities: []\n  }])\n  const [column, setColumn] = useState<Array<IExcelHeaderType>>(columnlist.recordRegister)\n  const [selectList, setSelectList] = useState<Set<any>>(new Set())\n  const [isGoal, setIsGoal] = useState<number>(0)\n\n  const [pageInfo, setPageInfo] = useState<{page: number, total: number}>({\n    page: 1,\n    total: 1\n  })\n\n  useEffect(() => {\n    // loadAllSelectItems(column).then((column) => {})\n    LoadMenu()\n  }, [])\n\n  const loadAllSelectItems = async (column: IExcelHeaderType[], pp_id?: number) => {\n    if(pp_id){\n      const res = await RequestMethod('get', `productprocessList`,{\n        path: {\n          pp_id\n        }\n      })\n    }\n\n    let tmpColumn = column.map(async (v: any) => {\n      if(v.selectList && v.selectList.length === 0 && v.key === 'seq'){\n        return {\n          ...v,\n          selectList: []\n        }\n      }else{\n        if(v.selectList){\n          return {\n            ...v,\n            pk: v.unit_id\n          }\n        }else{\n          return v\n        }\n      }\n    })\n\n    Promise.all(tmpColumn).then(res => {\n      setColumn([...res.map(v=> {\n        return {\n          ...v,\n          name: v.moddable ? v.name+'(필수)' : v.name\n        }\n      })])\n    })\n  }\n\n  const SaveBasic = async () => {\n    let tmpRow = basicRow.map(v => {\n\n      if(selectList.has(v.id)){\n        return {\n          ...v,\n          customer_id: v.customer_idPK,\n          osd_id: v.osd_idPK,\n          cm_id: v.cm_idPK,\n          mold_id: v.mold_idPK,\n          machine_id: v.machine_idPK,\n          process_id: v.process_idPK,\n          ln_id: v.ln_idPK,\n          paused_time: v.paused_timePK,\n          good_quantity: Number(v.good_quantity),\n          user_id: v.user_idPK,\n          poor_quantities: v.poor_quantities ?? [],\n          paused_times: v.paused_times ?? []\n        }\n      }\n    }).filter(v => v)\n    if(tmpRow.length){\n      let res = await RequestMethod('post', `recordSave`,\n      {\n        records: [...tmpRow]\n      })\n      if(res){\n        if(res.status === 200){\n          Notiflix.Report.success('저장되었습니다.','','확인');\n        }\n      }\n    } else {\n      Notiflix.Report.failure('저장 실패', '저장할 데이터를 선택해주세요', '확인')\n    }\n  }\n\n  const DeleteBasic = async () => {\n    let tmpRow = basicRow.map((row, index) => {\n      if(selectList.has(row.id)){\n        return\n      }\n      return row\n    }).filter(v => v)\n    Notiflix.Report.success('삭제되었습니다.','','확인');\n    setBasicRow([...tmpRow])\n  }\n\n  const LoadMenu = async () => {\n    const res = await RequestMethod('get', `itemList`,{\n      path: {\n        tab: 'ROLE_PROD_05'\n      }\n    })\n\n    if(res && res.status === 200) {\n      let tmpColumn = column\n      tmpColumn = tmpColumn.map((column: any) => {\n        let menuData: object | undefined;\n        res.results.bases && res.results.bases.map((menu: any) => {\n          if(menu.colName === column.key){\n            menuData = {\n              id: menu.mi_id,\n              name: menu.title,\n              width: menu.width,\n              tab:'ROLE_PROD_05',\n              unit:menu.unit,\n              moddable: !menu.moddable,\n            }\n          } else if(menu.colName === 'id' && column.key === 'tmpId'){\n            menuData = {\n              id: menu.mi_id,\n              name: menu.title,\n              width: menu.width,\n              tab:'ROLE_PROD_05',\n              unit:menu.unit,\n              moddable: !menu.moddable\n            }\n          }\n        })\n\n        if(menuData){\n          return {\n            ...column,\n            ...menuData\n          }\n        }\n      }).filter((v:any) => v)\n      loadAllSelectItems(tmpColumn)\n    }else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back()\n      })\n    }\n  }\n\n  const changeRow = (row: any) => {\n    let tmpData = {}\n\n    return {\n      ln_id: row.ln_id,\n      rm_id: row.raw_material.rm_id,\n      customer_id: row.raw_material.model.customer.name,\n      cm_id: row.raw_material.model.model,\n      code: row.raw_material.code,\n      name: row.raw_material.name,\n      texture: row.raw_material.texture,\n      depth: row.raw_material.depth,\n      width: row.raw_material.width,\n      height: row.raw_material.height,\n      type: row.raw_material.type,\n      amount: row.amount,\n      date: row.date,\n      number: row.number,\n      ...tmpData\n    }\n  }\n\n  const cleanUpData = (res: any) => {\n    let tmpColumn = columnlist.operationRegister\n    let tmpRow = []\n    tmpColumn = tmpColumn.map((column: any) => {\n      let menuData: object | undefined;\n      res.results.menus && res.results.menus.map((menu: any) => {\n        if(menu.colName === column.key){\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab:menu.tab,\n            unit:menu.unit,\n            moddable: !menu.moddable\n          }\n        } else if(menu.colName === 'id' && column.key === 'tmpId'){\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab:menu.tab,\n            unit:menu.unit,\n            moddable: !menu.moddable\n          }\n        }\n      })\n\n      if(menuData){\n        return {\n          ...column,\n          ...menuData\n        }\n      }\n    }).filter((v:any) => v)\n\n    loadAllSelectItems(tmpColumn)\n\n    let additionalMenus = res.results.menus ? res.results.menus.map((menu:any) => {\n      if(menu.colName === null){\n        return {\n          id: menu.id,\n          name: menu.title,\n          width: menu.width,\n          key: menu.title,\n          editor: TextEditor,\n          type: 'additional',\n          unit: menu.unit\n        }\n      }\n    }).filter((v: any) => v) : []\n\n    tmpRow = res.results.info_list\n\n    let additionalData: any[] = []\n\n    additionalMenus.map((v: any) => {\n      if(v.type === 'additional'){\n        additionalData.push(v.key)\n      }\n    })\n\n    let tmpBasicRow = tmpRow.map((row: any, index: number) => {\n      let realTableData: any = changeRow(row)\n      let appendAdditional: any = {}\n\n      row.additional && row.additional.map((v: any) => {\n        appendAdditional = {\n          ...appendAdditional,\n          [v.title]: v.value\n        }\n      })\n\n      const random_id = Math.random()*1000\n\n      return {\n        // ...row,\n        ...realTableData,\n        ...appendAdditional,\n        id: `rawinput_${random_id}`,\n      }\n    })\n\n    setBasicRow([...tmpBasicRow])\n  }\n\n  const downloadExcel = () => {\n    let tmpSelectList: boolean[] = []\n    basicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id))\n    })\n    excelDownload(column, basicRow, `작업완료등록`, '작업완료등록', tmpSelectList)\n  }\n\n  const onClickHeaderButton = (index: number) => {\n    switch(index){\n      case 0:\n        downloadExcel()\n        break;\n      // case 1:\n      //   router.push(`/mes/item/manage/rawin`)\n      //   break;\n      case 1:\n\n        let items = {}\n\n        column.map((value) => {\n          if(value.selectList && value.selectList.length){\n            items = {\n              ...value.selectList[0],\n              [value.key] : value.selectList[0].name,\n              [value.key+'PK'] : value.selectList[0].pk,//여기 봐야됨!\n              ...items,\n            }\n          }\n        })\n\n        const random_id = Math.random()*1000\n\n        setBasicRow([\n          {\n            ...items,\n            id: `rawinput_${random_id}`,\n            name: '',\n            date: moment().format('YYYY-MM-DD'),\n            start: `${moment().format('YYYY-MM-DD HH:mm')}:00`,\n            end: null,\n          },\n          ...basicRow\n        ])\n        break;\n      case 2:\n        SaveBasic()\n\n        break;\n      case 3:\n        Notiflix.Confirm.show(\"경고\",\"삭제하시겠습니까?\",\"확인\",\"취소\",\n            ()=>{\n              DeleteBasic()\n            },\n            ()=>{})\n\n        break;\n\n    }\n  }\n\n  return (\n    <div style={{display: 'flex', }}>\n      <MenuNavigation pageType={'MES'} subType={0}/>\n      <div style={{paddingBottom: 40}}>\n        <ProfileHeader/>\n        <PageHeader\n          title={title}\n          buttons={['엑셀로 받기', '행 추가', '저장하기', '삭제']}\n          buttonsOnclick={onClickHeaderButton}\n        />\n        <ExcelTable\n          editable\n          resizable\n          headerList={[\n            SelectColumn,\n            ...column\n          ]}\n          row={basicRow}\n          // setRow={setBasicRow}\n          setRow={(e) => {\n            let tmp: Set<any> = selectList\n            e.map(v => {\n              if(v.isChange) tmp.add(v.id)\n            })\n            setSelectList(tmp)\n            setBasicRow(e)\n          }}\n          selectList={selectList}\n          //@ts-ignore\n          setSelectList={setSelectList}\n          height={basicRow.length * 40 >= 40*18+40 ? 40*18 : basicRow.length * 40 + 56}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport const getServerSideProps = (ctx: NextPageContext) => {\n  return {\n    props: {\n      page: ctx.query.page ?? 1,\n      keyword: ctx.query.keyword ?? \"\",\n      option: ctx.query.opt ?? 0,\n    }\n  }\n}\n\nexport default BasicContainer;\n"]},"metadata":{},"sourceType":"module"}