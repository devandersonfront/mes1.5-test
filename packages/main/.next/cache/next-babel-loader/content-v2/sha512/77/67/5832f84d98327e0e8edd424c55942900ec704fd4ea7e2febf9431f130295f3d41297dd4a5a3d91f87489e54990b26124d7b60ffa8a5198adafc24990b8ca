{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/basic/rawmaterial/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport ExcelTable from '../../../../component/Excel/ExcelTable';\nimport MenuNavigation from '../../../../component/MenuNav/MenuNavigation';\nimport ProfileHeader from '../../../../component/Profile/ProfileHeader';\nimport PageHeader from '../../../../component/Header/Header'; // @ts-ignore\n\nimport { SelectColumn } from 'react-data-grid';\nimport { RequestMethod } from '../../../../common/RequestFunctions';\nimport { columnlist } from \"../../../../common/columnInit\";\nimport Notiflix from \"notiflix\";\nimport { useRouter } from 'next/router';\nimport { MAX_VALUE } from '../../../../common/configset';\nimport TextEditor from '../../../../component/InputBox/ExcelBasicInputBox';\nimport { excelDownload } from '../../../../common/excelDownloadFunction';\nimport PaginationComponent from '../../../../component/Pagination/PaginationComponent';\nimport ExcelDownloadModal from '../../../../component/Modal/ExcelDownloadMoadal';\n\nconst BasicContainer = ({\n  page,\n  keyword,\n  option\n}) => {\n  const router = useRouter();\n  const {\n    0: excelOpen,\n    1: setExcelOpen\n  } = useState(false);\n  const {\n    0: excelUploadOpen,\n    1: setExcelUploadOpen\n  } = useState(false);\n  const {\n    0: basicRow,\n    1: setBasicRow\n  } = useState([{\n    name: \"\",\n    id: \"\"\n  }]);\n  const {\n    0: column,\n    1: setColumn\n  } = useState(columnlist[\"rawmaterial\"]);\n  const {\n    0: selectList,\n    1: setSelectList\n  } = useState(new Set());\n  const {\n    0: optionList,\n    1: setOptionList\n  } = useState(['고객사명', '모델명', 'CODE', '품명', '재질']);\n  const {\n    0: optionIndex,\n    1: setOptionIndex\n  } = useState(0);\n  const {\n    0: pageInfo,\n    1: setPageInfo\n  } = useState({\n    page: 1,\n    total: 1\n  });\n  useEffect(() => {\n    setOptionIndex(option);\n\n    if (keyword) {\n      SearchBasic(keyword, option, page).then(() => {\n        Notiflix.Loading.remove();\n      });\n    } else {\n      LoadBasic(page).then(() => {\n        Notiflix.Loading.remove();\n      });\n    }\n  }, [page, keyword, option]);\n\n  const loadAllSelectItems = async column => {\n    let tmpColumn = column.map(async v => {\n      if (v.selectList && v.selectList.length === 0) {\n        let tmpKey = v.key;\n\n        if (tmpKey === 'customer_id') {\n          tmpKey = 'customer';\n        } else if (tmpKey === 'cm_id') {\n          tmpKey = 'model';\n        }\n\n        let res;\n        res = await RequestMethod('get', `${tmpKey}List`, {\n          path: {\n            page: 1,\n            renderItem: MAX_VALUE\n          }\n        });\n        let pk = \"\";\n        res.results.info_list && res.results.info_list.length && Object.keys(res.results.info_list[0]).map(v => {\n          if (v.indexOf('_id') !== -1) {\n            pk = v;\n          }\n        });\n        return _objectSpread(_objectSpread({}, v), {}, {\n          selectList: [...res.results.info_list.map(value => {\n            return _objectSpread(_objectSpread({}, value), {}, {\n              name: tmpKey === 'model' ? value.model : value.name,\n              pk: value[pk]\n            });\n          })]\n        });\n      } else {\n        if (v.selectList) {\n          return _objectSpread(_objectSpread({}, v), {}, {\n            pk: v.unit_id\n          });\n        } else {\n          return v;\n        }\n      }\n    }); // if(type !== 'productprocess'){\n\n    Promise.all(tmpColumn).then(res => {\n      setColumn([...res.map(v => {\n        return _objectSpread(_objectSpread({}, v), {}, {\n          name: v.moddable ? v.name + '(필수)' : v.name\n        });\n      })]);\n    }); // }\n  };\n\n  const SaveBasic = async () => {\n    let res;\n    res = await RequestMethod('post', `rawmaterialSave`, {\n      ['raw_materials']: basicRow.map((row, i) => {\n        if (selectList.has(row.id)) {\n          let selectKey = [];\n          let additional = [];\n          column.map(v => {\n            if (v.selectList) {\n              selectKey.push(v.key);\n            }\n\n            if (v.type === 'additional') {\n              additional.push(v);\n            }\n          });\n          let selectData = {};\n          Object.keys(row).map(v => {\n            if (v.indexOf('PK') !== -1) {\n              selectData = _objectSpread(_objectSpread({}, selectData), {}, {\n                [v.split('PK')[0]]: row[v]\n              });\n            }\n\n            if (v === 'unitWeight') {\n              selectData = _objectSpread(_objectSpread({}, selectData), {}, {\n                unitWeight: Number(row['unitWeight'])\n              });\n            }\n\n            if (v === 'tmpId') {\n              selectData = _objectSpread(_objectSpread({}, selectData), {}, {\n                id: row['tmpId']\n              });\n            }\n          });\n          return _objectSpread(_objectSpread(_objectSpread({}, row), selectData), {}, {\n            customer_id: row.customer_idPK,\n            additional: [...additional.map(v => {\n              if (row[v.name]) {\n                return {\n                  id: v.id,\n                  title: v.name,\n                  value: row[v.name],\n                  unit: v.unit\n                };\n              }\n            }).filter(v => v)]\n          });\n        }\n      }).filter(v => v)\n    });\n\n    if (res) {\n      if (res.status === 200) {\n        Notiflix.Report.success('저장되었습니다.', '', '확인');\n\n        if (keyword) {\n          SearchBasic(keyword, option, page).then(() => {\n            Notiflix.Loading.remove();\n          });\n        } else {\n          LoadBasic(page).then(() => {\n            Notiflix.Loading.remove();\n          });\n        }\n      }\n    }\n  };\n\n  const LoadBasic = async page => {\n    Notiflix.Loading.circle();\n    const res = await RequestMethod('get', `rawmaterialList`, {\n      path: {\n        page: page || page !== 0 ? page : 1,\n        renderItem: 18\n      }\n    });\n\n    if (res && res.status === 200) {\n      if (res.results.totalPages < page) {\n        LoadBasic(page - 1).then(() => {\n          Notiflix.Loading.remove();\n        });\n      } else {\n        setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n          page: res.results.page,\n          total: res.results.totalPages\n        }));\n        cleanUpData(res);\n      }\n    } else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back();\n      });\n    }\n  };\n\n  const SearchBasic = async (keyword, option, isPaging) => {\n    Notiflix.Loading.circle();\n\n    if (!isPaging) {\n      setOptionIndex(option);\n    }\n\n    const res = await RequestMethod('get', `rawmaterialSearch`, {\n      path: {\n        page: isPaging !== null && isPaging !== void 0 ? isPaging : 1,\n        renderItem: 18\n      },\n      params: {\n        keyword: keyword !== null && keyword !== void 0 ? keyword : '',\n        opt: option !== null && option !== void 0 ? option : 0\n      }\n    });\n\n    if (res && res.status === 200) {\n      setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n        page: res.results.page,\n        total: res.results.totalPages\n      }));\n      cleanUpData(res);\n    }\n  };\n\n  const cleanUpBasicData = res => {\n    let tmpRow = [];\n    tmpRow = res.results.info_list;\n  };\n\n  const cleanUpData = res => {\n    let tmpColumn = columnlist['rawmaterial'];\n    let tmpRow = [];\n    tmpColumn = tmpColumn.map(column => {\n      let menuData;\n      res.results.menus && res.results.menus.map(menu => {\n        if (menu.colName === column.key) {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit,\n            moddable: !menu.moddable\n          };\n        } else if (menu.colName === 'id' && column.key === 'tmpId') {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit,\n            moddable: !menu.moddable\n          };\n        }\n      });\n\n      if (menuData) {\n        return _objectSpread(_objectSpread({}, column), menuData);\n      }\n    }).filter(v => v);\n    let additionalMenus = res.results.menus ? res.results.menus.map(menu => {\n      if (menu.colName === null) {\n        return {\n          id: menu.id,\n          name: menu.title,\n          width: menu.width,\n          key: menu.title,\n          editor: TextEditor,\n          type: 'additional',\n          unit: menu.unit\n        };\n      }\n    }).filter(v => v) : [];\n    tmpRow = res.results.info_list;\n    loadAllSelectItems([...tmpColumn, ...additionalMenus]);\n    let selectKey = \"\";\n    let additionalData = [];\n    tmpColumn.map(v => {\n      if (v.selectList) {\n        selectKey = v.key;\n      }\n    });\n    additionalMenus.map(v => {\n      if (v.type === 'additional') {\n        additionalData.push(v.key);\n      }\n    });\n    let pk = \"\";\n    Object.keys(tmpRow).map(v => {\n      if (v.indexOf('_id') !== -1) {\n        pk = v;\n      }\n    });\n    let tmpBasicRow = tmpRow.map((row, index) => {\n      let appendAdditional = {};\n      row.additional && row.additional.map(v => {\n        appendAdditional = _objectSpread(_objectSpread({}, appendAdditional), {}, {\n          [v.title]: v.value\n        });\n      });\n      let random_id = Math.random() * 1000;\n      return _objectSpread(_objectSpread({\n        rm_id: row.rm_id,\n        customer_id: row.model.customer.name,\n        customer_idPK: row.model.customer.customer_id,\n        cm_id: row.model.model,\n        cm_idPK: row.model.cm_id,\n        type: row.type,\n        code: row.code,\n        name: row.name,\n        texture: row.texture,\n        depth: row.depth,\n        width: row.width,\n        height: row.height\n      }, appendAdditional), {}, {\n        id: `rawmaterial_${random_id}`\n      });\n    });\n    setBasicRow([...tmpBasicRow]);\n  };\n\n  const downloadExcel = () => {\n    let tmpSelectList = [];\n    basicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id));\n    });\n    excelDownload(column, basicRow, `rawmaterial`, \"rawmaterial\", tmpSelectList);\n  };\n\n  const onClickHeaderButton = index => {\n    switch (index) {\n      case 0:\n        setExcelOpen(true);\n        break;\n\n      case 1:\n        router.push(`/mes/item/manage/rawmaterial`);\n        break;\n\n      case 2:\n        SaveBasic();\n        break;\n    }\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 9\n    }\n  }, __jsx(MenuNavigation, {\n    pageType: 'BASIC',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    style: {\n      paddingBottom: 40\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 13\n    }\n  }, __jsx(ProfileHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 17\n    }\n  }), __jsx(PageHeader, {\n    isSearch: true,\n    searchKeyword: keyword,\n    onChangeSearchKeyword: keyword => {\n      if (keyword) {\n        router.push(`/mes/basic/rawmaterial?page=1&keyword=${keyword}&opt=${optionIndex}`);\n      } else {\n        router.push(`/mes/basic/rawmaterial?page=1&keyword=`);\n      }\n    },\n    searchOptionList: optionList,\n    onChangeSearchOption: option => {\n      setOptionIndex(option);\n    },\n    optionIndex: optionIndex,\n    title: \"원자재 기본정보\",\n    buttons: ['엑셀로 받기', '항목관리', '저장하기'],\n    buttonsOnclick: onClickHeaderButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 17\n    }\n  }), __jsx(ExcelTable, {\n    editable: true,\n    resizable: true,\n    headerList: [SelectColumn, ...column],\n    row: basicRow // setRow={setBasicRow}\n    ,\n    setRow: e => {\n      let tmp = selectList;\n      e.map(v => {\n        if (v.isChange) tmp.add(v.id);\n      });\n      setSelectList(tmp);\n      setBasicRow(e);\n    },\n    selectList: selectList //@ts-ignore\n    ,\n    setSelectList: setSelectList,\n    height: basicRow.length * 40 >= 40 * 18 + 56 ? 40 * 19 : basicRow.length * 40 + 56,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 17\n    }\n  }), __jsx(PaginationComponent, {\n    currentPage: pageInfo.page,\n    totalPage: pageInfo.total,\n    setPage: page => {\n      if (keyword) {\n        router.push(`/mes/basic/rawmaterial?page=${page}&keyword=${keyword}&opt=${option}`);\n      } else {\n        router.push(`/mes/basic/rawmaterial?page=${page}`);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 17\n    }\n  })), __jsx(ExcelDownloadModal, {\n    isOpen: excelOpen,\n    column: column,\n    basicRow: basicRow,\n    filename: `원자재기본정보`,\n    sheetname: `원자재기본정보`,\n    selectList: selectList,\n    tab: 'ROLE_BASE_06',\n    setIsOpen: setExcelOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport const getServerSideProps = ctx => {\n  var _ctx$query$page, _ctx$query$keyword, _ctx$query$opt;\n\n  return {\n    props: {\n      page: (_ctx$query$page = ctx.query.page) !== null && _ctx$query$page !== void 0 ? _ctx$query$page : 1,\n      keyword: (_ctx$query$keyword = ctx.query.keyword) !== null && _ctx$query$keyword !== void 0 ? _ctx$query$keyword : \"\",\n      option: (_ctx$query$opt = ctx.query.opt) !== null && _ctx$query$opt !== void 0 ? _ctx$query$opt : 0\n    }\n  };\n}; // BasicContainer.getInitialProps = async ({ query }) => {\n//     let { page, keyword, opt } = query\n//     if (typeof page === 'string')\n//         page = parseInt(page);\n//     if (typeof opt === 'string')\n//         opt = parseInt(opt);\n//     return { page, keyword, option: opt };\n// }\n\nexport default BasicContainer;","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/basic/rawmaterial/index.tsx"],"names":["React","useEffect","useState","ExcelTable","MenuNavigation","ProfileHeader","PageHeader","SelectColumn","RequestMethod","columnlist","Notiflix","useRouter","MAX_VALUE","TextEditor","excelDownload","PaginationComponent","ExcelDownloadModal","BasicContainer","page","keyword","option","router","excelOpen","setExcelOpen","excelUploadOpen","setExcelUploadOpen","basicRow","setBasicRow","name","id","column","setColumn","selectList","setSelectList","Set","optionList","setOptionList","optionIndex","setOptionIndex","pageInfo","setPageInfo","total","SearchBasic","then","Loading","remove","LoadBasic","loadAllSelectItems","tmpColumn","map","v","length","tmpKey","key","res","path","renderItem","pk","results","info_list","Object","keys","indexOf","value","model","unit_id","Promise","all","moddable","SaveBasic","row","i","has","selectKey","additional","push","type","selectData","split","unitWeight","Number","customer_id","customer_idPK","title","unit","filter","status","Report","success","circle","totalPages","cleanUpData","state","failure","back","isPaging","params","opt","cleanUpBasicData","tmpRow","menuData","menus","menu","colName","width","tab","additionalMenus","editor","additionalData","tmpBasicRow","index","appendAdditional","random_id","Math","random","rm_id","customer","cm_id","cm_idPK","code","texture","depth","height","downloadExcel","tmpSelectList","onClickHeaderButton","display","paddingBottom","e","tmp","isChange","add","getServerSideProps","ctx","props","query"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport ExcelTable from '../../../../component/Excel/ExcelTable'\nimport MenuNavigation from '../../../../component/MenuNav/MenuNavigation'\nimport ProfileHeader from '../../../../component/Profile/ProfileHeader'\nimport PageHeader from '../../../../component/Header/Header'\n// @ts-ignore\nimport {SelectColumn} from 'react-data-grid'\nimport {IExcelHeaderType, IItemMenuType} from '../../../../common/@types/type'\nimport {RequestMethod} from '../../../../common/RequestFunctions'\nimport {columnlist} from \"../../../../common/columnInit\";\nimport Notiflix from \"notiflix\";\nimport {useRouter} from 'next/router'\nimport {MAX_VALUE} from '../../../../common/configset'\nimport DropDownEditor from '../../../../component/Dropdown/ExcelBasicDropdown'\nimport TextEditor from '../../../../component/InputBox/ExcelBasicInputBox'\nimport {excelDownload} from '../../../../common/excelDownloadFunction'\nimport {loadAll} from 'react-cookies'\nimport PaginationComponent from '../../../../component/Pagination/PaginationComponent'\nimport {NextPageContext} from 'next'\nimport ExcelDownloadModal from '../../../../component/Modal/ExcelDownloadMoadal'\nimport ExcelUploadModal from \"../../../../component/Modal/ExcelUploadModal\";\n\ninterface IProps {\n    children?: any\n    page?: number\n    keyword?: string\n    option?: number\n}\n\nconst BasicContainer = ({page, keyword, option}: IProps) => {\n    const router = useRouter()\n\n    const [excelOpen, setExcelOpen] = useState<boolean>(false)\n    const [excelUploadOpen, setExcelUploadOpen] = useState<boolean>(false)\n\n    const [basicRow, setBasicRow] = useState<Array<any>>([{\n        name: \"\", id: \"\"\n    }])\n\n    const [column, setColumn] = useState<Array<IExcelHeaderType>>(columnlist[\"rawmaterial\"]);\n    const [selectList, setSelectList] = useState<Set<number>>(new Set())\n    const [optionList, setOptionList] = useState<string[]>(['고객사명', '모델명', 'CODE', '품명', '재질'])\n    const [optionIndex, setOptionIndex] = useState<number>(0)\n\n    const [pageInfo, setPageInfo] = useState<{page: number, total: number}>({\n        page: 1,\n        total: 1\n    })\n\n    useEffect(() => {\n        setOptionIndex(option)\n        if(keyword){\n            SearchBasic(keyword, option, page).then(() => {\n                Notiflix.Loading.remove()\n            })\n        }else{\n            LoadBasic(page).then(() => {\n                Notiflix.Loading.remove()\n            })\n        }\n    }, [page, keyword, option])\n\n    const loadAllSelectItems = async (column: IExcelHeaderType[]) => {\n        let tmpColumn = column.map(async (v: any) => {\n            if(v.selectList && v.selectList.length === 0){\n                let tmpKey = v.key\n\n                if(tmpKey === 'customer_id'){\n                    tmpKey = 'customer'\n                }else if(tmpKey === 'cm_id'){\n                    tmpKey = 'model'\n                }\n                let res: any\n                    res = await RequestMethod('get', `${tmpKey}List`,{\n                        path: {\n                            page: 1,\n                            renderItem: MAX_VALUE,\n                        }\n                    })\n\n\n                    let pk = \"\";\n\n                    res.results.info_list && res.results.info_list.length && Object.keys(res.results.info_list[0]).map((v) => {\n                        if(v.indexOf('_id') !== -1){\n                            pk = v\n                        }\n                    })\n                    return {\n                        ...v,\n                        selectList: [...res.results.info_list.map((value: any) => {\n                            return {\n                                ...value,\n                                name: tmpKey === 'model' ? value.model : value.name,\n                                pk: value[pk]\n                            }\n                        })]\n                    }\n\n            }else{\n                if(v.selectList){\n                    return {\n                        ...v,\n                        pk: v.unit_id\n                    }\n                }else{\n                    return v\n                }\n            }\n        })\n\n        // if(type !== 'productprocess'){\n        Promise.all(tmpColumn).then(res => {\n            setColumn([...res.map(v=> {\n                return {\n                    ...v,\n                    name: v.moddable ? v.name+'(필수)' : v.name\n                }\n            })])\n        })\n        // }\n    }\n\n    const SaveBasic = async () => {\n        let res: any\n            res = await RequestMethod('post', `rawmaterialSave`,\n                {\n                    ['raw_materials']: basicRow.map((row, i) => {\n                        if(selectList.has(row.id)){\n                            let selectKey: string[] = []\n                            let additional:any[] = []\n                            column.map((v) => {\n                                if(v.selectList){\n                                    selectKey.push(v.key)\n                                }\n\n                                if(v.type === 'additional'){\n                                    additional.push(v)\n                                }\n                            })\n\n                            let selectData: any = {}\n\n                            Object.keys(row).map(v => {\n                                if(v.indexOf('PK') !== -1) {\n                                    selectData = {\n                                        ...selectData,\n                                        [v.split('PK')[0]]: row[v]\n                                    }\n                                }\n\n                                if(v === 'unitWeight') {\n                                    selectData = {\n                                        ...selectData,\n                                        unitWeight: Number(row['unitWeight'])\n                                    }\n                                }\n\n                                if(v === 'tmpId') {\n                                    selectData = {\n                                        ...selectData,\n                                        id: row['tmpId']\n                                    }\n                                }\n                            })\n\n                            return {\n                                ...row,\n                                ...selectData,\n                                customer_id: row.customer_idPK,\n                                additional: [\n                                    ...additional.map(v => {\n                                        if(row[v.name]) {\n                                            return {\n                                                id: v.id,\n                                                title: v.name,\n                                                value: row[v.name],\n                                                unit: v.unit\n                                            }\n                                        }\n                                    }).filter((v) => v)\n                                ]\n                            }\n\n                        }\n                    }).filter((v) => v)\n                })\n\n\n        if(res){\n            if(res.status === 200){\n                Notiflix.Report.success('저장되었습니다.','','확인');\n                if(keyword){\n                    SearchBasic(keyword, option, page).then(() => {\n                        Notiflix.Loading.remove()\n                    })\n                }else{\n                    LoadBasic(page).then(() => {\n                        Notiflix.Loading.remove()\n                    })\n                }\n            }\n        }\n    }\n\n\n    const LoadBasic = async (page?: number) => {\n        Notiflix.Loading.circle()\n            const res = await RequestMethod('get', `rawmaterialList`,{\n                path: {\n                    page: (page || page !== 0) ? page : 1,\n                    renderItem: 18,\n                }\n            })\n\n            if(res && res.status === 200){\n                if(res.results.totalPages < page){\n                    LoadBasic(page - 1).then(() => {\n                        Notiflix.Loading.remove()\n                    })\n                }else{\n                    setPageInfo({\n                        ...pageInfo,\n                        page: res.results.page,\n                        total: res.results.totalPages\n                    })\n                    cleanUpData(res)\n                }\n            }else if (res.state === 401) {\n                Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n                    router.back()\n                })\n            }\n\n    }\n\n    const SearchBasic = async (keyword: any, option: number, isPaging?: number) => {\n        Notiflix.Loading.circle()\n        if(!isPaging){\n            setOptionIndex(option)\n        }\n        const res = await RequestMethod('get', `rawmaterialSearch`,{\n            path: {\n                page: isPaging ?? 1,\n                renderItem: 18,\n            },\n            params: {\n                keyword: keyword ?? '',\n                opt: option ?? 0\n            }\n        })\n\n        if(res && res.status === 200){\n            setPageInfo({\n                ...pageInfo,\n                page: res.results.page,\n                total: res.results.totalPages\n            })\n            cleanUpData(res)\n        }\n    }\n\n    const cleanUpBasicData = (res:any) => {\n        let tmpRow = []\n        tmpRow = res.results.info_list\n    }\n\n    const cleanUpData = (res: any) => {\n        let tmpColumn = columnlist['rawmaterial'];\n        let tmpRow = []\n        tmpColumn = tmpColumn.map((column: any) => {\n            let menuData: object | undefined;\n            res.results.menus && res.results.menus.map((menu: any) => {\n                if(menu.colName === column.key){\n                    menuData = {\n                        id: menu.id,\n                        name: menu.title,\n                        width: menu.width,\n                        tab:menu.tab,\n                        unit:menu.unit,\n                        moddable: !menu.moddable\n                    }\n                } else if(menu.colName === 'id' && column.key === 'tmpId'){\n                    menuData = {\n                        id: menu.id,\n                        name: menu.title,\n                        width: menu.width,\n                        tab:menu.tab,\n                        unit:menu.unit,\n                        moddable: !menu.moddable\n                    }\n                }\n            })\n\n            if(menuData){\n                return {\n                    ...column,\n                    ...menuData\n                }\n            }\n        }).filter((v:any) => v)\n\n        let additionalMenus = res.results.menus ? res.results.menus.map((menu:any) => {\n            if(menu.colName === null){\n                return {\n                    id: menu.id,\n                    name: menu.title,\n                    width: menu.width,\n                    key: menu.title,\n                    editor: TextEditor,\n                    type: 'additional',\n                    unit: menu.unit\n                }\n            }\n        }).filter((v: any) => v) : []\n\n\n        tmpRow = res.results.info_list\n\n            loadAllSelectItems( [\n                ...tmpColumn,\n                ...additionalMenus\n            ] )\n\n\n        let selectKey = \"\"\n        let additionalData: any[] = []\n        tmpColumn.map((v: any) => {\n            if(v.selectList){\n                selectKey = v.key\n            }\n        })\n\n        additionalMenus.map((v: any) => {\n            if(v.type === 'additional'){\n                additionalData.push(v.key)\n            }\n        })\n\n        let pk = \"\";\n        Object.keys(tmpRow).map((v) => {\n            if(v.indexOf('_id') !== -1){\n                pk = v\n            }\n        })\n\n        let tmpBasicRow = tmpRow.map((row: any, index: number) => {\n\n            let appendAdditional: any = {}\n\n            row.additional && row.additional.map((v: any) => {\n                appendAdditional = {\n                    ...appendAdditional,\n                    [v.title]: v.value\n                }\n            })\n            let random_id = Math.random()*1000;\n            return {\n                rm_id:row.rm_id,\n                customer_id:row.model.customer.name,\n                customer_idPK: row.model.customer.customer_id,\n                cm_id:row.model.model,\n                cm_idPK:row.model.cm_id,\n                type:row.type,\n                code: row.code,\n                name: row.name,\n                texture: row.texture,\n                depth: row.depth,\n                width: row.width,\n                height: row.height,\n                ...appendAdditional,\n                id: `rawmaterial_${random_id}`,\n            }\n        })\n\n        setBasicRow([...tmpBasicRow])\n    }\n\n    const downloadExcel = () => {\n        let tmpSelectList: boolean[] = []\n        basicRow.map(row => {\n            tmpSelectList.push(selectList.has(row.id))\n        })\n        excelDownload(column, basicRow, `rawmaterial`, \"rawmaterial\", tmpSelectList)\n    }\n\n    const onClickHeaderButton = (index: number) => {\n        switch(index){\n            case 0:\n                setExcelOpen(true)\n                break;\n            case 1:\n                router.push(`/mes/item/manage/rawmaterial`)\n                break;\n            case 2:\n                SaveBasic()\n                break;\n        }\n    }\n\n    return (\n        <div style={{display: 'flex', }}>\n            <MenuNavigation pageType={'BASIC'}/>\n            <div style={{paddingBottom: 40}}>\n                <ProfileHeader/>\n                <PageHeader\n                    isSearch\n                    searchKeyword={keyword}\n                    onChangeSearchKeyword={(keyword) => {\n                        if(keyword){\n                            router.push(`/mes/basic/rawmaterial?page=1&keyword=${keyword}&opt=${optionIndex}`)\n                        }else{\n                            router.push(`/mes/basic/rawmaterial?page=1&keyword=`)\n                        }\n                    }}\n                    searchOptionList={optionList}\n                    onChangeSearchOption={(option) => {\n                        setOptionIndex(option)\n                    }}\n                    optionIndex={optionIndex}\n                    title={\"원자재 기본정보\"}\n                    buttons={\n                             ['엑셀로 받기', '항목관리', '저장하기']\n                    }\n                    buttonsOnclick={onClickHeaderButton}\n                />\n                <ExcelTable\n                    editable\n                    resizable\n                    headerList={[\n                        SelectColumn,\n                        ...column\n                    ]}\n                    row={basicRow}\n                    // setRow={setBasicRow}\n                    setRow={(e) => {\n                        let tmp: Set<any> = selectList\n                        e.map(v => {\n                            if(v.isChange) tmp.add(v.id)\n                        })\n                        setSelectList(tmp)\n                        setBasicRow(e)\n                    }}\n                    selectList={selectList}\n                    //@ts-ignore\n                    setSelectList={setSelectList}\n                    height={basicRow.length * 40 >= 40*18+56 ? 40*19 : basicRow.length * 40 + 56}\n                />\n                <PaginationComponent\n                  currentPage={pageInfo.page}\n                  totalPage={pageInfo.total}\n                  setPage={(page) => {\n                      if(keyword){\n                          router.push(`/mes/basic/rawmaterial?page=${page}&keyword=${keyword}&opt=${option}`)\n                      }else{\n                          router.push(`/mes/basic/rawmaterial?page=${page}`)\n                      }\n                  }}\n                />\n            </div>\n            <ExcelDownloadModal\n              isOpen={excelOpen}\n              column={column}\n              basicRow={basicRow}\n              filename={`원자재기본정보`}\n              sheetname={`원자재기본정보`}\n              selectList={selectList}\n              tab={'ROLE_BASE_06'}\n              setIsOpen={setExcelOpen}\n            />\n        </div>\n    );\n}\n\nexport const getServerSideProps = (ctx: NextPageContext) => {\n    return {\n        props: {\n            page: ctx.query.page ?? 1,\n            keyword: ctx.query.keyword ?? \"\",\n            option: ctx.query.opt ?? 0,\n        }\n    }\n}\n\n// BasicContainer.getInitialProps = async ({ query }) => {\n//     let { page, keyword, opt } = query\n//     if (typeof page === 'string')\n//         page = parseInt(page);\n//     if (typeof opt === 'string')\n//         opt = parseInt(opt);\n//     return { page, keyword, option: opt };\n// }\n\nexport default BasicContainer;\n"]},"metadata":{},"sourceType":"module"}