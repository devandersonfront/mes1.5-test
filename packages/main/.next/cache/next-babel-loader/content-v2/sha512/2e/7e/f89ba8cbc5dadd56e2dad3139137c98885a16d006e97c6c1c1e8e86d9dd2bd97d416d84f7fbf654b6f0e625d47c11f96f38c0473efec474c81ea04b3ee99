{"ast":null,"code":"import _toConsumableArray from \"/Users/user/Desktop/sizl/mono_pop/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/user/Desktop/sizl/mono_pop/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/Users/user/Desktop/sizl/mono_pop/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/user/Desktop/sizl/mono_pop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/operaction/register.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport ExcelTable from '../../../component/Excel/ExcelTable';\nimport MenuNavigation from '../../../component/MenuNav/MenuNavigation';\nimport ProfileHeader from '../../../component/Profile/ProfileHeader';\nimport PageHeader from '../../../component/Header/Header'; // @ts-ignore\n\nimport { SelectColumn } from 'react-data-grid';\nimport { RequestMethod } from '../../../common/RequestFunctions';\nimport { columnlist } from \"../../../common/columnInit\";\nimport Notiflix from \"notiflix\";\nimport { useRouter } from 'next/router';\nimport { MAX_VALUE } from '../../../common/configset';\nimport TextEditor from '../../../component/InputBox/ExcelBasicInputBox';\nimport { excelDownload } from '../../../common/excelDownloadFunction';\nimport moment from 'moment';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { delete_all_machine_list, delete_machine_list, insert_machine_list, insert_machine_list_index } from \"../../../reducer/machineSelect\";\nvar title = '작업지시서 등록';\nvar optList = ['고객사명', '모델명', 'CODE', '품명', '공정', '기계', 'Lot번호'];\n\nvar BasicContainer = function BasicContainer(_ref) {\n  _s();\n\n  var page = _ref.page,\n      keyword = _ref.keyword,\n      option = _ref.option;\n  var router = useRouter();\n  var dispatch = useDispatch();\n  var selector = useSelector(function (state) {\n    return state.MachineSelectReducer;\n  });\n\n  var _useState = useState([{\n    name: \"\",\n    id: \"\",\n    index: 1,\n    date: moment().format('YYYY-MM-DD')\n  }]),\n      basicRow = _useState[0],\n      setBasicRow = _useState[1];\n\n  var _useState2 = useState(columnlist.operationRegister),\n      column = _useState2[0],\n      setColumn = _useState2[1];\n\n  var _useState3 = useState(new Set()),\n      selectList = _useState3[0],\n      setSelectList = _useState3[1];\n\n  var _useState4 = useState(optList),\n      optionList = _useState4[0],\n      setOptionList = _useState4[1];\n\n  var _useState5 = useState(0),\n      optionIndex = _useState5[0],\n      setOptionIndex = _useState5[1];\n\n  var _useState6 = useState(0),\n      isLoad = _useState6[0],\n      setIsLoad = _useState6[1];\n\n  var _useState7 = useState(0),\n      isGoal = _useState7[0],\n      setIsGoal = _useState7[1];\n\n  var _useState8 = useState({\n    page: 1,\n    total: 1\n  }),\n      pageInfo = _useState8[0],\n      setPageInfo = _useState8[1];\n\n  useEffect(function () {\n    // setOptionIndex(option)\n    // if(keyword){\n    //   SearchBasic(keyword, option, page)\n    // }else{\n    //   LoadBasic(page).then(() => {})\n    // }\n    // loadAllSelectItems(column).then((column) => {})\n    LoadMenu();\n  }, [page, keyword, option]);\n  useEffect(function () {\n    console.log(basicRow[0].pp_id);\n\n    if (basicRow[0].pp_id && basicRow[0].pp_id !== isLoad) {\n      ProductProcessSearch(basicRow[0].pp_id);\n    }\n  }, [basicRow]);\n  useEffect(function () {\n    dispatch(delete_all_machine_list());\n  }, []);\n\n  var ProductProcessSearch = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(pp_id) {\n      var res, recentRes, tmpRow;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return RequestMethod('get', \"productprocessList\", {\n                path: {\n                  pp_id: pp_id\n                }\n              });\n\n            case 2:\n              res = _context.sent;\n              _context.next = 5;\n              return RequestMethod('get', \"operationRecent\", {\n                path: {\n                  pp_id: pp_id\n                }\n              });\n\n            case 5:\n              recentRes = _context.sent;\n\n              if (res && res.status === 200 && recentRes && recentRes.status === 200) {\n                Notiflix.Report.info(\"\", recentRes.message, \"확인\");\n                tmpRow = [basicRow[0]];\n                res.results.processes.map(function (v, i) {\n                  var random_id = Math.random() * 1000;\n                  recentRes.results.processes.map(function (value, i) {\n                    if (value.seq === v.seq) {\n                      v = _objectSpread(_objectSpread({}, value), v);\n                    }\n                  });\n\n                  if (i === 0) {\n                    tmpRow[0] = _objectSpread(_objectSpread(_objectSpread({}, tmpRow[0]), v), {}, {\n                      process_id: v.process.name,\n                      process_idPK: v.process.process_id,\n                      mold: v.mold,\n                      id: \"operation_\".concat(random_id),\n                      machine_id: v.machine ? v.machine.name : null,\n                      machine_idPK: v.machine ? v.machine.machine_id : null\n                    });\n                  } else {\n                    tmpRow.push(_objectSpread(_objectSpread({}, v), {}, {\n                      process_id: v.process.name,\n                      process_idPK: v.process.process_id,\n                      mold: v.mold_name,\n                      id: \"operation_\".concat(random_id),\n                      machine_id: v.machine ? v.machine.name : null,\n                      machine_idPK: v.machine ? v.machine.machine_id : null\n                    }));\n                  }\n                });\n                setIsLoad(pp_id);\n                setBasicRow([].concat(tmpRow));\n                dispatch(insert_machine_list({\n                  process_length: tmpRow.length,\n                  machineList: tmpRow\n                }));\n              }\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function ProductProcessSearch(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var loadAllSelectItems = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(column) {\n      var tmpColumn;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              tmpColumn = column.map( /*#__PURE__*/function () {\n                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(v) {\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          if (!v.selectList) {\n                            _context2.next = 4;\n                            break;\n                          }\n\n                          return _context2.abrupt(\"return\", _objectSpread(_objectSpread({}, v), {}, {\n                            pk: v.unit_id\n                          }));\n\n                        case 4:\n                          return _context2.abrupt(\"return\", v);\n\n                        case 5:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }));\n\n                return function (_x3) {\n                  return _ref4.apply(this, arguments);\n                };\n              }());\n              Promise.all(tmpColumn).then(function (res) {\n                setColumn(_toConsumableArray(res.map(function (v) {\n                  return _objectSpread({}, v);\n                })));\n              });\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function loadAllSelectItems(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var SaveBasic = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var processesSetting, res;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              processesSetting = [];\n              selector.machineList.map(function (v, i) {\n                processesSetting.push(_objectSpread(_objectSpread({}, v), {}, {\n                  process_id: v.process_idPK,\n                  machine_id: typeof v.machine_id === \"string\" ? v.machine_idPK : v.machine_id\n                }));\n              });\n              _context4.next = 4;\n              return RequestMethod('post', \"operationSave\", {\n                operation: {\n                  date: selector.machineList[0].date,\n                  customer_id: selector.machineList[0].customer_idPK,\n                  cm_id: selector.machineList[0].cm_idPK,\n                  product_id: selector.machineList[0].product_id,\n                  processes: selector.machineList.map(function (row, i) {\n                    if (selectList.has(row.id)) {\n                      var additional = [];\n                      column.map(function (v) {\n                        if (v.type === 'additional') {\n                          additional.push(v);\n                        }\n                      });\n                      var selectData = {};\n                      return _objectSpread(_objectSpread(_objectSpread({}, row), selectData), {}, {\n                        id: row.tmpId,\n                        // seq: i+1,\n                        authority: row.authorityPK,\n                        last: basicRow.length - 1 === i ? true : false,\n                        machine_id: row.machine_idPK,\n                        process_id: row.process_idPK,\n                        ln_id: row.ln_idPK,\n                        additional: _toConsumableArray(additional.map(function (v) {\n                          if (row[v.name]) {\n                            return {\n                              id: v.id,\n                              title: v.name,\n                              value: row[v.name],\n                              unit: v.unit\n                            };\n                          }\n                        }).filter(function (v) {\n                          return v;\n                        }))\n                      });\n                    }\n                  }).filter(function (v) {\n                    return v;\n                  })\n                }\n              });\n\n            case 4:\n              res = _context4.sent;\n\n              if (res) {\n                if (res.status === 200) {\n                  Notiflix.Report.success('저장되었습니다.', '', '확인');\n                }\n              }\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function SaveBasic() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var DeleteBasic = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var tmpRow;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              tmpRow = [];\n              tmpRow = basicRow.map(function (v) {\n                if (selectList.has(v.id)) {\n                  return;\n                }\n\n                return v;\n              }).filter(function (v) {\n                return v;\n              }).map(function (v, index) {\n                return _objectSpread(_objectSpread({}, v), {}, {\n                  seq: index + 1\n                });\n              });\n\n              if (tmpRow.length > 0 && selectList.size > 0) {\n                // selector.machineList.splice(selectList, 1);\n                dispatch(delete_machine_list());\n                Notiflix.Report.success(\"삭제되었습니다.\", \"\", \"확인\");\n                setBasicRow(_toConsumableArray(tmpRow));\n              } else {\n                Notiflix.Report.warning(\"1개 이상의 작업이 필요합니다!\", \"\", \"확인\");\n              }\n\n            case 3:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function DeleteBasic() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  var loadLotInfo = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              Notiflix.Loading.circle();\n              _context6.next = 3;\n              return RequestMethod('get', \"rawinSearch\", {\n                path: {\n                  page: page,\n                  renderItem: MAX_VALUE,\n                  customer_id: basicRow[0].customer_idPK,\n                  cm_id: basicRow[0].cm_idPK,\n                  rm_id: basicRow[0].rm_id\n                },\n                params: {\n                  keyword: keyword !== null && keyword !== void 0 ? keyword : '',\n                  opt: option !== null && option !== void 0 ? option : 0,\n                  nz: true\n                }\n              });\n\n            case 3:\n              res = _context6.sent;\n              return _context6.abrupt(\"return\", res.results.info_list.length);\n\n            case 5:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function loadLotInfo() {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  var LoadMenu = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      var res, tmpColumn;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return RequestMethod('get', \"itemList\", {\n                path: {\n                  tab: 'ROLE_PROD_01'\n                }\n              });\n\n            case 2:\n              res = _context7.sent;\n\n              if (res && res.status === 200) {\n                tmpColumn = column;\n                tmpColumn = tmpColumn.map(function (column) {\n                  var menuData;\n                  res.results.bases && res.results.bases.map(function (menu) {\n                    if (menu.colName === column.key) {\n                      menuData = {\n                        id: menu.mi_id,\n                        name: menu.title,\n                        width: menu.width,\n                        tab: 'ROLE_PROD_01',\n                        unit: menu.unit,\n                        moddable: !menu.moddable\n                      };\n                    } else if (menu.colName === 'id' && column.key === 'tmpId') {\n                      menuData = {\n                        id: menu.mi_id,\n                        name: menu.title,\n                        width: menu.width,\n                        tab: 'ROLE_PROD_01',\n                        unit: menu.unit,\n                        moddable: !menu.moddable\n                      };\n                    }\n                  });\n\n                  if (menuData) {\n                    return _objectSpread(_objectSpread({}, column), menuData);\n                  }\n                }).filter(function (v) {\n                  return v;\n                });\n                loadAllSelectItems(tmpColumn);\n              } else if (res.state === 401) {\n                Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', function () {\n                  router.back();\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function LoadMenu() {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n\n  var changeRow = function changeRow(row) {\n    var tmpData = {};\n    return _objectSpread({\n      ln_id: row.ln_id,\n      rm_id: row.raw_material.rm_id,\n      customer_id: row.raw_material.model.customer.name,\n      cm_id: row.raw_material.model.model,\n      code: row.raw_material.code,\n      name: row.raw_material.name,\n      texture: row.raw_material.texture,\n      depth: row.raw_material.depth,\n      width: row.raw_material.width,\n      height: row.raw_material.height,\n      type: row.raw_material.type,\n      amount: row.amount,\n      date: row.date,\n      number: row.number\n    }, tmpData);\n  };\n\n  var cleanUpData = function cleanUpData(res) {\n    var tmpColumn = columnlist.operationRegister;\n    var tmpRow = [];\n    tmpColumn = tmpColumn.map(function (column) {\n      var menuData;\n      res.results.menus && res.results.menus.map(function (menu) {\n        if (menu.colName === column.key) {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit,\n            moddable: !menu.moddable\n          };\n        } else if (menu.colName === 'id' && column.key === 'tmpId') {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit,\n            moddable: !menu.moddable\n          };\n        }\n      });\n\n      if (menuData) {\n        return _objectSpread(_objectSpread({}, column), menuData);\n      }\n    }).filter(function (v) {\n      return v;\n    });\n    loadAllSelectItems(tmpColumn);\n    var additionalMenus = res.results.menus ? res.results.menus.map(function (menu) {\n      if (menu.colName === null) {\n        return {\n          id: menu.id,\n          name: menu.title,\n          width: menu.width,\n          key: menu.title,\n          editor: TextEditor,\n          type: 'additional',\n          unit: menu.unit\n        };\n      }\n    }).filter(function (v) {\n      return v;\n    }) : [];\n    tmpRow = res.results.info_list;\n    var additionalData = [];\n    additionalMenus.map(function (v) {\n      if (v.type === 'additional') {\n        additionalData.push(v.key);\n      }\n    });\n    var tmpBasicRow = tmpRow.map(function (row, index) {\n      var realTableData = changeRow(row);\n      var appendAdditional = {};\n      row.additional && row.additional.map(function (v) {\n        appendAdditional = _objectSpread(_objectSpread({}, appendAdditional), {}, _defineProperty({}, v.title, v.value));\n      });\n      var random_id = Math.random() * 1000;\n      return _objectSpread(_objectSpread(_objectSpread({}, realTableData), appendAdditional), {}, {\n        id: \"rawinput_\".concat(random_id)\n      });\n    });\n    setBasicRow(_toConsumableArray(tmpBasicRow));\n  };\n\n  var downloadExcel = function downloadExcel() {\n    var tmpSelectList = [];\n    basicRow.map(function (row) {\n      tmpSelectList.push(selectList.has(row.id));\n    });\n    excelDownload(column, basicRow, \"\\uC791\\uC5C5\\uC9C0\\uC2DC\\uC11C\\uB4F1\\uB85D\", '작업지시서등록', tmpSelectList);\n  };\n\n  var onClickHeaderButton = function onClickHeaderButton(index) {\n    switch (index) {\n      case 0:\n        downloadExcel();\n        break;\n\n      case 1:\n        loadLotInfo().then(function (lotLength) {\n          Notiflix.Loading.remove();\n\n          if (!selector.machineList[0].product_id) {\n            Notiflix.Report.failure('저장 실패', '품목을 선택해주세요', '확인');\n            return;\n          } else if (!selector.machineList[0].goal && selector.machineList[0].goal !== 0 || selector.machineList[0].seq !== 1 || !selectList.has(selector.machineList[0].id)) {\n            // Notiflix.Report.failure('저장 실패', '목표 생산량을 입력해주세요', '확인', )\n            SaveBasic();\n            return;\n          }\n\n          Notiflix.Confirm.show('저장하시겠습니까?', \"\\uC81C\\uD488 (\".concat(selector.machineList[0].code, \")\\uC5D0 \\uB300\\uD55C Lot \").concat(lotLength, \"\\uAC1C\\uAC00 \\uC874\\uC7AC\\uD569\\uB2C8\\uB2E4. \\uC785\\uB825\\uD558\\uC2E0 \").concat(selector.machineList[0].goal, \"\\uC774 \\uB9DE\\uC2B5\\uB2C8\\uAE4C?\"), '저장', '취소', function () {\n            SaveBasic();\n          }, function () {});\n        });\n        break;\n\n      case 2:\n        Notiflix.Confirm.show(\"경고\", \"삭제하시겠습니까?\", \"확인\", \"취소\", function () {\n          DeleteBasic();\n        }, function () {});\n        break;\n    }\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 7\n    }\n  }, __jsx(MenuNavigation, {\n    pageType: 'MES',\n    subType: 0,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    style: {\n      paddingBottom: 40\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 9\n    }\n  }, __jsx(ProfileHeader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 11\n    }\n  }), __jsx(PageHeader, {\n    title: title,\n    buttons: ['엑셀로 받기', '저장하기', '삭제'],\n    buttonsOnclick: onClickHeaderButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 11\n    }\n  }), __jsx(ExcelTable, {\n    editable: true,\n    resizable: true,\n    headerList: [SelectColumn].concat(_toConsumableArray(column)),\n    row: selector.machineList // row={basicRow}\n    // setRow={setBasicRow}\n    ,\n    setRow: function setRow(e) {\n      var tmp = selectList;\n      e.map(function (v) {\n        if (v.isChange) tmp.add(v.id);\n      });\n      var tmpRow = e;\n      var tmpSelect = selectList;\n\n      if (e.length > 1 && e[1].goal && e[1].goal !== isGoal) {\n        setIsGoal(e[1].goal);\n        tmpRow = tmpRow.map(function (v, i) {\n          tmpSelect.add(v.id);\n\n          if (i === 0) {\n            return _objectSpread(_objectSpread({}, v), {}, {\n              goal: Number(e[0].goal)\n            });\n          } else {\n            return _objectSpread(_objectSpread({}, v), {}, {\n              goal: Number(e[1].goal)\n            });\n          }\n        });\n        console.log(tmpRow);\n        setSelectList(tmpSelect);\n      }\n\n      setSelectList(tmp);\n      console.log(tmpRow);\n      setBasicRow(_toConsumableArray(tmpRow)); // dispatch(insert_machine_list({...selector, machineList:[...tmpRow]}))\n    },\n    setSelectRow: function setSelectRow(e) {\n      dispatch(insert_machine_list_index(e));\n    },\n    selectList: selectList //@ts-ignore\n    ,\n    setSelectList: setSelectList,\n    height: basicRow.length * 40 >= 40 * 18 + 40 ? 40 * 18 : basicRow.length * 40 + 56,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 11\n    }\n  })));\n};\n\n_s(BasicContainer, \"gZbONn5REBX9kNN2Mm584FoUQP0=\", false, function () {\n  return [useRouter, useDispatch, useSelector];\n});\n\n_c = BasicContainer;\n// BasicContainer.getInitialProps = async ({ query }) => {\n//   let { page, keyword, opt } = query\n//   if (typeof page === 'string')\n//     page = parseInt(page);\n//   if (typeof opt === 'string')\n//     opt = parseInt(opt);\n//   return { page, keyword, option: opt };\n// }\nexport var __N_SSP = true;\nexport default BasicContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"BasicContainer\");","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/operaction/register.tsx"],"names":["React","useEffect","useState","ExcelTable","MenuNavigation","ProfileHeader","PageHeader","SelectColumn","RequestMethod","columnlist","Notiflix","useRouter","MAX_VALUE","TextEditor","excelDownload","moment","useDispatch","useSelector","delete_all_machine_list","delete_machine_list","insert_machine_list","insert_machine_list_index","title","optList","BasicContainer","page","keyword","option","router","dispatch","selector","state","MachineSelectReducer","name","id","index","date","format","basicRow","setBasicRow","operationRegister","column","setColumn","Set","selectList","setSelectList","optionList","setOptionList","optionIndex","setOptionIndex","isLoad","setIsLoad","isGoal","setIsGoal","total","pageInfo","setPageInfo","LoadMenu","console","log","pp_id","ProductProcessSearch","path","res","recentRes","status","Report","info","message","tmpRow","results","processes","map","v","i","random_id","Math","random","value","seq","process_id","process","process_idPK","mold","machine_id","machine","machine_idPK","push","mold_name","process_length","length","machineList","loadAllSelectItems","tmpColumn","pk","unit_id","Promise","all","then","SaveBasic","processesSetting","operation","customer_id","customer_idPK","cm_id","cm_idPK","product_id","row","has","additional","type","selectData","tmpId","authority","authorityPK","last","ln_id","ln_idPK","unit","filter","success","DeleteBasic","size","warning","loadLotInfo","Loading","circle","renderItem","rm_id","params","opt","nz","info_list","tab","menuData","bases","menu","colName","key","mi_id","width","moddable","failure","back","changeRow","tmpData","raw_material","model","customer","code","texture","depth","height","amount","number","cleanUpData","menus","additionalMenus","editor","additionalData","tmpBasicRow","realTableData","appendAdditional","downloadExcel","tmpSelectList","onClickHeaderButton","lotLength","remove","goal","Confirm","show","display","paddingBottom","e","tmp","isChange","add","tmpSelect","Number"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport ExcelTable from '../../../component/Excel/ExcelTable'\nimport MenuNavigation from '../../../component/MenuNav/MenuNavigation'\nimport ProfileHeader from '../../../component/Profile/ProfileHeader'\nimport PageHeader from '../../../component/Header/Header'\n// @ts-ignore\nimport {SelectColumn} from 'react-data-grid'\nimport {IExcelHeaderType, IItemMenuType} from '../../../common/@types/type'\nimport {RequestMethod} from '../../../common/RequestFunctions'\nimport {columnlist} from \"../../../common/columnInit\";\nimport Notiflix from \"notiflix\";\nimport {useRouter} from 'next/router'\nimport {MAX_VALUE} from '../../../common/configset'\nimport DropDownEditor from '../../../component/Dropdown/ExcelBasicDropdown'\nimport TextEditor from '../../../component/InputBox/ExcelBasicInputBox'\nimport {excelDownload} from '../../../common/excelDownloadFunction'\nimport {loadAll} from 'react-cookies'\nimport PaginationComponent from '../../../component/Pagination/PaginationComponent'\nimport {NextPageContext} from 'next'\nimport moment from 'moment'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootState} from \"../../../reducer\";\nimport {\n  delete_all_machine_list,\n  delete_machine_list,\n  insert_machine_list,\n  insert_machine_list_index\n} from \"../../../reducer/machineSelect\";\n\nconst title = '작업지시서 등록'\nconst optList = ['고객사명', '모델명', 'CODE', '품명', '공정', '기계', 'Lot번호']\n\ninterface IProps {\n  children?: any\n  page?: number\n  keyword?: string\n  option?: number\n}\n\nconst BasicContainer = ({page, keyword, option}: IProps) => {\n  const router = useRouter()\n\n  const dispatch = useDispatch();\n  const selector = useSelector((state:RootState) => state.MachineSelectReducer);\n\n  const [basicRow, setBasicRow] = useState<Array<any>>([{\n    name: \"\", id: \"\", index: 1, date: moment().format('YYYY-MM-DD')\n  }])\n  const [column, setColumn] = useState<Array<IExcelHeaderType>>(columnlist.operationRegister)\n  const [selectList, setSelectList] = useState<Set<any>>(new Set())\n  const [optionList, setOptionList] = useState<string[]>(optList)\n  const [optionIndex, setOptionIndex] = useState<number>(0)\n  const [isLoad, setIsLoad] = useState<number>(0)\n  const [isGoal, setIsGoal] = useState<number>(0)\n\n  const [pageInfo, setPageInfo] = useState<{page: number, total: number}>({\n    page: 1,\n    total: 1\n  })\n  useEffect(() => {\n    // setOptionIndex(option)\n    // if(keyword){\n    //   SearchBasic(keyword, option, page)\n    // }else{\n    //   LoadBasic(page).then(() => {})\n    // }\n    // loadAllSelectItems(column).then((column) => {})\n    LoadMenu()\n  }, [page, keyword, option])\n\n  useEffect(() => {\n    console.log(basicRow[0].pp_id)\n    if(basicRow[0].pp_id && basicRow[0].pp_id !== isLoad){\n      ProductProcessSearch(basicRow[0].pp_id)\n\n    }\n\n  }, [basicRow])\n\n\n  useEffect(()=>{\n    dispatch(delete_all_machine_list());\n  },[])\n  const ProductProcessSearch = async (pp_id: number) => {\n    const res = await RequestMethod('get', `productprocessList`,{\n      path: {\n        pp_id\n      }\n    })\n\n    const recentRes = await RequestMethod('get', `operationRecent`,{\n      path: {\n        pp_id\n      }\n    })\n\n    if(res && res.status === 200 && recentRes && recentRes.status === 200) {\n      Notiflix.Report.info(\"\",recentRes.message,\"확인\");\n      let tmpRow = [basicRow[0]]\n\n      res.results.processes.map((v, i) => {\n        const random_id = Math.random()*1000\n        recentRes.results.processes.map((value,i)=>{\n          if(value.seq === v.seq){\n            v = {...value, ...v}\n          }\n        })\n        if(i === 0){\n          tmpRow[0] = {\n            ...tmpRow[0],\n            ...v,\n            process_id: v.process.name,\n            process_idPK: v.process.process_id,\n            mold: v.mold,\n            id: `operation_${random_id}`,\n            machine_id:v.machine ? v.machine.name : null,\n            machine_idPK:v.machine? v.machine.machine_id : null\n          }\n        }else{\n          tmpRow.push({\n            ...v,\n            process_id: v.process.name,\n            process_idPK: v.process.process_id,\n            mold: v.mold_name,\n            id: `operation_${random_id}`,\n            machine_id:v.machine? v.machine.name : null,\n            machine_idPK:v.machine ? v.machine.machine_id : null\n          })\n        }\n      })\n      setIsLoad(pp_id)\n      setBasicRow([...tmpRow])\n      dispatch(insert_machine_list({process_length:tmpRow.length, machineList:tmpRow}))\n    }\n  }\n\n  const loadAllSelectItems = async (column: IExcelHeaderType[]) => {\n    let tmpColumn = column.map(async (v: any) => {\n      if(v.selectList){\n        return {\n          ...v,\n          pk: v.unit_id\n        }\n      }else{\n        return v\n      }\n    })\n\n    Promise.all(tmpColumn).then(res => {\n      setColumn([...res.map(v=> {\n        return {\n          ...v,\n        }\n      })])\n    })\n  }\n\n  const SaveBasic = async () => {\n\n    let processesSetting = [];\n\n    selector.machineList.map((v,i)=>{\n      processesSetting.push({...v, process_id:v.process_idPK, machine_id: typeof v.machine_id === \"string\" ? v.machine_idPK : v.machine_id})\n    })\n    let res = await RequestMethod('post', `operationSave`,\n        {\n          operation: {\n            date: selector.machineList[0].date,\n            customer_id: selector.machineList[0].customer_idPK,\n            cm_id: selector.machineList[0].cm_idPK,\n            product_id: selector.machineList[0].product_id,\n            processes:\n             selector.machineList.map((row, i) => {\n                          if(selectList.has(row.id)){\n                            let additional:any[] = []\n                            column.map((v) => {\n                              if(v.type === 'additional'){\n                                additional.push(v)\n                              }\n                            })\n\n                            let selectData: any = {}\n\n                            return {\n                              ...row,\n                              ...selectData,\n                              id: row.tmpId,\n                              // seq: i+1,\n                              authority: row.authorityPK,\n                              last: basicRow.length -1 === i ? true : false,\n                              machine_id: row.machine_idPK,\n                              process_id: row.process_idPK,\n                              ln_id: row.ln_idPK,\n                              additional: [\n                                ...additional.map(v => {\n                                  if(row[v.name]) {\n                                    return {\n                                      id: v.id,\n                                      title: v.name,\n                                      value: row[v.name],\n                                      unit: v.unit\n                                    }\n                                  }\n                                }).filter((v) => v)\n                              ]\n                            }\n\n                          }\n                        }).filter((v) => v)\n          }\n        })\n\n    if(res){\n      if(res.status === 200){\n        Notiflix.Report.success('저장되었습니다.','','확인');\n      }\n    }\n  }\n\n  const DeleteBasic = async () => {\n    let tmpRow = []\n    tmpRow = basicRow.map((v) => {\n      if(selectList.has(v.id)){\n        return\n      }\n      return v\n    }).filter(v => v).map((v, index) => {\n      return {\n        ...v,\n        seq: index+1,\n      }\n    })\n\n    if(tmpRow.length > 0 && selectList.size > 0){\n      // selector.machineList.splice(selectList, 1);\n      dispatch(delete_machine_list());\n      Notiflix.Report.success(\"삭제되었습니다.\",\"\",\"확인\");\n      setBasicRow([...tmpRow])\n    }else{\n      Notiflix.Report.warning(\"1개 이상의 작업이 필요합니다!\",\"\",\"확인\");\n    }\n  }\n\n  const loadLotInfo = async () => {\n    Notiflix.Loading.circle()\n    const res = await RequestMethod('get', `rawinSearch`,{\n      path: {\n        page: page,\n        renderItem: MAX_VALUE,\n        customer_id: basicRow[0].customer_idPK,\n        cm_id: basicRow[0].cm_idPK,\n        rm_id: basicRow[0].rm_id\n      },\n      params: {\n        keyword: keyword ?? '',\n        opt: option ?? 0,\n        nz: true\n      }\n    })\n\n    return (res.results.info_list.length)\n  }\n\n  const LoadMenu = async () => {\n    const res = await RequestMethod('get', `itemList`,{\n      path: {\n        tab: 'ROLE_PROD_01'\n      }\n    })\n\n    if(res && res.status === 200) {\n      let tmpColumn = column\n      tmpColumn = tmpColumn.map((column: any) => {\n        let menuData: object | undefined;\n        res.results.bases && res.results.bases.map((menu: any) => {\n          if(menu.colName === column.key){\n            menuData = {\n              id: menu.mi_id,\n              name: menu.title,\n              width: menu.width,\n              tab:'ROLE_PROD_01',\n              unit:menu.unit,\n              moddable: !menu.moddable,\n            }\n          } else if(menu.colName === 'id' && column.key === 'tmpId'){\n            menuData = {\n              id: menu.mi_id,\n              name: menu.title,\n              width: menu.width,\n              tab:'ROLE_PROD_01',\n              unit:menu.unit,\n              moddable: !menu.moddable\n            }\n          }\n        })\n\n        if(menuData){\n          return {\n            ...column,\n            ...menuData\n          }\n        }\n      }).filter((v:any) => v)\n      loadAllSelectItems(tmpColumn)\n    }else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back()\n      })\n    }\n  }\n\n  const changeRow = (row: any) => {\n    let tmpData = {}\n\n    return {\n      ln_id: row.ln_id,\n      rm_id: row.raw_material.rm_id,\n      customer_id: row.raw_material.model.customer.name,\n      cm_id: row.raw_material.model.model,\n      code: row.raw_material.code,\n      name: row.raw_material.name,\n      texture: row.raw_material.texture,\n      depth: row.raw_material.depth,\n      width: row.raw_material.width,\n      height: row.raw_material.height,\n      type: row.raw_material.type,\n      amount: row.amount,\n      date: row.date,\n      number: row.number,\n      ...tmpData\n    }\n  }\n\n  const cleanUpData = (res: any) => {\n    let tmpColumn = columnlist.operationRegister\n    let tmpRow = []\n    tmpColumn = tmpColumn.map((column: any) => {\n      let menuData: object | undefined;\n      res.results.menus && res.results.menus.map((menu: any) => {\n        if(menu.colName === column.key){\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab:menu.tab,\n            unit:menu.unit,\n            moddable: !menu.moddable,\n          }\n        } else if(menu.colName === 'id' && column.key === 'tmpId'){\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab:menu.tab,\n            unit:menu.unit,\n            moddable: !menu.moddable\n          }\n        }\n      })\n\n      if(menuData){\n        return {\n          ...column,\n          ...menuData\n        }\n      }\n    }).filter((v:any) => v)\n\n    loadAllSelectItems(tmpColumn)\n\n    let additionalMenus = res.results.menus ? res.results.menus.map((menu:any) => {\n      if(menu.colName === null){\n        return {\n          id: menu.id,\n          name: menu.title,\n          width: menu.width,\n          key: menu.title,\n          editor: TextEditor,\n          type: 'additional',\n          unit: menu.unit\n        }\n      }\n    }).filter((v: any) => v) : []\n\n    tmpRow = res.results.info_list\n\n    let additionalData: any[] = []\n\n    additionalMenus.map((v: any) => {\n      if(v.type === 'additional'){\n        additionalData.push(v.key)\n      }\n    })\n\n    let tmpBasicRow = tmpRow.map((row: any, index: number) => {\n      let realTableData: any = changeRow(row)\n      let appendAdditional: any = {}\n\n      row.additional && row.additional.map((v: any) => {\n        appendAdditional = {\n          ...appendAdditional,\n          [v.title]: v.value\n        }\n      })\n\n      const random_id = Math.random()*1000\n\n      return {\n        // ...row,\n        ...realTableData,\n        ...appendAdditional,\n        id: `rawinput_${random_id}`,\n      }\n    })\n\n    setBasicRow([...tmpBasicRow])\n  }\n\n  const downloadExcel = () => {\n    let tmpSelectList: boolean[] = []\n    basicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id))\n    })\n    excelDownload(column, basicRow, `작업지시서등록`, '작업지시서등록', tmpSelectList)\n  }\n\n  const onClickHeaderButton = (index: number) => {\n    switch(index){\n      case 0:\n        downloadExcel()\n        break;\n      case 1:\n        loadLotInfo().then((lotLength) => {\n          Notiflix.Loading.remove()\n\n          if(!selector.machineList[0].product_id){\n            Notiflix.Report.failure('저장 실패', '품목을 선택해주세요', '확인', )\n            return\n          } else if (\n            (!selector.machineList[0].goal && selector.machineList[0].goal !== 0)\n            ||\n            (selector.machineList[0].seq !==1 || !selectList.has(selector.machineList[0].id))\n          ) {\n            // Notiflix.Report.failure('저장 실패', '목표 생산량을 입력해주세요', '확인', )\n            SaveBasic()\n            return\n          }\n\n          Notiflix.Confirm.show(\n              '저장하시겠습니까?',\n              `제품 (${selector.machineList[0].code})에 대한 Lot ${lotLength}개가 존재합니다. 입력하신 ${selector.machineList[0].goal}이 맞습니까?`,\n              '저장',\n              '취소',\n              () => {\n                SaveBasic()\n              },\n              () => {\n              }\n          )\n        })\n\n        break;\n      case 2:\n\n        Notiflix.Confirm.show(\"경고\",\"삭제하시겠습니까?\",\"확인\",\"취소\",\n            ()=>{\n              DeleteBasic()\n            },\n            ()=>{}\n        );\n\n        break;\n\n    }\n  }\n\n  return (\n      <div style={{display: 'flex', }}>\n        <MenuNavigation pageType={'MES'} subType={0}/>\n        <div style={{paddingBottom: 40}}>\n          <ProfileHeader/>\n          <PageHeader\n              title={title}\n              buttons={['엑셀로 받기', '저장하기', '삭제']}\n              buttonsOnclick={onClickHeaderButton}\n          />\n          <ExcelTable\n              editable\n              resizable\n              headerList={[\n                SelectColumn,\n                ...column\n              ]}\n              row={selector.machineList}\n              // row={basicRow}\n              // setRow={setBasicRow}\n              setRow={(e) => {\n                let tmp: Set<any> = selectList\n                e.map(v => {\n                  if(v.isChange) tmp.add(v.id)\n                })\n\n                let tmpRow = e\n                let tmpSelect = selectList\n\n                if(e.length > 1 && e[1].goal && e[1].goal !== isGoal) {\n                  setIsGoal(e[1].goal)\n\n                  tmpRow = tmpRow.map((v, i) => {\n                    tmpSelect.add(v.id)\n                    if(i === 0){\n                      return {\n                        ...v,\n                        goal:Number(e[0].goal)\n                      }\n                    }else{\n                      return {\n                        ...v,\n                        goal:Number(e[1].goal)\n                      }\n                    }\n                  })\n                  console.log(tmpRow)\n\n                  setSelectList(tmpSelect)\n                }\n\n                setSelectList(tmp)\n                console.log(tmpRow)\n                setBasicRow([...tmpRow])\n                // dispatch(insert_machine_list({...selector, machineList:[...tmpRow]}))\n              }}\n              setSelectRow={(e)=>{\n                dispatch(insert_machine_list_index(e))\n              }}\n              selectList={selectList}\n              //@ts-ignore\n              setSelectList={setSelectList}\n              height={basicRow.length * 40 >= 40*18+40 ? 40*18 : basicRow.length * 40 + 56}\n          />\n        </div>\n      </div>\n  );\n}\n\nexport const getServerSideProps = (ctx: NextPageContext) => {\n  return {\n    props: {\n      page: ctx.query.page ?? 1,\n      keyword: ctx.query.keyword ?? \"\",\n      option: ctx.query.opt ?? 0,\n    }\n  }\n}\n\n// BasicContainer.getInitialProps = async ({ query }) => {\n//   let { page, keyword, opt } = query\n//   if (typeof page === 'string')\n//     page = parseInt(page);\n//   if (typeof opt === 'string')\n//     opt = parseInt(opt);\n//   return { page, keyword, option: opt };\n// }\n\nexport default BasicContainer;\n"]},"metadata":{},"sourceType":"module"}