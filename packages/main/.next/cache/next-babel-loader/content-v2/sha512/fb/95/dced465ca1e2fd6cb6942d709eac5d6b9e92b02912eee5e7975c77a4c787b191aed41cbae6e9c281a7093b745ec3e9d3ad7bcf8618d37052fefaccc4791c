{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/rawmaterial/input.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport ExcelTable from '../../../component/Excel/ExcelTable';\nimport MenuNavigation from '../../../component/MenuNav/MenuNavigation';\nimport ProfileHeader from '../../../component/Profile/ProfileHeader';\nimport PageHeader from '../../../component/Header/Header'; // @ts-ignore\n\nimport { SelectColumn } from 'react-data-grid';\nimport { RequestMethod } from '../../../common/RequestFunctions';\nimport { columnlist } from \"../../../common/columnInit\";\nimport Notiflix from \"notiflix\";\nimport { useRouter } from 'next/router';\nimport { MAX_VALUE } from '../../../common/configset';\nimport TextEditor from '../../../component/InputBox/ExcelBasicInputBox';\nimport { excelDownload } from '../../../common/excelDownloadFunction';\nimport PaginationComponent from '../../../component/Pagination/PaginationComponent';\nimport moment from 'moment';\nimport ExcelDownloadModal from '../../../component/Modal/ExcelDownloadMoadal';\nconst title = '원자재 입고 관리';\nconst optList = ['고객사명', '모델명', 'CODE', '품명', 'Lot번호'];\n\nconst BasicContainer = ({\n  page,\n  keyword,\n  option\n}) => {\n  const router = useRouter();\n  const {\n    0: excelOpen,\n    1: setExcelOpen\n  } = useState(false);\n  const {\n    0: basicRow,\n    1: setBasicRow\n  } = useState([{\n    name: \"\",\n    id: \"\"\n  }]);\n  const {\n    0: column,\n    1: setColumn\n  } = useState(columnlist.rawin);\n  const {\n    0: selectList,\n    1: setSelectList\n  } = useState(new Set());\n  const {\n    0: optionList,\n    1: setOptionList\n  } = useState(optList);\n  const {\n    0: optionIndex,\n    1: setOptionIndex\n  } = useState(0);\n  const {\n    0: pageInfo,\n    1: setPageInfo\n  } = useState({\n    page: 1,\n    total: 1\n  });\n  const {\n    0: selectDate,\n    1: setSelectDate\n  } = useState({\n    from: moment().startOf('isoWeek').format('YYYY-MM-DD'),\n    to: moment().endOf('isoWeek').format('YYYY-MM-DD')\n  });\n  useEffect(() => {\n    setOptionIndex(option);\n\n    if (keyword) {\n      SearchBasic(keyword, option, page);\n    } else {\n      LoadBasic(page).then(() => {});\n    }\n  }, [page, keyword, option, selectDate]);\n\n  const loadAllSelectItems = async column => {\n    let tmpColumn = column.map(async v => {\n      if (v.selectList && v.selectList.length === 0) {\n        let tmpKey = v.key;\n\n        if (tmpKey === 'customer_id') {\n          tmpKey = 'customer';\n        } else if (tmpKey === 'cm_id') {\n          tmpKey = 'model';\n        }\n\n        const res = await RequestMethod('get', `${tmpKey}List`, {\n          path: {\n            page: 1,\n            renderItem: MAX_VALUE\n          }\n        });\n        return _objectSpread(_objectSpread({}, v), {}, {\n          selectList: [...res.results.info_list.map(value => {\n            return _objectSpread(_objectSpread({}, value), {}, {\n              pk: value.ca_id\n            });\n          })]\n        });\n      } else {\n        if (v.selectList) {\n          return _objectSpread(_objectSpread({}, v), {}, {\n            pk: v.unit_id\n          });\n        } else {\n          return v;\n        }\n      }\n    });\n    Promise.all(tmpColumn).then(res => {\n      setColumn([...res.map(v => {\n        return _objectSpread(_objectSpread({}, v), {}, {\n          name: v.moddable ? v.name + '(필수)' : v.name\n        });\n      })]);\n    });\n  };\n\n  const SaveBasic = async () => {\n    let res = await RequestMethod('post', `rawinSave`, {\n      warehousing: basicRow.map((row, i) => {\n        if (selectList.has(row.id)) {\n          let additional = [];\n          column.map(v => {\n            if (v.type === 'additional') {\n              additional.push(v);\n            }\n          });\n          let selectData = {};\n          return _objectSpread(_objectSpread(_objectSpread({}, row), selectData), {}, {\n            id: row.tmpId,\n            authority: row.authorityPK,\n            additional: [...additional.map(v => {\n              if (row[v.name]) {\n                return {\n                  id: v.id,\n                  title: v.name,\n                  value: row[v.name],\n                  unit: v.unit\n                };\n              }\n            }).filter(v => v)]\n          });\n        }\n      }).filter(v => v)\n    });\n\n    if (res) {\n      if (res.status === 200) {\n        Notiflix.Report.success('저장되었습니다.', '', '확인');\n\n        if (keyword) {\n          SearchBasic(keyword, option, page).then(() => {\n            Notiflix.Loading.remove();\n          });\n        } else {\n          LoadBasic(page).then(() => {\n            Notiflix.Loading.remove();\n          });\n        }\n      }\n    }\n  };\n\n  const DeleteBasic = async () => {\n    const res = await RequestMethod('delete', `rawinDelete`, {\n      warehousing: basicRow.map((row, i) => {\n        if (selectList.has(row.id)) {\n          return row.ln_id;\n        }\n      }).filter(v => v)\n    });\n\n    if (res) {\n      if (res.status === 200) {\n        Notiflix.Report.success('삭제되었습니다.', '', '확인');\n\n        if (Number(page) === 1) {\n          LoadBasic(1).then(() => {\n            Notiflix.Loading.remove();\n          });\n        } else {\n          if (keyword) {\n            router.push(`/mes/rawmaterial/input?page=1&keyword=${keyword}&opt=${option}`);\n          } else {\n            router.push(`/mes/rawmaterial/input?page=1`);\n          }\n        }\n      }\n    }\n  };\n\n  const LoadBasic = async page => {\n    const res = await RequestMethod('get', `rawinList`, {\n      path: {\n        page: page !== null && page !== void 0 ? page : 1,\n        renderItem: 18\n      },\n      params: {\n        from: selectDate.from,\n        to: selectDate.to\n      }\n    });\n\n    if (res && res.status === 200) {\n      if (res.results.totalPages !== 0 && res.results.totalPages < page) {\n        LoadBasic(page - 1);\n      } else {\n        setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n          page: res.results.page,\n          total: res.results.totalPages\n        }));\n        cleanUpData(res);\n      }\n    } else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back();\n      });\n    }\n  };\n\n  const SearchBasic = async (keyword, option, isPaging) => {\n    if (!isPaging) {\n      setOptionIndex(option);\n    }\n\n    const res = await RequestMethod('get', `rawinSearch`, {\n      path: {\n        page: isPaging !== null && isPaging !== void 0 ? isPaging : 1,\n        renderItem: 18\n      },\n      params: {\n        keyword: keyword !== null && keyword !== void 0 ? keyword : '',\n        opt: option !== null && option !== void 0 ? option : 0,\n        from: selectDate.from,\n        to: selectDate.to\n      }\n    });\n\n    if (res && res.status === 200) {\n      setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n        page: res.results.page,\n        total: res.results.totalPages\n      }));\n      cleanUpData(res);\n    }\n  };\n\n  const changeRow = row => {\n    let tmpData = {};\n    return _objectSpread({\n      ln_id: row.ln_id,\n      rm_id: row.raw_material.rm_id,\n      customer_id: row.raw_material.model.customer.name,\n      cm_id: row.raw_material.model.model,\n      code: row.raw_material.code,\n      name: row.raw_material.name,\n      texture: row.raw_material.texture,\n      depth: row.raw_material.depth,\n      width: row.raw_material.width,\n      height: row.raw_material.height,\n      type: row.raw_material.type,\n      amount: row.amount,\n      date: row.date,\n      number: row.number\n    }, tmpData);\n  };\n\n  const cleanUpData = res => {\n    let tmpColumn = columnlist.rawin;\n    let tmpRow = [];\n    tmpColumn = tmpColumn.map(column => {\n      let menuData;\n      res.results.menus && res.results.menus.map(menu => {\n        if (menu.colName === column.key) {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit,\n            moddable: !menu.moddable\n          };\n        } else if (menu.colName === 'id' && column.key === 'tmpId') {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit,\n            moddable: !menu.moddable\n          };\n        }\n      });\n\n      if (menuData) {\n        return _objectSpread(_objectSpread({}, column), menuData);\n      }\n    }).filter(v => v);\n    loadAllSelectItems(tmpColumn);\n    let additionalMenus = res.results.menus ? res.results.menus.map(menu => {\n      if (menu.colName === null) {\n        return {\n          id: menu.id,\n          name: menu.title,\n          width: menu.width,\n          key: menu.title,\n          editor: TextEditor,\n          type: 'additional',\n          unit: menu.unit\n        };\n      }\n    }).filter(v => v) : [];\n    tmpRow = res.results.info_list;\n    let additionalData = [];\n    additionalMenus.map(v => {\n      if (v.type === 'additional') {\n        additionalData.push(v.key);\n      }\n    });\n    let tmpBasicRow = tmpRow.map((row, index) => {\n      let realTableData = changeRow(row);\n      let appendAdditional = {};\n      row.additional && row.additional.map(v => {\n        appendAdditional = _objectSpread(_objectSpread({}, appendAdditional), {}, {\n          [v.title]: v.value\n        });\n      });\n      const random_id = Math.random() * 1000;\n      return _objectSpread(_objectSpread(_objectSpread({}, realTableData), appendAdditional), {}, {\n        id: `rawinput_${random_id}`\n      });\n    });\n    setBasicRow([...tmpBasicRow]);\n  };\n\n  const downloadExcel = () => {\n    let tmpSelectList = [];\n    basicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id));\n    });\n    excelDownload(column, basicRow, `원자재 입고 관리`, 'rawmaterial_input', tmpSelectList);\n  };\n\n  const onClickHeaderButton = index => {\n    switch (index) {\n      case 0:\n        setExcelOpen(true);\n        break;\n\n      case 1:\n        router.push(`/mes/item/manage/rawin`);\n        break;\n\n      case 2:\n        let items = {};\n        column.map(value => {\n          if (value.selectList && value.selectList.length) {\n            items = _objectSpread(_objectSpread({}, value.selectList[0]), {}, {\n              [value.key]: value.selectList[0].name,\n              [value.key + 'PK']: value.selectList[0].pk\n            }, items);\n          }\n        });\n        const random_id = Math.random() * 1000;\n        setBasicRow([_objectSpread(_objectSpread({}, items), {}, {\n          id: `rawinput_${random_id}`,\n          name: null,\n          date: moment().format('YYYY-MM-DD'),\n          additional: []\n        }), ...basicRow]);\n        break;\n\n      case 3:\n        SaveBasic();\n        break;\n\n      case 4:\n        Notiflix.Confirm.show(\"경고\", \"삭제하시겠습니까?\", \"확인\", \"취소\", () => {\n          DeleteBasic();\n        }, () => {});\n        break;\n    }\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 5\n    }\n  }, __jsx(MenuNavigation, {\n    pageType: 'MES',\n    subType: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    style: {\n      paddingBottom: 40\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 7\n    }\n  }, __jsx(ProfileHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 9\n    }\n  }), __jsx(PageHeader, {\n    isSearch: true,\n    searchKeyword: keyword,\n    onChangeSearchKeyword: keyword => {\n      if (keyword) {\n        router.push(`/mes/rawmaterial/input?page=1&keyword=${keyword}&opt=${optionIndex}`);\n      } else {\n        router.push(`/mes/rawmaterial/input?page=1&keyword=`);\n      }\n    },\n    searchOptionList: optionList,\n    onChangeSearchOption: option => {\n      setOptionIndex(option);\n    },\n    optionIndex: optionIndex,\n    isCalendar: true,\n    calendarType: 'period',\n    selectDate: selectDate //@ts-ignore\n    ,\n    setSelectDate: setSelectDate,\n    title: title,\n    buttons: ['엑셀로 받기', '항목관리', '행 추가', '저장하기', '삭제'],\n    buttonsOnclick: onClickHeaderButton,\n    dataLimit: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 9\n    }\n  }), __jsx(ExcelTable, {\n    editable: true,\n    resizable: true,\n    headerList: [SelectColumn, ...column],\n    row: basicRow // setRow={setBasicRow}\n    ,\n    setRow: e => {\n      let tmp = selectList;\n      e.map(v => {\n        if (v.isChange) tmp.add(v.id);\n      });\n      setSelectList(tmp);\n      setBasicRow(e);\n    },\n    selectList: selectList //@ts-ignore\n    ,\n    setSelectList: setSelectList,\n    height: basicRow.length * 40 >= 40 * 18 + 56 ? 40 * 19 : basicRow.length * 40 + 56,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 9\n    }\n  }), __jsx(PaginationComponent, {\n    currentPage: pageInfo.page,\n    totalPage: pageInfo.total,\n    setPage: page => {\n      if (keyword) {\n        router.push(`/mes/rawmaterial/input?page=${page}&keyword=${keyword}&opt=${option}`);\n      } else {\n        router.push(`/mes/rawmaterial/input?page=${page}`);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 9\n    }\n  })), __jsx(ExcelDownloadModal, {\n    isOpen: excelOpen,\n    column: column,\n    basicRow: basicRow,\n    filename: `원자재입고관리`,\n    sheetname: `원자재입고관리`,\n    selectList: selectList,\n    tab: 'ROLE_RMAT_01',\n    setIsOpen: setExcelOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport const getServerSideProps = ctx => {\n  var _ctx$query$page, _ctx$query$keyword, _ctx$query$opt;\n\n  return {\n    props: {\n      page: (_ctx$query$page = ctx.query.page) !== null && _ctx$query$page !== void 0 ? _ctx$query$page : 1,\n      keyword: (_ctx$query$keyword = ctx.query.keyword) !== null && _ctx$query$keyword !== void 0 ? _ctx$query$keyword : \"\",\n      option: (_ctx$query$opt = ctx.query.opt) !== null && _ctx$query$opt !== void 0 ? _ctx$query$opt : 0\n    }\n  };\n}; // BasicContainer.getInitialProps = async ({ query }) => {\n//   let { page, keyword, opt } = query\n//   if (typeof page === 'string')\n//     page = parseInt(page);\n//   if (typeof opt === 'string')\n//     opt = parseInt(opt);\n//   return { page, keyword, option: opt };\n// }\n\nexport default BasicContainer;","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/rawmaterial/input.tsx"],"names":["React","useEffect","useState","ExcelTable","MenuNavigation","ProfileHeader","PageHeader","SelectColumn","RequestMethod","columnlist","Notiflix","useRouter","MAX_VALUE","TextEditor","excelDownload","PaginationComponent","moment","ExcelDownloadModal","title","optList","BasicContainer","page","keyword","option","router","excelOpen","setExcelOpen","basicRow","setBasicRow","name","id","column","setColumn","rawin","selectList","setSelectList","Set","optionList","setOptionList","optionIndex","setOptionIndex","pageInfo","setPageInfo","total","selectDate","setSelectDate","from","startOf","format","to","endOf","SearchBasic","LoadBasic","then","loadAllSelectItems","tmpColumn","map","v","length","tmpKey","key","res","path","renderItem","results","info_list","value","pk","ca_id","unit_id","Promise","all","moddable","SaveBasic","warehousing","row","i","has","additional","type","push","selectData","tmpId","authority","authorityPK","unit","filter","status","Report","success","Loading","remove","DeleteBasic","ln_id","Number","params","totalPages","cleanUpData","state","failure","back","isPaging","opt","changeRow","tmpData","rm_id","raw_material","customer_id","model","customer","cm_id","code","texture","depth","width","height","amount","date","number","tmpRow","menuData","menus","menu","colName","tab","additionalMenus","editor","additionalData","tmpBasicRow","index","realTableData","appendAdditional","random_id","Math","random","downloadExcel","tmpSelectList","onClickHeaderButton","items","Confirm","show","display","paddingBottom","e","tmp","isChange","add","getServerSideProps","ctx","props","query"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport ExcelTable from '../../../component/Excel/ExcelTable'\nimport MenuNavigation from '../../../component/MenuNav/MenuNavigation'\nimport ProfileHeader from '../../../component/Profile/ProfileHeader'\nimport PageHeader from '../../../component/Header/Header'\n// @ts-ignore\nimport {SelectColumn} from 'react-data-grid'\nimport {IExcelHeaderType, IItemMenuType} from '../../../common/@types/type'\nimport {RequestMethod} from '../../../common/RequestFunctions'\nimport {columnlist} from \"../../../common/columnInit\";\nimport Notiflix from \"notiflix\";\nimport {useRouter} from 'next/router'\nimport {MAX_VALUE} from '../../../common/configset'\nimport DropDownEditor from '../../../component/Dropdown/ExcelBasicDropdown'\nimport TextEditor from '../../../component/InputBox/ExcelBasicInputBox'\nimport {excelDownload} from '../../../common/excelDownloadFunction'\nimport {loadAll} from 'react-cookies'\nimport PaginationComponent from '../../../component/Pagination/PaginationComponent'\nimport {NextPageContext} from 'next'\nimport moment from 'moment'\nimport ExcelDownloadModal from '../../../component/Modal/ExcelDownloadMoadal'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {setMenuStateChange} from '../../../reducer/menuState'\n\nconst title = '원자재 입고 관리'\nconst optList = ['고객사명', '모델명', 'CODE', '품명', 'Lot번호']\n\ninterface IProps {\n  children?: any\n  page?: number\n  keyword?: string\n  option?: number\n}\n\nconst BasicContainer = ({page, keyword, option}: IProps) => {\n  const router = useRouter()\n\n  const [excelOpen, setExcelOpen] = useState<boolean>(false)\n  const [basicRow, setBasicRow] = useState<Array<any>>([{\n    name: \"\", id: \"\"\n  }])\n  const [column, setColumn] = useState<Array<IExcelHeaderType>>(columnlist.rawin)\n  const [selectList, setSelectList] = useState<Set<number>>(new Set())\n  const [optionList, setOptionList] = useState<string[]>(optList)\n  const [optionIndex, setOptionIndex] = useState<number>(0)\n\n  const [pageInfo, setPageInfo] = useState<{page: number, total: number}>({\n    page: 1,\n    total: 1\n  })\n\n  const [selectDate, setSelectDate] = useState<{from:string, to:string}>({\n    from: moment().startOf('isoWeek').format('YYYY-MM-DD'),\n    to: moment().endOf('isoWeek').format('YYYY-MM-DD')\n  });\n\n\n  useEffect(() => {\n    setOptionIndex(option)\n    if(keyword){\n      SearchBasic(keyword, option, page)\n    }else{\n      LoadBasic(page).then(() => {})\n    }\n  }, [page, keyword, option, selectDate])\n\n  const loadAllSelectItems = async (column: IExcelHeaderType[]) => {\n    let tmpColumn = column.map(async (v: any) => {\n      if(v.selectList && v.selectList.length === 0){\n        let tmpKey = v.key\n\n        if(tmpKey === 'customer_id'){\n          tmpKey = 'customer'\n        } else if(tmpKey === 'cm_id'){\n          tmpKey = 'model'\n        }\n\n\n        const res = await RequestMethod('get', `${tmpKey}List`,{\n          path: {\n            page: 1,\n            renderItem: MAX_VALUE,\n          }\n        })\n\n        return {\n          ...v,\n          selectList: [...res.results.info_list.map((value: any) => {\n            return {\n              ...value,\n              pk: value.ca_id\n            }\n          })]\n        }\n      }else{\n        if(v.selectList){\n          return {\n            ...v,\n            pk: v.unit_id\n          }\n        }else{\n          return v\n        }\n      }\n    })\n\n    Promise.all(tmpColumn).then(res => {\n      setColumn([...res.map(v=> {\n        return {\n          ...v,\n          name: v.moddable ? v.name+'(필수)' : v.name\n        }\n      })])\n    })\n  }\n\n  const SaveBasic = async () => {\n    let res = await RequestMethod('post', `rawinSave`,\n      {\n        warehousing: basicRow.map((row, i) => {\n          if(selectList.has(row.id)){\n            let additional:any[] = []\n            column.map((v) => {\n              if(v.type === 'additional'){\n                additional.push(v)\n              }\n            })\n\n            let selectData: any = {}\n\n            return {\n              ...row,\n              ...selectData,\n              id: row.tmpId,\n              authority: row.authorityPK,\n              additional: [\n                ...additional.map(v => {\n                  if(row[v.name]) {\n                    return {\n                      id: v.id,\n                      title: v.name,\n                      value: row[v.name],\n                      unit: v.unit\n                    }\n                  }\n                }).filter((v) => v)\n              ]\n            }\n\n          }\n        }).filter((v) => v)\n      })\n\n    if(res){\n      if(res.status === 200){\n        Notiflix.Report.success('저장되었습니다.','','확인');\n        if(keyword){\n          SearchBasic(keyword, option, page).then(() => {\n            Notiflix.Loading.remove()\n          })\n        }else{\n          LoadBasic(page).then(() => {\n            Notiflix.Loading.remove()\n          })\n        }\n      }\n    }\n  }\n\n  const DeleteBasic = async () => {\n    const res = await RequestMethod('delete', `rawinDelete`,\n      {\n        warehousing: basicRow.map((row, i) => {\n          if(selectList.has(row.id)){\n            return row.ln_id\n          }\n        }).filter((v) => v)\n      })\n\n    if(res) {\n      if(res.status === 200){\n        Notiflix.Report.success('삭제되었습니다.','','확인');\n        if(Number(page) === 1){\n          LoadBasic(1).then(() => {\n            Notiflix.Loading.remove()\n          })\n        }else{\n          if(keyword){\n            router.push(`/mes/rawmaterial/input?page=1&keyword=${keyword}&opt=${option}`)\n          }else{\n            router.push(`/mes/rawmaterial/input?page=1`)\n          }\n        }\n      }\n    }\n  }\n\n  const LoadBasic = async (page?: number) => {\n    const res = await RequestMethod('get', `rawinList`,{\n      path: {\n        page: page ?? 1,\n        renderItem: 18,\n      },\n      params: {\n        from: selectDate.from,\n        to: selectDate.to,\n      }\n    })\n\n    if(res && res.status === 200){\n      if(res.results.totalPages !== 0 && res.results.totalPages < page){\n        LoadBasic(page - 1)\n      }else{\n        setPageInfo({\n          ...pageInfo,\n          page: res.results.page,\n          total: res.results.totalPages\n        })\n        cleanUpData(res)\n      }\n    }else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back()\n      })\n    }\n  }\n\n  const SearchBasic = async (keyword: any, option: number, isPaging?: number) => {\n    if(!isPaging){\n      setOptionIndex(option)\n    }\n\n    const res = await RequestMethod('get', `rawinSearch`,{\n      path: {\n        page: isPaging ?? 1,\n        renderItem: 18,\n      },\n      params: {\n        keyword: keyword ?? '',\n        opt: option ?? 0,\n        from: selectDate.from,\n        to: selectDate.to,\n      }\n    })\n\n    if(res && res.status === 200) {\n      setPageInfo({\n        ...pageInfo,\n        page: res.results.page,\n        total: res.results.totalPages\n      })\n      cleanUpData(res)\n    }\n  }\n\n  const changeRow = (row: any) => {\n    let tmpData = {}\n\n    return {\n      ln_id: row.ln_id,\n      rm_id: row.raw_material.rm_id,\n      customer_id: row.raw_material.model.customer.name,\n      cm_id: row.raw_material.model.model,\n      code: row.raw_material.code,\n      name: row.raw_material.name,\n      texture: row.raw_material.texture,\n      depth: row.raw_material.depth,\n      width: row.raw_material.width,\n      height: row.raw_material.height,\n      type: row.raw_material.type,\n      amount: row.amount,\n      date: row.date,\n      number: row.number,\n      ...tmpData\n    }\n  }\n\n  const cleanUpData = (res: any) => {\n    let tmpColumn = columnlist.rawin\n    let tmpRow = []\n\n    tmpColumn = tmpColumn.map((column: any) => {\n      let menuData: object | undefined;\n      res.results.menus && res.results.menus.map((menu: any) => {\n        if(menu.colName === column.key){\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab:menu.tab,\n            unit:menu.unit,\n            moddable: !menu.moddable\n          }\n        } else if(menu.colName === 'id' && column.key === 'tmpId'){\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab:menu.tab,\n            unit:menu.unit,\n            moddable: !menu.moddable\n          }\n        }\n      })\n\n      if(menuData){\n        return {\n          ...column,\n          ...menuData\n        }\n      }\n    }).filter((v:any) => v)\n\n    loadAllSelectItems(tmpColumn)\n\n    let additionalMenus = res.results.menus ? res.results.menus.map((menu:any) => {\n      if(menu.colName === null){\n        return {\n          id: menu.id,\n          name: menu.title,\n          width: menu.width,\n          key: menu.title,\n          editor: TextEditor,\n          type: 'additional',\n          unit: menu.unit\n        }\n      }\n    }).filter((v: any) => v) : []\n\n    tmpRow = res.results.info_list\n\n    let additionalData: any[] = []\n\n    additionalMenus.map((v: any) => {\n      if(v.type === 'additional'){\n        additionalData.push(v.key)\n      }\n    })\n\n    let tmpBasicRow = tmpRow.map((row: any, index: number) => {\n      let realTableData: any = changeRow(row)\n      let appendAdditional: any = {}\n\n      row.additional && row.additional.map((v: any) => {\n        appendAdditional = {\n          ...appendAdditional,\n          [v.title]: v.value\n        }\n      })\n\n      const random_id = Math.random()*1000\n\n      return {\n        // ...row,\n        ...realTableData,\n        ...appendAdditional,\n        id: `rawinput_${random_id}`,\n      }\n    })\n    setBasicRow([...tmpBasicRow])\n  }\n\n  const downloadExcel = () => {\n    let tmpSelectList: boolean[] = []\n    basicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id))\n    })\n    excelDownload(column, basicRow, `원자재 입고 관리`, 'rawmaterial_input', tmpSelectList)\n  }\n\n  const onClickHeaderButton = (index: number) => {\n    switch(index){\n      case 0:\n        setExcelOpen(true)\n        break;\n      case 1:\n        router.push(`/mes/item/manage/rawin`)\n        break;\n      case 2:\n        let items = {}\n\n        column.map((value) => {\n          if(value.selectList && value.selectList.length){\n            items = {\n              ...value.selectList[0],\n              [value.key] : value.selectList[0].name,\n              [value.key+'PK'] : value.selectList[0].pk,//여기 봐야됨!\n              ...items,\n            }\n          }\n        })\n\n        const random_id = Math.random()*1000\n\n        setBasicRow([\n          {\n            ...items,\n            id: `rawinput_${random_id}`,\n            name: null,\n            date: moment().format('YYYY-MM-DD'),\n            additional: [],\n          },\n          ...basicRow\n        ])\n        break;\n      case 3:\n        SaveBasic()\n\n        break;\n      case 4:\n        Notiflix.Confirm.show(\"경고\",\"삭제하시겠습니까?\",\"확인\",\"취소\",\n            ()=>{\n              DeleteBasic()\n            },\n            ()=>{}\n            )\n        break;\n\n    }\n  }\n\n  return (\n    <div style={{display: 'flex', }}>\n      <MenuNavigation pageType={'MES'} subType={1}/>\n      <div style={{paddingBottom: 40}}>\n        <ProfileHeader/>\n        <PageHeader\n          isSearch\n          searchKeyword={keyword}\n          onChangeSearchKeyword={(keyword) => {\n            if(keyword){\n              router.push(`/mes/rawmaterial/input?page=1&keyword=${keyword}&opt=${optionIndex}`)\n            }else{\n              router.push(`/mes/rawmaterial/input?page=1&keyword=`)\n            }\n          }}\n          searchOptionList={optionList}\n          onChangeSearchOption={(option) => {\n            setOptionIndex(option)\n          }}\n          optionIndex={optionIndex}\n          isCalendar\n          calendarType={'period'}\n          selectDate={selectDate}\n          //@ts-ignore\n          setSelectDate={setSelectDate}\n          title={title}\n          buttons={['엑셀로 받기', '항목관리', '행 추가', '저장하기', '삭제']}\n          buttonsOnclick={onClickHeaderButton}\n          dataLimit={true}\n        />\n        <ExcelTable\n          editable\n          resizable\n          headerList={[\n            SelectColumn,\n            ...column\n          ]}\n          row={basicRow}\n          // setRow={setBasicRow}\n          setRow={(e) => {\n            let tmp: Set<any> = selectList\n            e.map(v => {\n              if(v.isChange) tmp.add(v.id)\n            })\n            setSelectList(tmp)\n            setBasicRow(e)\n          }}\n          selectList={selectList}\n          //@ts-ignore\n          setSelectList={setSelectList}\n          height={basicRow.length * 40 >= 40*18+56 ? 40*19 : basicRow.length * 40 + 56}\n        />\n        <PaginationComponent\n          currentPage={pageInfo.page}\n          totalPage={pageInfo.total}\n          setPage={(page) => {\n            if(keyword){\n              router.push(`/mes/rawmaterial/input?page=${page}&keyword=${keyword}&opt=${option}`)\n            }else{\n              router.push(`/mes/rawmaterial/input?page=${page}`)\n            }\n          }}\n        />\n      </div>\n      <ExcelDownloadModal\n        isOpen={excelOpen}\n        column={column}\n        basicRow={basicRow}\n        filename={`원자재입고관리`}\n        sheetname={`원자재입고관리`}\n        selectList={selectList}\n        tab={'ROLE_RMAT_01'}\n        setIsOpen={setExcelOpen}\n      />\n    </div>\n  );\n}\n\nexport const getServerSideProps = (ctx: NextPageContext) => {\n  return {\n    props: {\n      page: ctx.query.page ?? 1,\n      keyword: ctx.query.keyword ?? \"\",\n      option: ctx.query.opt ?? 0,\n    }\n  }\n}\n\n// BasicContainer.getInitialProps = async ({ query }) => {\n//   let { page, keyword, opt } = query\n//   if (typeof page === 'string')\n//     page = parseInt(page);\n//   if (typeof opt === 'string')\n//     opt = parseInt(opt);\n//   return { page, keyword, option: opt };\n// }\n\nexport default BasicContainer;\n"]},"metadata":{},"sourceType":"module"}