{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/record/list.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport ExcelTable from '../../../component/Excel/ExcelTable';\nimport MenuNavigation from '../../../component/MenuNav/MenuNavigation';\nimport ProfileHeader from '../../../component/Profile/ProfileHeader';\nimport PageHeader from '../../../component/Header/Header'; // @ts-ignore\n\nimport { SelectColumn } from 'react-data-grid';\nimport { RequestMethod } from '../../../common/RequestFunctions';\nimport { columnlist } from \"../../../common/columnInit\";\nimport Notiflix from \"notiflix\";\nimport { useRouter } from 'next/router';\nimport TextEditor from '../../../component/InputBox/ExcelBasicInputBox';\nimport { excelDownload } from '../../../common/excelDownloadFunction';\nimport PaginationComponent from '../../../component/Pagination/PaginationComponent';\nimport ExcelDownloadModal from '../../../component/Modal/ExcelDownloadMoadal';\nimport moment from 'moment';\nconst title = '작업완료 리스트';\nconst optList = ['고객사명', '모델명', 'CODE', '품명'];\n\nconst BasicContainer = ({\n  page,\n  keyword,\n  option\n}) => {\n  const router = useRouter();\n  const {\n    0: excelOpen,\n    1: setExcelOpen\n  } = useState(false);\n  const {\n    0: top,\n    1: setTop\n  } = useState(0);\n  const {\n    0: basicRow,\n    1: setBasicRow\n  } = useState([]);\n  const {\n    0: column,\n    1: setColumn\n  } = useState(columnlist.recordList);\n  const {\n    0: selectList,\n    1: setSelectList\n  } = useState(new Set());\n  const {\n    0: optionList,\n    1: setOptionList\n  } = useState(optList);\n  const {\n    0: optionIndex,\n    1: setOptionIndex\n  } = useState(0); // const [keyword, setKeyword] = useState<string>('')\n\n  const {\n    0: pageInfo,\n    1: setPageInfo\n  } = useState({\n    page: page,\n    total: 1\n  });\n  const {\n    0: selectDate,\n    1: setSelectDate\n  } = useState({\n    from: moment().startOf('isoWeek').format('YYYY-MM-DD'),\n    to: moment().endOf('isoWeek').format('YYYY-MM-DD')\n  });\n  useEffect(() => {\n    if (keyword) {\n      SearchBasic(keyword, option, page);\n    } else {\n      LoadBasic(page).then(() => {});\n    }\n  }, [page, keyword, option, selectDate]);\n\n  const loadPoorQunatity = async or_id => {\n    let res = await RequestMethod('get', `recordDefect`, {\n      path: {\n        or_id\n      }\n    });\n\n    if (res) {\n      return res.results.poor_quantities.map(v => {\n        return {\n          ord_id: v.ord_id,\n          pdr_id: v.pdr.pdr_id,\n          amount: v.amount\n        };\n      });\n    }\n\n    return;\n  };\n\n  const loadPauseTimes = async or_id => {\n    let res = await RequestMethod('get', `recordPause`, {\n      path: {\n        or_id\n      }\n    });\n\n    if (res) {\n      return res.results.paused_times.map(v => {\n        return {\n          ord_id: v.ord_id,\n          ppr_id: v.ppr.ppr_id,\n          start: v.start,\n          end: v.end,\n          amount: v.amount\n        };\n      });\n    }\n\n    return;\n  };\n\n  const SaveBasic = async () => {\n    const tmpRows = basicRow.map(async (row, i) => {\n      if (selectList.has(row.id)) {\n        var _row$poor_quantities, _row$paused_times;\n\n        let selectKey = [];\n        let additional = [];\n        column.map(v => {\n          if (v.selectList) {\n            selectKey.push(v.key);\n          }\n\n          if (v.type === 'additional') {\n            additional.push(v);\n          }\n        });\n        let selectData = {};\n        return _objectSpread(_objectSpread(_objectSpread({}, row), selectData), {}, {\n          customer_id: row.customer_idPK,\n          cm_id: row.cm_idPK,\n          ln_id: row.ln_idPK,\n          mold_id: row.mold_idPK,\n          process_id: row.process_idPK,\n          machine_id: row.machine_idPK,\n          good_quantity: Number(row.good_quantity),\n          user_id: row.user_idPK,\n          poor_quantities: (_row$poor_quantities = row.poor_quantities) !== null && _row$poor_quantities !== void 0 ? _row$poor_quantities : await loadPoorQunatity(row.or_id),\n          paused_times: (_row$paused_times = row.paused_times) !== null && _row$paused_times !== void 0 ? _row$paused_times : await loadPauseTimes(row.or_id),\n          paused_time: row.paused_timePK,\n          additional: [...additional.map(v => {\n            if (row[v.name]) {\n              return {\n                id: v.id,\n                title: v.name,\n                value: row[v.name],\n                unit: v.unit\n              };\n            }\n          }).filter(v => v)]\n        });\n      }\n    });\n    Promise.all(tmpRows).then(async v => {\n      let res = await RequestMethod('post', `recordSave`, {\n        records: v.filter(v => v)\n      });\n\n      if (res) {\n        if (res.status === 200) {\n          Notiflix.Report.success('저장되었습니다.', '', '확인');\n\n          if (keyword) {\n            SearchBasic(keyword, option, page).then(() => {\n              Notiflix.Loading.remove();\n            });\n          } else {\n            LoadBasic(page).then(() => {\n              Notiflix.Loading.remove();\n            });\n          }\n        }\n      }\n    });\n  };\n\n  const DeleteBasic = async () => {\n    const res = await RequestMethod('delete', `processDelete`, {\n      processes: basicRow.map((row, i) => {\n        if (selectList.has(row.id)) {\n          let pk = \"\";\n          Object.keys(row).map(v => {\n            if (v.indexOf(\"_id\") !== -1) {\n              pk = v;\n            }\n          });\n          return row[pk];\n        }\n      }).filter(v => v)\n    });\n\n    if (res) {\n      if (res.status === 200) {\n        if (keyword) {\n          router.push(`/mes/record/list?page=1&keyword=${keyword}&opt=${option}`);\n        } else {\n          router.push(`/mes/record/list?page=1`);\n        }\n      }\n    }\n  };\n\n  const LoadBasic = async page => {\n    const res = await RequestMethod('get', `recordList`, {\n      path: {\n        page: page || page !== 0 ? page : 1,\n        renderItem: 18,\n        tab: 'ROLE_PROD_06'\n      },\n      params: {\n        from: selectDate.from,\n        to: selectDate.to\n      }\n    });\n\n    if (res && res.status === 200) {\n      if (res.results.totalPages < page) {\n        LoadBasic(page - 1);\n      } else {\n        setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n          page: res.results.page,\n          total: res.results.totalPages\n        }));\n        cleanUpData(res);\n      }\n    } else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back();\n      });\n    }\n  };\n\n  const SearchBasic = async (keyword, option, isPaging) => {\n    if (!isPaging) {\n      setOptionIndex(option);\n    }\n\n    const res = await RequestMethod('get', `recordSearch`, {\n      path: {\n        page: isPaging !== null && isPaging !== void 0 ? isPaging : 1,\n        renderItem: 18,\n        tab: 'ROLE_PROD_06'\n      },\n      params: {\n        keyword: keyword !== null && keyword !== void 0 ? keyword : '',\n        opt: option !== null && option !== void 0 ? option : 0,\n        from: selectDate.from,\n        to: selectDate.to\n      }\n    });\n\n    if (res && res.status === 200) {\n      setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n        page: res.results.page,\n        total: res.results.totalPages\n      }));\n      cleanUpData(res);\n    }\n  };\n\n  const changeRow = row => {\n    var _row$osd, _row$osd2, _row$mold, _row$mold2, _row$machine, _row$machine2, _row$lot_number, _row$lot_number2, _row$confirm_quantity;\n\n    let tmpData = {};\n\n    if (row.additional && row.additional.length) {\n      row.additional.map(v => {\n        tmpData = _objectSpread(_objectSpread({}, tmpData), {}, {\n          [v.key]: v.value\n        });\n      });\n    }\n\n    return _objectSpread(_objectSpread({}, row), {}, {\n      identification: (_row$osd = row.osd) === null || _row$osd === void 0 ? void 0 : _row$osd.identification,\n      osd_id: (_row$osd2 = row.osd) === null || _row$osd2 === void 0 ? void 0 : _row$osd2.osd_id,\n      date: row.date,\n      customer_id: row.product.raw_material.model.customer.name,\n      customer_idPK: row.product.raw_material.model.customer.customer_id,\n      cm_id: row.product.raw_material.model.model,\n      cm_idPK: row.product.raw_material.model.cm_id,\n      code: row.product.raw_material.code,\n      name: row.product.raw_material.name,\n      texture: row.product.raw_material.texture,\n      product_id: row.product.product_id,\n      seq: row.seq,\n      process_id: row.process.name,\n      process_idPK: row.process.process_id,\n      mold_id: (_row$mold = row.mold) === null || _row$mold === void 0 ? void 0 : _row$mold.name,\n      mold_idPK: (_row$mold2 = row.mold) === null || _row$mold2 === void 0 ? void 0 : _row$mold2.mold_id,\n      machine_id: (_row$machine = row.machine) === null || _row$machine === void 0 ? void 0 : _row$machine.name,\n      machine_idPK: (_row$machine2 = row.machine) === null || _row$machine2 === void 0 ? void 0 : _row$machine2.machine_id,\n      goal: row.goal,\n      ln_id: (_row$lot_number = row.lot_number) === null || _row$lot_number === void 0 ? void 0 : _row$lot_number.number,\n      ln_idPK: (_row$lot_number2 = row.lot_number) === null || _row$lot_number2 === void 0 ? void 0 : _row$lot_number2.ln_id,\n      uph: Math.round(Number(row.uph) * 10) / 10,\n      good_quantity: row.good_quantity,\n      poor_quantity: row.poor_quantity,\n      poor_count: (_row$confirm_quantity = row.confirm_quantity) !== null && _row$confirm_quantity !== void 0 ? _row$confirm_quantity : 0,\n      achievement: row.achievement_rate,\n      user_id: row.worker.name,\n      user_idPK: row.worker.user_id,\n      worker: row.worker.name\n    }, tmpData);\n  };\n\n  const cleanUpData = res => {\n    let tmpColumn = columnlist.recordList;\n    let tmpRow = [];\n    tmpColumn = tmpColumn.map(column => {\n      let menuData;\n      res.results.menus && res.results.menus.map(menu => {\n        if (menu.colName === column.key) {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit,\n            moddable: !menu.moddable\n          };\n        } else if (menu.colName === 'id' && column.key === 'tmpId') {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit,\n            moddable: !menu.moddable\n          };\n        }\n      });\n\n      if (menuData) {\n        return _objectSpread(_objectSpread({}, column), menuData);\n      }\n    }).filter(v => v);\n    let additionalMenus = res.results.menus ? res.results.menus.map(menu => {\n      if (menu.colName === null) {\n        return {\n          id: menu.id,\n          name: menu.title,\n          width: menu.width,\n          key: menu.title,\n          editor: TextEditor,\n          type: 'additional',\n          unit: menu.unit\n        };\n      }\n    }).filter(v => v) : [];\n    setColumn([...tmpColumn.map(v => {\n      return _objectSpread(_objectSpread({}, v), {}, {\n        name: v.moddable ? v.name + '(필수)' : v.name\n      });\n    }), ...additionalMenus]);\n    tmpRow = res.results.info_list;\n    let additionalData = [];\n    additionalMenus.map(v => {\n      if (v.type === 'additional') {\n        additionalData.push(v.key);\n      }\n    });\n    let tmpBasicRow = tmpRow.map((row, index) => {\n      let realTableData = changeRow(row);\n      let appendAdditional = {};\n      row.additional && row.additional.map(v => {\n        appendAdditional = _objectSpread(_objectSpread({}, appendAdditional), {}, {\n          [v.title]: v.value\n        });\n      });\n      let tmpPauseTime = '';\n\n      if (row.paused_time || row.paused_time === 0) {\n        let seconds = Number(row.paused_time);\n        let hour = Math.floor(seconds / 3600) < 10 ? '0' + Math.floor(seconds / 3600) : Math.floor(seconds / 3600);\n        let min = Math.floor(seconds % 3600 / 60) < 10 ? '0' + Math.floor(seconds % 3600 / 60) : Math.floor(seconds % 3600 / 60);\n        let sec = Math.floor(seconds % 60) < 10 ? '0' + Math.floor(seconds % 60) : Math.floor(seconds % 60);\n        tmpPauseTime = hour + \":\" + min + \":\" + sec;\n      }\n\n      const random_id = Math.random() * 1000;\n      return _objectSpread(_objectSpread(_objectSpread({}, realTableData), appendAdditional), {}, {\n        paused_time: tmpPauseTime,\n        paused_timePK: row.paused_time,\n        id: `process_${random_id}`\n      });\n    });\n    setBasicRow([...tmpBasicRow]);\n  };\n\n  const downloadExcel = () => {\n    let tmpSelectList = [];\n    basicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id));\n    });\n    excelDownload(column, basicRow, `process`, 'process', tmpSelectList);\n  };\n\n  const onClickHeaderButton = index => {\n    switch (index) {\n      case 0:\n        setExcelOpen(true);\n        break;\n\n      case 1:\n        SaveBasic();\n        break;\n    }\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 5\n    }\n  }, __jsx(MenuNavigation, {\n    pageType: 'MES',\n    subType: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    style: {\n      paddingBottom: 40\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 7\n    }\n  }, __jsx(ProfileHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 9\n    }\n  }), __jsx(PageHeader, {\n    isSearch: true,\n    searchKeyword: keyword,\n    onChangeSearchKeyword: keyword => {\n      if (keyword) {\n        router.push(`/mes/record/list?page=1&keyword=${keyword}&opt=${optionIndex}`);\n      } else {\n        router.push(`/mes/record/list?page=1&keyword=`);\n      }\n    },\n    searchOptionList: optionList,\n    onChangeSearchOption: option => {\n      setOptionIndex(option);\n    },\n    optionIndex: optionIndex,\n    isCalendar: true,\n    calendarType: 'period',\n    selectDate: selectDate //@ts-ignore\n    ,\n    setSelectDate: setSelectDate,\n    title: title,\n    buttons: ['엑셀로 받기', '수정 하기', '삭제'],\n    buttonsOnclick: onClickHeaderButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 9\n    }\n  }), __jsx(ExcelTable, {\n    editable: true,\n    resizable: true,\n    pageInfo: pageInfo,\n    headerList: [SelectColumn, ...column],\n    top: top,\n    setTop: setTop,\n    row: basicRow // setRow={setBasicRow}\n    ,\n    setRow: e => {\n      let tmp = selectList;\n      e.map(v => {\n        if (v.isChange) tmp.add(v.id);\n      });\n      setSelectList(tmp);\n      setBasicRow(e);\n    },\n    selectList: selectList //@ts-ignore\n    ,\n    setSelectList: setSelectList,\n    loadEvent: LoadBasic,\n    height: basicRow.length * 40 >= 40 * 18 + 56 ? 40 * 19 : basicRow.length * 40 + 56,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 9\n    }\n  }), __jsx(PaginationComponent, {\n    currentPage: pageInfo.page,\n    totalPage: pageInfo.total,\n    setPage: page => {\n      if (keyword) {\n        router.push(`/mes/record/list?page=${page}&keyword=${keyword}&opt=${option}`);\n      } else {\n        router.push(`/mes/record/list?page=${page}`);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 9\n    }\n  })), __jsx(ExcelDownloadModal, {\n    isOpen: excelOpen,\n    column: column,\n    basicRow: basicRow,\n    filename: `작업완료리스트`,\n    sheetname: `작업완료리스트`,\n    selectList: selectList,\n    tab: 'ROLE_PROD_04',\n    setIsOpen: setExcelOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport const getServerSideProps = ctx => {\n  var _ctx$query$keyword, _ctx$query$opt;\n\n  return {\n    props: {\n      page: ctx.query.page,\n      keyword: (_ctx$query$keyword = ctx.query.keyword) !== null && _ctx$query$keyword !== void 0 ? _ctx$query$keyword : \"\",\n      option: (_ctx$query$opt = ctx.query.opt) !== null && _ctx$query$opt !== void 0 ? _ctx$query$opt : 0\n    }\n  };\n}; // BasicContainer.getInitialProps = async ({ query }) => {\n//   let { page, keyword, opt } = query\n//   if (typeof page === 'string')\n//     page = parseInt(page);\n//   if (typeof opt === 'string')\n//     opt = parseInt(opt);\n//   return { page, keyword, option: opt };\n// }\n\nexport default BasicContainer;","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/record/list.tsx"],"names":["React","useEffect","useState","ExcelTable","MenuNavigation","ProfileHeader","PageHeader","SelectColumn","RequestMethod","columnlist","Notiflix","useRouter","TextEditor","excelDownload","PaginationComponent","ExcelDownloadModal","moment","title","optList","BasicContainer","page","keyword","option","router","excelOpen","setExcelOpen","top","setTop","basicRow","setBasicRow","column","setColumn","recordList","selectList","setSelectList","Set","optionList","setOptionList","optionIndex","setOptionIndex","pageInfo","setPageInfo","total","selectDate","setSelectDate","from","startOf","format","to","endOf","SearchBasic","LoadBasic","then","loadPoorQunatity","or_id","res","path","results","poor_quantities","map","v","ord_id","pdr_id","pdr","amount","loadPauseTimes","paused_times","ppr_id","ppr","start","end","SaveBasic","tmpRows","row","i","has","id","selectKey","additional","push","key","type","selectData","customer_id","customer_idPK","cm_id","cm_idPK","ln_id","ln_idPK","mold_id","mold_idPK","process_id","process_idPK","machine_id","machine_idPK","good_quantity","Number","user_id","user_idPK","paused_time","paused_timePK","name","value","unit","filter","Promise","all","records","status","Report","success","Loading","remove","DeleteBasic","processes","pk","Object","keys","indexOf","renderItem","tab","params","totalPages","cleanUpData","state","failure","back","isPaging","opt","changeRow","tmpData","length","identification","osd","osd_id","date","product","raw_material","model","customer","code","texture","product_id","seq","process","mold","machine","goal","lot_number","number","uph","Math","round","poor_quantity","poor_count","confirm_quantity","achievement","achievement_rate","worker","tmpColumn","tmpRow","menuData","menus","menu","colName","width","moddable","additionalMenus","editor","info_list","additionalData","tmpBasicRow","index","realTableData","appendAdditional","tmpPauseTime","seconds","hour","floor","min","sec","random_id","random","downloadExcel","tmpSelectList","onClickHeaderButton","display","paddingBottom","e","tmp","isChange","add","getServerSideProps","ctx","props","query"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport ExcelTable from '../../../component/Excel/ExcelTable'\nimport MenuNavigation from '../../../component/MenuNav/MenuNavigation'\nimport ProfileHeader from '../../../component/Profile/ProfileHeader'\nimport PageHeader from '../../../component/Header/Header'\n// @ts-ignore\nimport {SelectColumn} from 'react-data-grid'\nimport {IExcelHeaderType, IItemMenuType} from '../../../common/@types/type'\nimport {RequestMethod} from '../../../common/RequestFunctions'\nimport {columnlist} from \"../../../common/columnInit\";\nimport Notiflix from \"notiflix\";\nimport {useRouter} from 'next/router'\nimport {MAX_VALUE} from '../../../common/configset'\nimport DropDownEditor from '../../../component/Dropdown/ExcelBasicDropdown'\nimport TextEditor from '../../../component/InputBox/ExcelBasicInputBox'\nimport {excelDownload} from '../../../common/excelDownloadFunction'\nimport {loadAll} from 'react-cookies'\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport PaginationComponent from '../../../component/Pagination/PaginationComponent'\nimport {NextPageContext} from 'next'\nimport ExcelDownloadModal from '../../../component/Modal/ExcelDownloadMoadal'\nimport moment from 'moment'\n\ninterface IProps {\n  children?: any\n  page?: number\n  keyword?: string\n  option?: number\n}\n\nconst title = '작업완료 리스트'\nconst optList = ['고객사명', '모델명','CODE','품명',]\n\nconst BasicContainer = ({page, keyword, option}: IProps) => {\n  const router = useRouter()\n\n  const [excelOpen, setExcelOpen] = useState<boolean>(false)\n\n  const [top, setTop] = useState<number>(0)\n  const [basicRow, setBasicRow] = useState<Array<any>>([])\n  const [column, setColumn] = useState<Array<IExcelHeaderType>>(columnlist.recordList)\n  const [selectList, setSelectList] = useState<Set<number>>(new Set())\n  const [optionList, setOptionList] = useState<string[]>(optList)\n  const [optionIndex, setOptionIndex] = useState<number>(0)\n  // const [keyword, setKeyword] = useState<string>('')\n  const [pageInfo, setPageInfo] = useState<{page: number, total: number}>({\n    page: page,\n    total: 1\n  })\n  const [selectDate, setSelectDate] = useState<{from:string, to:string}>({\n    from: moment().startOf('isoWeek').format('YYYY-MM-DD'),\n    to: moment().endOf('isoWeek').format('YYYY-MM-DD')\n  });\n\n  useEffect(() => {\n    if(keyword){\n      SearchBasic(keyword, option, page)\n    }else{\n      LoadBasic(page).then(() => {})\n    }\n  }, [page, keyword, option, selectDate])\n\n  const loadPoorQunatity = async (or_id: number) => {\n    let res = await RequestMethod('get', `recordDefect`,{ path: { or_id } })\n\n    if(res){\n      return res.results.poor_quantities.map(v => {\n        return {\n          ord_id: v.ord_id,\n          pdr_id: v.pdr.pdr_id,\n          amount: v.amount\n        }\n      })\n    }\n    return\n  }\n\n  const loadPauseTimes = async (or_id: number) => {\n    let res = await RequestMethod('get', `recordPause`,{ path: { or_id } })\n\n    if(res){\n      return res.results.paused_times.map(v => {\n        return {\n          ord_id: v.ord_id,\n          ppr_id: v.ppr.ppr_id,\n          start: v.start,\n          end: v.end,\n          amount: v.amount\n        }\n      })\n    }\n    return\n  }\n\n  const SaveBasic = async () => {\n    const tmpRows = basicRow.map(async (row, i) => {\n      if(selectList.has(row.id)){\n        let selectKey: string[] = []\n        let additional:any[] = []\n        column.map((v) => {\n          if(v.selectList){\n            selectKey.push(v.key)\n          }\n\n          if(v.type === 'additional'){\n            additional.push(v)\n          }\n        })\n\n        let selectData: any = {}\n\n        return {\n          ...row,\n          ...selectData,\n          customer_id: row.customer_idPK,\n          cm_id: row.cm_idPK,\n          ln_id: row.ln_idPK,\n          mold_id: row.mold_idPK,\n          process_id: row.process_idPK,\n          machine_id: row.machine_idPK,\n          good_quantity: Number(row.good_quantity),\n          user_id: row.user_idPK,\n          poor_quantities: row.poor_quantities ?? await loadPoorQunatity(row.or_id),\n          paused_times: row.paused_times ?? await loadPauseTimes(row.or_id),\n          paused_time: row.paused_timePK,\n          additional: [\n            ...additional.map(v => {\n              if(row[v.name]) {\n                return {\n                  id: v.id,\n                  title: v.name,\n                  value: row[v.name],\n                  unit: v.unit\n                }\n              }\n            }).filter((v) => v)\n          ]\n        }\n\n      }\n    })\n\n    Promise.all(tmpRows).then(async (v) => {\n      let res = await RequestMethod('post', `recordSave`,\n        {\n          records: v.filter((v)=>v)\n        })\n\n      if(res){\n        if(res.status === 200){\n          Notiflix.Report.success('저장되었습니다.','','확인');\n          if(keyword){\n            SearchBasic(keyword, option, page).then(() => {\n              Notiflix.Loading.remove()\n            })\n          }else{\n            LoadBasic(page).then(() => {\n              Notiflix.Loading.remove()\n            })\n          }\n        }\n      }\n    })\n  }\n\n  const DeleteBasic = async () => {\n    const res = await RequestMethod('delete', `processDelete`,\n      {\n        processes: basicRow.map((row, i) => {\n          if(selectList.has(row.id)){\n            let pk = \"\"\n            Object.keys(row).map((v:string) => {\n              if(v.indexOf(\"_id\") !== -1){\n                pk = v\n              }\n            })\n\n            return row[pk]\n          }\n        }).filter((v) => v)\n      })\n\n    if(res) {\n      if(res.status === 200){\n        if(keyword){\n          router.push(`/mes/record/list?page=1&keyword=${keyword}&opt=${option}`)\n        }else{\n          router.push(`/mes/record/list?page=1`)\n        }\n      }\n    }\n  }\n\n  const LoadBasic = async (page?: number) => {\n    const res: any = await RequestMethod('get', `recordList`,{\n      path: {\n        page: (page || page !== 0) ? page : 1,\n        renderItem: 18,\n        tab: 'ROLE_PROD_06'\n      },\n      params: {\n        from: selectDate.from,\n        to: selectDate.to,\n      }\n    })\n\n    if(res && res.status === 200){\n      if(res.results.totalPages < page){\n        LoadBasic(page - 1)\n      }else{\n        setPageInfo({\n          ...pageInfo,\n          page: res.results.page,\n          total: res.results.totalPages\n        })\n        cleanUpData(res)\n      }\n    } else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back()\n      })\n    }\n  }\n\n  const SearchBasic = async (keyword: any, option: number, isPaging?: number) => {\n    if(!isPaging){\n      setOptionIndex(option)\n    }\n\n    const res = await RequestMethod('get', `recordSearch`,{\n      path: {\n        page: isPaging ?? 1,\n        renderItem: 18,\n        tab: 'ROLE_PROD_06'\n      },\n      params: {\n        keyword: keyword ?? '',\n        opt: option ?? 0,\n        from: selectDate.from,\n        to: selectDate.to\n      }\n    })\n\n    if(res && res.status === 200){\n      setPageInfo({\n        ...pageInfo,\n        page: res.results.page,\n        total: res.results.totalPages\n      })\n      cleanUpData(res)\n    }\n  }\n\n  const changeRow = (row: any) => {\n    let tmpData = {}\n\n    if(row.additional && row.additional.length) {\n      row.additional.map(v => {\n        tmpData = {\n          ...tmpData,\n          [v.key]: v.value\n        }\n      })\n    }\n\n    return {\n      ...row,\n      identification: row.osd?.identification,\n      osd_id: row.osd?.osd_id,\n      date: row.date,\n      customer_id: row.product.raw_material.model.customer.name,\n      customer_idPK: row.product.raw_material.model.customer.customer_id,\n      cm_id: row.product.raw_material.model.model,\n      cm_idPK: row.product.raw_material.model.cm_id,\n      code: row.product.raw_material.code,\n      name: row.product.raw_material.name,\n      texture: row.product.raw_material.texture,\n      product_id: row.product.product_id,\n      seq: row.seq,\n      process_id: row.process.name,\n      process_idPK: row.process.process_id,\n      mold_id: row.mold?.name,\n      mold_idPK: row.mold?.mold_id,\n      machine_id: row.machine?.name,\n      machine_idPK: row.machine?.machine_id,\n      goal: row.goal,\n      ln_id: row.lot_number?.number,\n      ln_idPK: row.lot_number?.ln_id,\n      uph: Math.round(Number(row.uph) * 10) / 10,\n      good_quantity: row.good_quantity,\n      poor_quantity: row.poor_quantity,\n      poor_count: row.confirm_quantity ?? 0,\n      achievement: row.achievement_rate,\n      user_id: row.worker.name,\n      user_idPK: row.worker.user_id,\n      worker: row.worker.name,\n      ...tmpData\n    }\n  }\n\n  const cleanUpData = (res: any) => {\n    let tmpColumn = columnlist.recordList\n    let tmpRow = []\n    tmpColumn = tmpColumn.map((column: any) => {\n      let menuData: object | undefined;\n      res.results.menus && res.results.menus.map((menu: any) => {\n        if(menu.colName === column.key){\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab:menu.tab,\n            unit:menu.unit,\n            moddable: !menu.moddable\n          }\n        } else if(menu.colName === 'id' && column.key === 'tmpId'){\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab:menu.tab,\n            unit:menu.unit,\n            moddable: !menu.moddable\n          }\n        }\n      })\n\n      if(menuData){\n        return {\n          ...column,\n          ...menuData\n        }\n      }\n    }).filter((v:any) => v)\n\n    let additionalMenus = res.results.menus ? res.results.menus.map((menu:any) => {\n      if(menu.colName === null){\n        return {\n          id: menu.id,\n          name: menu.title,\n          width: menu.width,\n          key: menu.title,\n          editor: TextEditor,\n          type: 'additional',\n          unit: menu.unit\n        }\n      }\n    }).filter((v: any) => v) : []\n\n    setColumn([...tmpColumn.map(v=> {\n      return {\n        ...v,\n        name: v.moddable ? v.name+'(필수)' : v.name\n      }\n    }), ...additionalMenus])\n\n    tmpRow = res.results.info_list\n\n    let additionalData: any[] = []\n\n    additionalMenus.map((v: any) => {\n      if(v.type === 'additional'){\n        additionalData.push(v.key)\n      }\n    })\n\n    let tmpBasicRow = tmpRow.map((row: any, index: number) => {\n      let realTableData: any = changeRow(row)\n      let appendAdditional: any = {}\n\n      row.additional && row.additional.map((v: any) => {\n        appendAdditional = {\n          ...appendAdditional,\n          [v.title]: v.value\n        }\n      })\n\n      let tmpPauseTime = ''\n\n      if(row.paused_time || row.paused_time === 0){\n        let seconds = Number(row.paused_time)\n        let hour = Math.floor(seconds/3600) < 10 ? '0'+ Math.floor(seconds/3600) :Math.floor(seconds/3600)\n        let min = Math.floor((seconds%3600)/60) < 10 ? '0'+ Math.floor((seconds%3600)/60) : Math.floor((seconds%3600)/60)\n        let sec = Math.floor(seconds%60) < 10 ? '0'+Math.floor(seconds%60) : Math.floor(seconds%60)\n\n        tmpPauseTime = hour+\":\"+min+\":\"+sec\n      }\n\n      const random_id = Math.random()*1000\n\n      return {\n        ...realTableData,\n        ...appendAdditional,\n        paused_time: tmpPauseTime,\n        paused_timePK: row.paused_time,\n        id: `process_${random_id}`,\n      }\n    })\n\n    setBasicRow([...tmpBasicRow])\n  }\n\n  const downloadExcel = () => {\n    let tmpSelectList: boolean[] = []\n    basicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id))\n    })\n    excelDownload(column, basicRow, `process`, 'process', tmpSelectList)\n  }\n\n  const onClickHeaderButton = (index: number) => {\n    switch(index){\n      case 0:\n        setExcelOpen(true)\n        break;\n      case 1:\n        SaveBasic()\n        break;\n    }\n  }\n\n  return (\n    <div style={{display: 'flex', }}>\n      <MenuNavigation pageType={'MES'} subType={0}/>\n      <div style={{paddingBottom: 40}}>\n        <ProfileHeader/>\n        <PageHeader\n          isSearch\n          searchKeyword={keyword}\n          onChangeSearchKeyword={(keyword) => {\n            if(keyword){\n              router.push(`/mes/record/list?page=1&keyword=${keyword}&opt=${optionIndex}`)\n            }else{\n              router.push(`/mes/record/list?page=1&keyword=`)\n            }\n          }}\n          searchOptionList={optionList}\n          onChangeSearchOption={(option) => {\n            setOptionIndex(option)\n          }}\n          optionIndex={optionIndex}\n          isCalendar\n          calendarType={'period'}\n          selectDate={selectDate}\n          //@ts-ignore\n          setSelectDate={setSelectDate}\n          title={title}\n          buttons={['엑셀로 받기', '수정 하기', '삭제']}\n          buttonsOnclick={onClickHeaderButton}\n        />\n        <ExcelTable\n          editable\n          resizable\n          pageInfo={pageInfo}\n          headerList={[\n            SelectColumn,\n            ...column\n          ]}\n          top={top}\n          setTop={setTop}\n          row={basicRow}\n          // setRow={setBasicRow}\n          setRow={(e) => {\n            let tmp: Set<any> = selectList\n            e.map(v => {\n              if(v.isChange) tmp.add(v.id)\n            })\n            setSelectList(tmp)\n            setBasicRow(e)\n          }}\n          selectList={selectList}\n          //@ts-ignore\n          setSelectList={setSelectList}\n          loadEvent={LoadBasic}\n          height={basicRow.length * 40 >= 40*18+56 ? 40*19 : basicRow.length * 40 + 56}\n        />\n        <PaginationComponent\n          currentPage={pageInfo.page}\n          totalPage={pageInfo.total}\n          setPage={(page) => {\n            if(keyword){\n              router.push(`/mes/record/list?page=${page}&keyword=${keyword}&opt=${option}`)\n            }else{\n              router.push(`/mes/record/list?page=${page}`)\n            }\n          }}\n        />\n      </div>\n      <ExcelDownloadModal\n        isOpen={excelOpen}\n        column={column}\n        basicRow={basicRow}\n        filename={`작업완료리스트`}\n        sheetname={`작업완료리스트`}\n        selectList={selectList}\n        tab={'ROLE_PROD_04'}\n        setIsOpen={setExcelOpen}\n      />\n    </div>\n  );\n}\n\nexport const getServerSideProps = (ctx: NextPageContext) => {\n  return {\n    props: {\n      page: ctx.query.page,\n      keyword: ctx.query.keyword ?? \"\",\n      option: ctx.query.opt ?? 0,\n    }\n  }\n}\n\n// BasicContainer.getInitialProps = async ({ query }) => {\n//   let { page, keyword, opt } = query\n//   if (typeof page === 'string')\n//     page = parseInt(page);\n//   if (typeof opt === 'string')\n//     opt = parseInt(opt);\n//   return { page, keyword, option: opt };\n// }\n\nexport default BasicContainer;\n"]},"metadata":{},"sourceType":"module"}