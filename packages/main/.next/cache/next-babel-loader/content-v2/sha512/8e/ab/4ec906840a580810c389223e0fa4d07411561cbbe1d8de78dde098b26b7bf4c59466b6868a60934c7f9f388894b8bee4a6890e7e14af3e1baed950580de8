{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/basic/register/defect.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from \"react\";\nimport MenuNavigation from \"../../../../component/MenuNav/MenuNavigation\";\nimport ProfileHeader from \"../../../../component/Profile/ProfileHeader\";\nimport { RequestMethod } from \"../../../../common/RequestFunctions\";\nimport PageHeader from \"../../../../component/Header/Header\";\nimport ExcelTable from \"../../../../component/Excel/ExcelTable\";\nimport ButtonGroup from \"../../../../component/ButtonGroup\";\n//@ts-ignore\nimport { SelectColumn } from \"react-data-grid\";\nimport { columnlist } from \"../../../../common/columnInit\"; //@ts-ignore\n\nimport Notiflix from \"notiflix\";\nimport { excelDownload } from \"../../../../common/excelDownloadFunction\";\nimport { useRouter } from 'next/router';\nimport ExcelUploadModal from \"../../../../component/Modal/ExcelUploadModal\";\n\nconst RegisterBasicContainer = () => {\n  const {\n    0: processBasicRow,\n    1: setProcessBasicRow\n  } = useState([]);\n  const {\n    0: processColumn,\n    1: setProcessColumn\n  } = useState(columnlist[`pause`]);\n  const {\n    0: excelUploadOpen,\n    1: setExcelUploadOpen\n  } = useState(false);\n  const {\n    0: pauseBasicRow,\n    1: setPauseBasicRow\n  } = useState([]);\n  const {\n    0: pauseColumn,\n    1: setPauseColumn\n  } = useState(columnlist[`defectReason`]);\n  const {\n    0: selectRow,\n    1: setSelectRow\n  } = useState(0);\n  const {\n    0: processId,\n    1: setProcessId\n  } = useState(0);\n  const {\n    0: state,\n    1: setState\n  } = useState(false);\n  const {\n    0: selectList,\n    1: setSelectList\n  } = useState(new Set());\n  const router = useRouter();\n  useEffect(() => {\n    if (processBasicRow.length > 0) {\n      LoadPauseList(processBasicRow[selectRow].process_id);\n    }\n  }, [selectRow]);\n\n  const cleanUpBasicData = res => {\n    let tmpRow = [];\n    tmpRow = res.data.results.info_list.map((column, index) => {\n      let menuData = {};\n      menuData = {\n        index: index + 1,\n        width: column.width // id:Math.random()*100\n        // id: info.ppr_id,\n        // name: info.reason,\n\n      };\n      let random_id = Math.random() * 1000;\n      return _objectSpread(_objectSpread({\n        id: random_id\n      }, column), menuData);\n    });\n    setPauseBasicRow([...tmpRow]);\n  };\n\n  const LoadPauseList = async value => {\n    const res = await RequestMethod(\"get\", `defectReasonList`, {\n      path: {\n        page: 1,\n        renderItem: 51,\n        process_id: value\n      }\n    });\n\n    if (res && res.status === 200) {\n      let tmpColumn = columnlist[`defectReason`];\n      tmpColumn = tmpColumn.map((value, index) => {\n        return _objectSpread(_objectSpread({}, value), {}, {\n          key: value.key,\n          name: value.name,\n          width: value.width\n        });\n      });\n      setPauseColumn(tmpColumn); // tmpColumn.push({key:})\n\n      let tmpRow = [];\n      tmpRow = res.results.info_list.map((column, index) => {\n        let menuData = {};\n        menuData = {\n          index: index + 1,\n          width: column.width // id:Math.random()*100\n          // id: info.ppr_id,\n          // name: info.reason,\n\n        };\n        let random_id = Math.random() * 1000;\n        return _objectSpread(_objectSpread({\n          id: random_id\n        }, column), menuData);\n      });\n      setPauseBasicRow([...tmpRow]);\n      Notiflix.Loading.remove(300);\n    } else {\n      Notiflix.Loading.remove(300);\n    }\n  };\n\n  const LoadBasic = async () => {\n    Notiflix.Loading.standard();\n    const res = await RequestMethod('get', `processList`, {\n      path: {\n        page: 1,\n        renderItem: 51\n      }\n    });\n\n    if (res && res.status === 200) {\n      if (res.results.info_list.length > 0) {\n        setProcessId(res.results.info_list[selectRow].process_id);\n      }\n\n      let tmpColumn = columnlist[`pause`];\n      let tmpRow = [];\n      tmpColumn = tmpColumn.map(column => {\n        let menuData = {};\n        res.results.menus.map(menu => {\n          if (menu.colName === column.key) {\n            menuData = {\n              id: menu.id,\n              name: menu.title,\n              width: 1560\n            };\n          }\n        });\n        return _objectSpread(_objectSpread({}, column), menuData);\n      });\n      tmpRow = res.results.info_list;\n\n      if (res.results.info_list.length > 0) {\n        LoadPauseList(res.results.info_list[selectRow].process_id);\n      } else {\n        Notiflix.Loading.remove(300);\n      }\n\n      setProcessColumn(tmpColumn);\n      setProcessBasicRow([...tmpRow.map(row => {\n        return _objectSpread({}, row);\n      })]);\n    } else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back();\n      });\n    }\n  };\n\n  const downloadExcel = () => {\n    let tmpSelectList = [];\n    pauseBasicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id));\n    });\n    excelDownload(pauseColumn, pauseBasicRow, `공정별 불량유형 등록`, '공정별 불량유형 등록', tmpSelectList);\n  };\n\n  const buttonEvents = async index => {\n    switch (index) {\n      case 0:\n        setExcelUploadOpen(true);\n        return;\n\n      case 1:\n        downloadExcel();\n        return;\n\n      case 2:\n        let dataRow = {};\n        columnlist[`defectReason`].map((key, index) => {\n          if (key.key === \"index\") {\n            dataRow[key.key] = pauseBasicRow.length + 1;\n            dataRow.id = Math.random() * 100;\n          } else {\n            dataRow[key.key] = \"\";\n          }\n        });\n\n        if (processId !== 0) {\n          pauseBasicRow.push(_objectSpread({}, dataRow));\n          setPauseBasicRow([...pauseBasicRow]);\n        } else {\n          Notiflix.Report.warning(\"선택된 공정이 없습니다.\", \"\", \"확인\");\n        } // pauseBasicRow.push({...dataRow})\n        // setPauseBasicRow([...pauseBasicRow])\n\n\n        return;\n\n      case 3:\n        // let validation = true;\n        Notiflix.Loading.standard();\n        let savePauseBasicRow = [];\n        pauseBasicRow.map(value => {\n          if (value.reason === \"\" || value.reason === undefined) {// validation = false;\n          } else {\n            savePauseBasicRow.push(value);\n          }\n        });\n\n        if (pauseBasicRow.length > 0) {\n          RequestMethod(\"post\", `defectSave`, {\n            process_id: processBasicRow[selectRow].process_id,\n            reasons: savePauseBasicRow\n          }).then(() => {\n            Notiflix.Loading.remove(300);\n            Notiflix.Report.success(\"저장되었습니다.\", \"\", \"확인\");\n            LoadBasic();\n          });\n        } else {\n          Notiflix.Loading.remove(300);\n          Notiflix.Report.warning(\"저장할 데이터가 없습니다\", \"\", \"확인\");\n        }\n\n        return;\n\n      case 4:\n        Notiflix.Confirm.show(\"경고\", \"삭제하시겠습니까?\", \"확인\", \"취소\", async () => {\n          const idList = [];\n          const spliceArray = [];\n          pauseBasicRow.map((v, i) => {\n            if (selectList.has(v.id)) {\n              spliceArray.push(i);\n              idList.push(v.pdr_id);\n            }\n          });\n          const tmpPauseBasicRow = [...pauseBasicRow];\n          spliceArray.reverse();\n          spliceArray.map((value, index) => {\n            tmpPauseBasicRow.splice(value, 1);\n          });\n          const res = await RequestMethod(\"delete\", `defectDelete`, {\n            reasons: idList.filter(v => v)\n          });\n\n          if (res && res.status === 200) {\n            Notiflix.Report.success(\"삭제되었습니다.\", \"\", \"확인\");\n            sortObject(tmpPauseBasicRow); // LoadPauseList(processBasicRow[selectRow].process_id);\n          }\n        }, () => {});\n    }\n  };\n\n  const sortObject = object => {\n    const compare_qty = (a, b) => {\n      // a should come before b in the sorted order\n      if (a.lengthIndex < b.lengthIndex) {\n        return -1; // a should come after b in the sorted order\n      } else if (a.lengthIndex > b.lengthIndex) {\n        return 1; // a and b are the same\n      } else {\n        return 0;\n      }\n    };\n\n    object.sort(compare_qty);\n    let sortData = object.map((v, index) => {\n      return _objectSpread(_objectSpread({}, v), {}, {\n        index: index + 1,\n        lengthIndex: index + 1\n      });\n    });\n    setPauseBasicRow([...sortData]);\n  };\n\n  useEffect(() => {\n    LoadBasic();\n  }, []);\n  useEffect(() => {\n    if (state) {\n      sortObject(pauseBasicRow);\n      setState(false);\n    }\n  }, [pauseBasicRow]);\n  return __jsx(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 9\n    }\n  }, __jsx(MenuNavigation, {\n    pageType: 'BASIC',\n    subType: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 13\n    }\n  }, __jsx(ProfileHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 17\n    }\n  }, __jsx(PageHeader, {\n    title: \"공정별 불량유형 등록\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 21\n    }\n  }), __jsx(ExcelTable, {\n    editable: true,\n    headerList: [...processColumn],\n    row: processBasicRow,\n    setRow: setProcessBasicRow,\n    setSelectRow: setSelectRow,\n    width: 1576,\n    height: 300,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 21\n    }\n  }), __jsx(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      margin: \"15px 0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 21\n    }\n  }, __jsx(\"span\", {\n    style: {\n      color: \"white\",\n      fontSize: 22,\n      fontWeight: \"bold\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 25\n    }\n  }, processBasicRow[selectRow] && processBasicRow[selectRow].name), __jsx(ButtonGroup, {\n    buttons: [\"엑셀로 업로드\", \"엑셀로 받기\", \"행 추가\", \"저장하기\", \"삭제\"],\n    buttonsOnclick: buttonEvents,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 25\n    }\n  })), __jsx(ExcelTable, {\n    editable: true,\n    headerList: [SelectColumn, ...pauseColumn],\n    row: pauseBasicRow,\n    setRow: e => {\n      let tmp = selectList;\n      e.map(v => {\n        if (v.isChange) tmp.add(v.id);\n      });\n      setSelectList(tmp);\n      setState(true);\n      setPauseBasicRow(e);\n    },\n    width: 1570,\n    height: 440 // setSelectList={changeSetSelectList}\n    //@ts-ignore\n    ,\n    setSelectList: setSelectList,\n    selectList: selectList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 21\n    }\n  }))), __jsx(ExcelUploadModal, {\n    isOpen: excelUploadOpen,\n    setIsOpen: setExcelUploadOpen,\n    tab: 'ROLE_BASE_03',\n    cleanUpBasicData: cleanUpBasicData,\n    parent: processId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default RegisterBasicContainer;","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/basic/register/defect.tsx"],"names":["React","useEffect","useState","MenuNavigation","ProfileHeader","RequestMethod","PageHeader","ExcelTable","ButtonGroup","SelectColumn","columnlist","Notiflix","excelDownload","useRouter","ExcelUploadModal","RegisterBasicContainer","processBasicRow","setProcessBasicRow","processColumn","setProcessColumn","excelUploadOpen","setExcelUploadOpen","pauseBasicRow","setPauseBasicRow","pauseColumn","setPauseColumn","selectRow","setSelectRow","processId","setProcessId","state","setState","selectList","setSelectList","Set","router","length","LoadPauseList","process_id","cleanUpBasicData","res","tmpRow","data","results","info_list","map","column","index","menuData","width","random_id","Math","random","id","value","path","page","renderItem","status","tmpColumn","key","name","Loading","remove","LoadBasic","standard","menus","menu","colName","title","row","Report","failure","back","downloadExcel","tmpSelectList","push","has","buttonEvents","dataRow","warning","savePauseBasicRow","reason","undefined","reasons","then","success","Confirm","show","idList","spliceArray","v","i","pdr_id","tmpPauseBasicRow","reverse","splice","filter","sortObject","object","compare_qty","a","b","lengthIndex","sort","sortData","display","justifyContent","margin","color","fontSize","fontWeight","e","tmp","isChange","add"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport styled from \"styled-components\";\nimport MenuNavigation from \"../../../../component/MenuNav/MenuNavigation\";\nimport ProfileHeader from \"../../../../component/Profile/ProfileHeader\";\nimport {RequestMethod} from \"../../../../common/RequestFunctions\";\nimport PageHeader from \"../../../../component/Header/Header\";\nimport ExcelTable from \"../../../../component/Excel/ExcelTable\";\nimport ButtonGroup from \"../../../../component/ButtonGroup\";\n\nimport {IExcelHeaderType} from \"../../../../common/@types/type\";\n//@ts-ignore\nimport {SelectColumn} from \"react-data-grid\";\nimport {columnlist} from \"../../../../common/columnInit\";\n//@ts-ignore\nimport Notiflix from \"notiflix\";\nimport {excelDownload} from \"../../../../common/excelDownloadFunction\";\nimport {useRouter} from 'next/router'\nimport ExcelUploadModal from \"../../../../component/Modal/ExcelUploadModal\";\n\nconst RegisterBasicContainer = () => {\n\n    const [processBasicRow, setProcessBasicRow] = useState<any[]>([]);\n    const [processColumn, setProcessColumn] = useState<Array<IExcelHeaderType>>(columnlist[`pause`] );\n\n    const [excelUploadOpen, setExcelUploadOpen] = useState<boolean>(false);\n\n\n    const [pauseBasicRow, setPauseBasicRow] = useState<any[]>([]);\n    const [pauseColumn, setPauseColumn] = useState<Array<IExcelHeaderType>>(columnlist[`defectReason`]);\n    const [selectRow, setSelectRow] = useState<any>(0);\n\n    const [processId, setProcessId] = useState<number>(0);\n\n    const [state, setState] = useState<boolean>(false);\n\n    const [selectList, setSelectList] = useState<Set<any>>(new Set());\n\n    const router = useRouter()\n\n    useEffect(()=>{\n        if(processBasicRow.length > 0){\n            LoadPauseList(processBasicRow[selectRow].process_id);\n        }\n    },[selectRow])\n\n    const cleanUpBasicData = (res:any) => {\n        let tmpRow = [];\n        tmpRow = res.data.results.info_list.map((column: any,index:number) => {\n            let menuData: object = {};\n\n            menuData = {\n                index:index+1,\n                width: column.width,\n                // id:Math.random()*100\n                // id: info.ppr_id,\n                // name: info.reason,\n            }\n            let random_id = Math.random()*1000;\n            return {\n                id: random_id,\n                ...column,\n                ...menuData\n            }\n        })\n        setPauseBasicRow([...tmpRow]);\n    }\n    const LoadPauseList = async (value:string) => {\n        const res = await RequestMethod(\"get\", `defectReasonList`,{\n            path: {\n                page:1,\n                renderItem:51,\n                process_id:value\n            }\n        })\n\n        if(res && res.status === 200){\n            let tmpColumn = columnlist[`defectReason`];\n            tmpColumn = tmpColumn.map((value:any,index:number) => {\n                return {...value, key:value.key, name:value.name, width:value.width}\n            })\n            setPauseColumn(tmpColumn);\n            // tmpColumn.push({key:})\n            let tmpRow = [];\n            tmpRow = res.results.info_list.map((column: any,index:number) => {\n                let menuData: object = {};\n\n                menuData = {\n                    index:index+1,\n                    width: column.width,\n                    // id:Math.random()*100\n                    // id: info.ppr_id,\n                    // name: info.reason,\n                }\n                let random_id = Math.random()*1000;\n                return {\n                    id: random_id,\n                    ...column,\n                    ...menuData\n                }\n            })\n            setPauseBasicRow([...tmpRow]);\n            Notiflix.Loading.remove(300);\n        }else{\n            Notiflix.Loading.remove(300);\n        }\n    }\n\n    const LoadBasic = async () => {\n        Notiflix.Loading.standard();\n        const res = await RequestMethod('get', `processList`,{\n            path: {\n                page: 1,\n                renderItem: 51,\n            }\n        })\n        if(res && res.status === 200){\n            if(res.results.info_list.length > 0){\n                setProcessId(res.results.info_list[selectRow].process_id)\n            }\n            let tmpColumn = columnlist[`pause`];\n            let tmpRow = []\n            tmpColumn = tmpColumn.map((column: any) => {\n                let menuData: object = {};\n\n                res.results.menus.map((menu: any) => {\n                    if(menu.colName === column.key){\n                        menuData = {\n                            id: menu.id,\n                            name: menu.title,\n                            width: 1560\n                        }\n                    }\n                })\n\n                return {\n                    ...column,\n                    ...menuData\n                }\n            })\n            tmpRow = res.results.info_list\n            if(res.results.info_list.length > 0){\n                LoadPauseList(res.results.info_list[selectRow].process_id);\n            }else{\n                Notiflix.Loading.remove(300);\n            }\n            setProcessColumn(tmpColumn);\n            setProcessBasicRow([...tmpRow.map((row: any) => {\n                return {\n                    ...row,\n                }\n            })])\n        }else if (res.state === 401) {\n            Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n                router.back()\n            })\n        }\n    }\n\n    const downloadExcel = () => {\n        let tmpSelectList: boolean[] = []\n        pauseBasicRow.map(row => {\n            tmpSelectList.push(selectList.has(row.id))\n        })\n        excelDownload(pauseColumn, pauseBasicRow, `공정별 불량유형 등록`, '공정별 불량유형 등록', tmpSelectList)\n    }\n\n\n    const buttonEvents = async(index:number) => {\n        switch (index) {\n            case 0 :\n                setExcelUploadOpen(true)\n                return\n            case 1 :\n                downloadExcel();\n                return\n            case 2 :\n                let dataRow:any = {};\n\n                columnlist[`defectReason`].map((key:any,index:number)=>{\n                    if(key.key === \"index\"){\n                        dataRow[key.key] = pauseBasicRow.length+1;\n                        dataRow.id = Math.random()*100;\n                    }else{\n                        dataRow[key.key] = \"\";\n                    }\n                })\n\n                if(processId !== 0){\n                    pauseBasicRow.push({...dataRow})\n                    setPauseBasicRow([...pauseBasicRow])\n                }else{\n                    Notiflix.Report.warning(\"선택된 공정이 없습니다.\",\"\",\"확인\");\n                }\n                // pauseBasicRow.push({...dataRow})\n                // setPauseBasicRow([...pauseBasicRow])\n                return\n            case 3 :\n                // let validation = true;\n                Notiflix.Loading.standard();\n                let savePauseBasicRow:any[] = [];\n                pauseBasicRow.map((value)=>{\n                    if(value.reason === \"\" || value.reason === undefined){\n                        // validation = false;\n                    }else{\n                        savePauseBasicRow.push(value);\n                    }\n                })\n                if(pauseBasicRow.length > 0 ){\n                    RequestMethod(\"post\", `defectSave`, {\n                        process_id:processBasicRow[selectRow].process_id,\n                        reasons:savePauseBasicRow\n                    }).then(()=>{\n                        Notiflix.Loading.remove(300);\n                        Notiflix.Report.success(\"저장되었습니다.\",\"\",\"확인\");\n                        LoadBasic();\n                    })\n                }else{\n                    Notiflix.Loading.remove(300);\n                    Notiflix.Report.warning(\"저장할 데이터가 없습니다\", \"\", \"확인\");\n                }\n                return\n\n            case 4 :\n                Notiflix.Confirm.show(\"경고\",\"삭제하시겠습니까?\",\"확인\",\"취소\",\n                    async()=>{\n                        const idList:number[] = [];\n                        const spliceArray:number[] = [];\n\n                        pauseBasicRow.map((v,i)=> {\n                            if(selectList.has(v.id)){\n                                spliceArray.push(i);\n                                idList.push(v.pdr_id)\n                            }\n                        })\n\n                        const tmpPauseBasicRow = [...pauseBasicRow];\n                        spliceArray.reverse();\n                        spliceArray.map((value, index)=>{\n                            tmpPauseBasicRow.splice(value, 1);\n                        })\n\n                        const res = await RequestMethod(\"delete\", `defectDelete`, {reasons:idList.filter(v => v) } );\n\n                        if(res && res.status === 200){\n                            Notiflix.Report.success(\"삭제되었습니다.\",\"\",\"확인\");\n                            sortObject(tmpPauseBasicRow);\n                            // LoadPauseList(processBasicRow[selectRow].process_id);\n                        }\n                    },\n                    ()=>{}\n                );\n\n\n        }\n    }\n\n    const sortObject = (object:any) => {\n        const  compare_qty = (a:any, b:any) => {\n            // a should come before b in the sorted order\n            if(a.lengthIndex < b.lengthIndex){\n                return -1;\n                // a should come after b in the sorted order\n            }else if(a.lengthIndex > b.lengthIndex){\n                return 1;\n                // a and b are the same\n            }else{\n                return 0;\n            }\n        }\n\n        object.sort(compare_qty)\n        let sortData = object.map((v:object, index:number)=>{\n            return {...v, index:index+1, lengthIndex:index+1}\n        });\n        setPauseBasicRow([...sortData]);\n\n    }\n\n    useEffect(()=>{\n\n        LoadBasic();\n    },[])\n\n    useEffect(()=>{\n        if(state){\n            sortObject(pauseBasicRow);\n            setState(false);\n        }\n    },[pauseBasicRow])\n\n    return (\n        <div style={{display:\"flex\"}}>\n            <MenuNavigation pageType={'BASIC'} subType={3}/>\n            <div>\n                <ProfileHeader/>\n\n                <div>\n                    <PageHeader title={\"공정별 불량유형 등록\"} />\n                    <ExcelTable\n                        editable\n                        headerList={[\n                            ...processColumn\n                        ]}\n                        row={processBasicRow}\n                        setRow={setProcessBasicRow}\n                        setSelectRow={setSelectRow}\n                        width={1576}\n                        height={300}\n                    />\n                    <div style={{display:\"flex\", justifyContent:\"space-between\", margin:\"15px 0\"}}>\n                        <span style={{color:\"white\", fontSize:22, fontWeight:\"bold\"}}>\n                            {processBasicRow[selectRow] && processBasicRow[selectRow].name}\n                        </span>\n                        <ButtonGroup buttons={[ \"엑셀로 업로드\", \"엑셀로 받기\", \"행 추가\", \"저장하기\", \"삭제\"]} buttonsOnclick={buttonEvents}/>\n                    </div>\n                    <ExcelTable\n                        editable\n                        headerList={[\n                            SelectColumn,\n                            ...pauseColumn\n                        ]}\n                        row={pauseBasicRow}\n                        setRow={(e) => {\n                            let tmp: Set<any> = selectList\n                            e.map(v => {\n                                if(v.isChange) tmp.add(v.id)\n                            })\n                            setSelectList(tmp)\n                            setState(true)\n                            setPauseBasicRow(e)\n                        }}\n                        width={1570}\n                        height={440}\n                        // setSelectList={changeSetSelectList}\n                        //@ts-ignore\n                        setSelectList={setSelectList}\n                        selectList={selectList}\n                    />\n                </div>\n            </div>\n            <ExcelUploadModal isOpen={excelUploadOpen} setIsOpen={setExcelUploadOpen} tab={'ROLE_BASE_03'} cleanUpBasicData={cleanUpBasicData} parent={processId} />\n        </div>\n    )\n}\n\nexport default RegisterBasicContainer;\n"]},"metadata":{},"sourceType":"module"}