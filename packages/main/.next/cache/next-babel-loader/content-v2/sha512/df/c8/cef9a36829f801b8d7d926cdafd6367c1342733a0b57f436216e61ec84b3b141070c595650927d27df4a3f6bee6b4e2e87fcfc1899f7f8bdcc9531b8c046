{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/basic/process/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport MenuNavigation from '../../../../component/MenuNav/MenuNavigation';\nimport ProfileHeader from '../../../../component/Profile/ProfileHeader';\nimport { RequestMethod } from '../../../../common/RequestFunctions';\nimport { columnlist } from \"../../../../common/columnInit\";\nimport Notiflix from \"notiflix\";\nimport { useRouter } from 'next/router';\nimport TextEditor from '../../../../component/InputBox/ExcelBasicInputBox';\nimport { excelDownload } from '../../../../common/excelDownloadFunction';\nimport { BasicProcess } from '../../../../../basic';\nconst title = '공정 종류 관리';\nconst optList = ['공정명'];\n\nconst BasicContainer = ({\n  page,\n  keyword,\n  option\n}) => {\n  const router = useRouter();\n  const {\n    0: excelOpen,\n    1: setExcelOpen\n  } = useState(false);\n  const {\n    0: excelUploadOpen,\n    1: setExcelUploadOpen\n  } = useState(false);\n  const {\n    0: top,\n    1: setTop\n  } = useState(0);\n  const {\n    0: basicRow,\n    1: setBasicRow\n  } = useState([]);\n  const {\n    0: column,\n    1: setColumn\n  } = useState(columnlist.process);\n  const {\n    0: selectList,\n    1: setSelectList\n  } = useState(new Set());\n  const {\n    0: optionList,\n    1: setOptionList\n  } = useState(optList);\n  const {\n    0: optionIndex,\n    1: setOptionIndex\n  } = useState(0); // const [keyword, setKeyword] = useState<string>('')\n\n  const {\n    0: pageInfo,\n    1: setPageInfo\n  } = useState({\n    page: page,\n    total: 1\n  });\n  useEffect(() => {\n    if (keyword) {\n      SearchBasic(keyword, option, page).then(() => {\n        Notiflix.Loading.remove();\n      });\n    } else {\n      LoadBasic(page).then(() => {\n        Notiflix.Loading.remove();\n      });\n    }\n  }, [page, keyword, option]);\n\n  const SaveBasic = async () => {\n    let res = await RequestMethod('post', `processSave`, {\n      processes: basicRow.map((row, i) => {\n        if (selectList.has(row.id)) {\n          let selectKey = [];\n          let additional = [];\n          column.map(v => {\n            if (v.selectList) {\n              selectKey.push(v.key);\n            }\n\n            if (v.type === 'additional') {\n              additional.push(v);\n            }\n          });\n          let selectData = {};\n          return _objectSpread(_objectSpread(_objectSpread({}, row), selectData), {}, {\n            additional: [...additional.map(v => {\n              if (row[v.name]) {\n                return {\n                  id: v.id,\n                  title: v.name,\n                  value: row[v.name],\n                  unit: v.unit\n                };\n              }\n            }).filter(v => v)]\n          });\n        }\n      }).filter(v => v)\n    });\n\n    if (res) {\n      if (res.status === 200) {\n        Notiflix.Report.success('저장되었습니다.', '', '확인');\n\n        if (keyword) {\n          SearchBasic(keyword, option, page).then(() => {\n            Notiflix.Loading.remove();\n          });\n        } else {\n          LoadBasic(page).then(() => {\n            Notiflix.Loading.remove();\n          });\n        }\n      }\n    }\n  };\n\n  const DeleteBasic = async () => {\n    const res = await RequestMethod('delete', `processDelete`, {\n      processes: basicRow.map((row, i) => {\n        if (selectList.has(row.id)) {\n          let pk = \"\";\n          Object.keys(row).map(v => {\n            if (v.indexOf(\"_id\") !== -1) {\n              pk = v;\n            }\n          });\n          return row[pk];\n        }\n      }).filter(v => v)\n    });\n\n    if (res) {\n      if (res.status === 200) {\n        Notiflix.Report.success('삭제 성공!', '공정 데이터를 삭제하였습니다.', '확인', () => {\n          if (Number(page) === 1) {\n            LoadBasic(1).then(() => {\n              Notiflix.Loading.remove();\n            });\n          } else {\n            if (keyword) {\n              router.push(`/mes/basic/process?page=1&keyword=${keyword}&opt=${option}`);\n            } else {\n              router.push(`/mes/basic/process?page=1`);\n            }\n          }\n        });\n      }\n    }\n  };\n\n  const LoadBasic = async page => {\n    Notiflix.Loading.circle();\n    const res = await RequestMethod('get', `processList`, {\n      path: {\n        page: page || page !== 0 ? page : 1,\n        renderItem: 18\n      }\n    });\n\n    if (res && res.status === 200) {\n      if (res.results.totalPages < page) {\n        LoadBasic(page - 1).then(() => {\n          Notiflix.Loading.remove();\n        });\n      } else {\n        setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n          page: res.results.page,\n          total: res.results.totalPages\n        }));\n        cleanUpData(res);\n      }\n    } else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back();\n      });\n    }\n  };\n\n  const SearchBasic = async (keyword, option, isPaging) => {\n    if (!isPaging) {\n      setOptionIndex(option);\n    }\n\n    const res = await RequestMethod('get', `processSearch`, {\n      path: {\n        page: isPaging !== null && isPaging !== void 0 ? isPaging : 1,\n        renderItem: 18\n      },\n      params: {\n        keyword: keyword !== null && keyword !== void 0 ? keyword : '',\n        opt: option !== null && option !== void 0 ? option : 0\n      }\n    });\n\n    if (res && res.status === 200) {\n      setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n        page: res.results.page,\n        total: res.results.totalPages\n      }));\n      cleanUpData(res);\n    }\n  };\n\n  const changeRow = row => {\n    let tmpData = {};\n\n    if (row.additional && row.additional.length) {\n      row.additional.map(v => {\n        tmpData = _objectSpread(_objectSpread({}, tmpData), {}, {\n          [v.key]: v.value\n        });\n      });\n    }\n\n    return _objectSpread({\n      process_id: row.process_id,\n      name: row.name\n    }, tmpData);\n  };\n\n  const cleanUpBasicData = res => {\n    let tmpRow = res.data.results.info_list;\n    let tmpBasicRow = tmpRow.map((row, index) => {\n      let realTableData = changeRow(row);\n      let appendAdditional = {};\n      row.additional && row.additional.map(v => {\n        appendAdditional = _objectSpread(_objectSpread({}, appendAdditional), {}, {\n          [v.title]: v.value\n        });\n      });\n      const random_id = Math.random() * 1000;\n      return _objectSpread(_objectSpread(_objectSpread({}, realTableData), appendAdditional), {}, {\n        id: `process_${random_id}`\n      });\n    });\n    setBasicRow([...tmpBasicRow]);\n  };\n\n  const cleanUpData = res => {\n    let tmpColumn = columnlist.process;\n    let tmpRow = [];\n    tmpColumn = tmpColumn.map(column => {\n      let menuData;\n      res.results.menus && res.results.menus.map(menu => {\n        if (menu.colName === column.key) {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit,\n            moddable: !menu.moddable\n          };\n        } else if (menu.colName === 'id' && column.key === 'tmpId') {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit,\n            moddable: !menu.moddable\n          };\n        }\n      });\n\n      if (menuData) {\n        return _objectSpread(_objectSpread({}, column), menuData);\n      }\n    }).filter(v => v);\n    let additionalMenus = res.results.menus ? res.results.menus.map(menu => {\n      if (menu.colName === null) {\n        return {\n          id: menu.id,\n          name: menu.title,\n          width: menu.width,\n          key: menu.title,\n          editor: TextEditor,\n          type: 'additional',\n          unit: menu.unit\n        };\n      }\n    }).filter(v => v) : [];\n    setColumn([...tmpColumn.map(v => {\n      return _objectSpread(_objectSpread({}, v), {}, {\n        name: v.moddable ? v.name + '(필수)' : v.name\n      });\n    }), ...additionalMenus]);\n    tmpRow = res.results.info_list;\n    let additionalData = [];\n    additionalMenus.map(v => {\n      if (v.type === 'additional') {\n        additionalData.push(v.key);\n      }\n    });\n    let tmpBasicRow = tmpRow.map((row, index) => {\n      let realTableData = changeRow(row);\n      let appendAdditional = {};\n      row.additional && row.additional.map(v => {\n        appendAdditional = _objectSpread(_objectSpread({}, appendAdditional), {}, {\n          [v.title]: v.value\n        });\n      });\n      const random_id = Math.random() * 1000;\n      return _objectSpread(_objectSpread(_objectSpread({}, realTableData), appendAdditional), {}, {\n        id: `process_${random_id}`\n      });\n    });\n    setBasicRow([...tmpBasicRow]);\n  };\n\n  const downloadExcel = () => {\n    let tmpSelectList = [];\n    basicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id));\n    });\n    excelDownload(column, basicRow, `process`, 'process', tmpSelectList);\n  };\n\n  const onClickHeaderButton = index => {\n    switch (index) {\n      case 0:\n        setExcelUploadOpen(true);\n        break;\n\n      case 1:\n        setExcelOpen(true);\n        break;\n\n      case 2:\n        router.push(`/mes/item/manage/process`);\n        break;\n\n      case 3:\n        let items = {};\n        column.map(value => {\n          if (value.selectList && value.selectList.length) {\n            items = _objectSpread(_objectSpread({}, value.selectList[0]), {}, {\n              [value.key]: value.selectList[0].name,\n              [value.key + 'PK']: value.selectList[0].pk\n            }, items);\n          }\n        });\n        const random_id = Math.random() * 1000;\n        setBasicRow([_objectSpread(_objectSpread({}, items), {}, {\n          id: `process_${random_id}`,\n          name: null,\n          additional: []\n        }), ...basicRow]);\n        break;\n\n      case 4:\n        SaveBasic();\n        break;\n\n      case 5:\n        Notiflix.Confirm.show(\"경고\", \"삭제하시겠습니까?\", \"확인\", \"취소\", () => {\n          DeleteBasic();\n        }, () => {});\n        break;\n    }\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 5\n    }\n  }, __jsx(MenuNavigation, {\n    pageType: 'BASIC',\n    subType: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    style: {\n      paddingBottom: 40\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 7\n    }\n  }, __jsx(ProfileHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 9\n    }\n  }), __jsx(BasicProcess, {\n    keyword: keyword,\n    page: page,\n    option: option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport const getServerSideProps = ctx => {\n  var _ctx$query$keyword, _ctx$query$option;\n\n  return {\n    props: {\n      page: ctx.query.page,\n      keyword: (_ctx$query$keyword = ctx.query.keyword) !== null && _ctx$query$keyword !== void 0 ? _ctx$query$keyword : \"\",\n      option: (_ctx$query$option = ctx.query.option) !== null && _ctx$query$option !== void 0 ? _ctx$query$option : 0\n    }\n  };\n}; // BasicContainer.getInitialProps = async ({ query }) => {\n//   let { page, keyword, opt } = query\n//   if (typeof page === 'string')\n//     page = parseInt(page);\n//   if (typeof opt === 'string')\n//     opt = parseInt(opt);\n//   return { page, keyword, option: opt };\n// }\n\nexport default BasicContainer;","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/basic/process/index.tsx"],"names":["React","useEffect","useState","MenuNavigation","ProfileHeader","RequestMethod","columnlist","Notiflix","useRouter","TextEditor","excelDownload","BasicProcess","title","optList","BasicContainer","page","keyword","option","router","excelOpen","setExcelOpen","excelUploadOpen","setExcelUploadOpen","top","setTop","basicRow","setBasicRow","column","setColumn","process","selectList","setSelectList","Set","optionList","setOptionList","optionIndex","setOptionIndex","pageInfo","setPageInfo","total","SearchBasic","then","Loading","remove","LoadBasic","SaveBasic","res","processes","map","row","i","has","id","selectKey","additional","v","push","key","type","selectData","name","value","unit","filter","status","Report","success","DeleteBasic","pk","Object","keys","indexOf","Number","circle","path","renderItem","results","totalPages","cleanUpData","state","failure","back","isPaging","params","opt","changeRow","tmpData","length","process_id","cleanUpBasicData","tmpRow","data","info_list","tmpBasicRow","index","realTableData","appendAdditional","random_id","Math","random","tmpColumn","menuData","menus","menu","colName","width","tab","moddable","additionalMenus","editor","additionalData","downloadExcel","tmpSelectList","onClickHeaderButton","items","Confirm","show","display","paddingBottom","getServerSideProps","ctx","props","query"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport ExcelTable from '../../../../component/Excel/ExcelTable'\nimport MenuNavigation from '../../../../component/MenuNav/MenuNavigation'\nimport ProfileHeader from '../../../../component/Profile/ProfileHeader'\nimport PageHeader from '../../../../component/Header/Header'\n// @ts-ignore\nimport {SelectColumn} from 'react-data-grid'\nimport {IExcelHeaderType, IItemMenuType} from '../../../../common/@types/type'\nimport {RequestMethod} from '../../../../common/RequestFunctions'\nimport {columnlist} from \"../../../../common/columnInit\";\nimport Notiflix from \"notiflix\";\nimport {useRouter} from 'next/router'\nimport {MAX_VALUE} from '../../../../common/configset'\nimport DropDownEditor from '../../../../component/Dropdown/ExcelBasicDropdown'\nimport TextEditor from '../../../../component/InputBox/ExcelBasicInputBox'\nimport {excelDownload} from '../../../../common/excelDownloadFunction'\nimport {loadAll} from 'react-cookies'\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport PaginationComponent from '../../../../component/Pagination/PaginationComponent'\nimport {NextPageContext} from 'next'\nimport ExcelDownloadModal from '../../../../component/Modal/ExcelDownloadMoadal'\nimport ExcelUploadModal from \"../../../../component/Modal/ExcelUploadModal\";\nimport {BasicProcess} from '../../../../../basic'\n\ninterface IProps {\n  children?: any\n  page?: number\n  keyword?: string\n  option?: number\n}\n\nconst title = '공정 종류 관리'\nconst optList = ['공정명']\n\nconst BasicContainer = ({page, keyword, option}: IProps) => {\n  const router = useRouter()\n\n  const [excelOpen, setExcelOpen] = useState<boolean>(false)\n  const [excelUploadOpen, setExcelUploadOpen] = useState<boolean>(false)\n\n  const [top, setTop] = useState<number>(0)\n  const [basicRow, setBasicRow] = useState<Array<any>>([])\n  const [column, setColumn] = useState<Array<IExcelHeaderType>>(columnlist.process)\n  const [selectList, setSelectList] = useState<Set<number>>(new Set())\n  const [optionList, setOptionList] = useState<string[]>(optList)\n  const [optionIndex, setOptionIndex] = useState<number>(0)\n  // const [keyword, setKeyword] = useState<string>('')\n  const [pageInfo, setPageInfo] = useState<{page: number, total: number}>({\n    page: page,\n    total: 1\n  })\n\n  useEffect(() => {\n    if(keyword){\n      SearchBasic(keyword, option, page).then(() => {\n        Notiflix.Loading.remove()\n      })\n    }else{\n      LoadBasic(page).then(() => {\n        Notiflix.Loading.remove()\n      })\n    }\n  }, [page, keyword, option])\n\n  const SaveBasic = async () => {\n    let res = await RequestMethod('post', `processSave`,\n    {\n      processes: basicRow.map((row, i) => {\n        if(selectList.has(row.id)){\n          let selectKey: string[] = []\n          let additional:any[] = []\n          column.map((v) => {\n            if(v.selectList){\n              selectKey.push(v.key)\n            }\n\n            if(v.type === 'additional'){\n              additional.push(v)\n            }\n          })\n\n          let selectData: any = {}\n\n          return {\n            ...row,\n            ...selectData,\n            additional: [\n              ...additional.map(v => {\n                if(row[v.name]) {\n                  return {\n                    id: v.id,\n                    title: v.name,\n                    value: row[v.name],\n                    unit: v.unit\n                  }\n                }\n              }).filter((v) => v)\n            ]\n          }\n\n        }\n      }).filter((v) => v)\n    })\n\n    if(res){\n      if(res.status === 200){\n        Notiflix.Report.success('저장되었습니다.','','확인');\n        if(keyword){\n          SearchBasic(keyword, option, page).then(() => {\n            Notiflix.Loading.remove()\n          })\n        }else{\n          LoadBasic(page).then(() => {\n            Notiflix.Loading.remove()\n          })\n        }\n      }\n    }\n  }\n\n  const DeleteBasic = async () => {\n    const res = await RequestMethod('delete', `processDelete`,\n      {\n        processes: basicRow.map((row, i) => {\n          if(selectList.has(row.id)){\n            let pk = \"\"\n            Object.keys(row).map((v:string) => {\n              if(v.indexOf(\"_id\") !== -1){\n                pk = v\n              }\n            })\n\n            return row[pk]\n          }\n        }).filter((v) => v)\n      })\n\n    if(res) {\n      if(res.status === 200){\n        Notiflix.Report.success('삭제 성공!', '공정 데이터를 삭제하였습니다.', '확인', () => {\n          if(Number(page) === 1){\n            LoadBasic(1).then(() => {\n              Notiflix.Loading.remove()\n            })\n          }else{\n            if(keyword){\n              router.push(`/mes/basic/process?page=1&keyword=${keyword}&opt=${option}`)\n            }else{\n              router.push(`/mes/basic/process?page=1`)\n            }\n          }\n        })\n      }\n    }\n  }\n\n  const LoadBasic = async (page?: number) => {\n    Notiflix.Loading.circle()\n    const res = await RequestMethod('get', `processList`,{\n      path: {\n        page: (page || page !== 0) ? page : 1,\n        renderItem: 18,\n      }\n    })\n\n    if(res && res.status === 200){\n      if(res.results.totalPages < page){\n        LoadBasic(page - 1).then(() => {\n          Notiflix.Loading.remove()\n        })\n      }else{\n        setPageInfo({\n          ...pageInfo,\n          page: res.results.page,\n          total: res.results.totalPages\n        })\n        cleanUpData(res)\n      }\n    }else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back()\n      })\n    }\n  }\n\n  const SearchBasic = async (keyword: any, option: number, isPaging?: number) => {\n    if(!isPaging){\n      setOptionIndex(option)\n    }\n\n    const res = await RequestMethod('get', `processSearch`,{\n      path: {\n        page: isPaging ?? 1,\n        renderItem: 18,\n      },\n      params: {\n        keyword: keyword ?? '',\n        opt: option ?? 0\n      }\n    })\n\n    if(res && res.status === 200){\n      setPageInfo({\n        ...pageInfo,\n        page: res.results.page,\n        total: res.results.totalPages\n      })\n      cleanUpData(res)\n    }\n  }\n\n  const changeRow = (row: any) => {\n    let tmpData = {}\n\n    if(row.additional && row.additional.length) {\n      row.additional.map(v => {\n        tmpData = {\n          ...tmpData,\n          [v.key]: v.value\n        }\n      })\n    }\n\n    return {\n      process_id: row.process_id,\n      name: row.name,\n      ...tmpData\n    }\n  }\n  const cleanUpBasicData = (res:any) => {\n    let tmpRow = res.data.results.info_list;\n\n    let tmpBasicRow = tmpRow.map((row: any, index: number) => {\n      let realTableData: any = changeRow(row)\n      let appendAdditional: any = {}\n\n      row.additional && row.additional.map((v: any) => {\n        appendAdditional = {\n          ...appendAdditional,\n          [v.title]: v.value\n        }\n      })\n\n      const random_id = Math.random()*1000\n\n      return {\n        ...realTableData,\n        ...appendAdditional,\n        id: `process_${random_id}`,\n      }\n    })\n    setBasicRow([...tmpBasicRow])\n  }\n  const cleanUpData = (res: any) => {\n    let tmpColumn = columnlist.process\n    let tmpRow = []\n    tmpColumn = tmpColumn.map((column: any) => {\n      let menuData: object | undefined;\n      res.results.menus && res.results.menus.map((menu: any) => {\n        if(menu.colName === column.key){\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab:menu.tab,\n            unit:menu.unit,\n            moddable: !menu.moddable\n          }\n        } else if(menu.colName === 'id' && column.key === 'tmpId'){\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab:menu.tab,\n            unit:menu.unit,\n            moddable: !menu.moddable\n          }\n        }\n      })\n\n      if(menuData){\n        return {\n          ...column,\n          ...menuData\n        }\n      }\n    }).filter((v:any) => v)\n\n    let additionalMenus = res.results.menus ? res.results.menus.map((menu:any) => {\n      if(menu.colName === null){\n        return {\n          id: menu.id,\n          name: menu.title,\n          width: menu.width,\n          key: menu.title,\n          editor: TextEditor,\n          type: 'additional',\n          unit: menu.unit\n        }\n      }\n    }).filter((v: any) => v) : []\n\n    setColumn([...tmpColumn.map(v=> {\n      return {\n        ...v,\n        name: v.moddable ? v.name+'(필수)' : v.name\n      }\n    }), ...additionalMenus])\n\n    tmpRow = res.results.info_list\n\n    let additionalData: any[] = []\n\n    additionalMenus.map((v: any) => {\n      if(v.type === 'additional'){\n        additionalData.push(v.key)\n      }\n    })\n\n    let tmpBasicRow = tmpRow.map((row: any, index: number) => {\n      let realTableData: any = changeRow(row)\n      let appendAdditional: any = {}\n\n      row.additional && row.additional.map((v: any) => {\n        appendAdditional = {\n          ...appendAdditional,\n          [v.title]: v.value\n        }\n      })\n\n      const random_id = Math.random()*1000\n\n      return {\n        ...realTableData,\n        ...appendAdditional,\n        id: `process_${random_id}`,\n      }\n    })\n\n    setBasicRow([...tmpBasicRow])\n  }\n\n  const downloadExcel = () => {\n    let tmpSelectList: boolean[] = []\n    basicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id))\n    })\n    excelDownload(column, basicRow, `process`, 'process', tmpSelectList)\n  }\n\n  const onClickHeaderButton = (index: number) => {\n    switch(index){\n      case 0:\n        setExcelUploadOpen(true)\n        break;\n      case 1:\n        setExcelOpen(true)\n        break;\n      case 2:\n          router.push(`/mes/item/manage/process`)\n        break;\n      case 3:\n        let items = {}\n\n        column.map((value) => {\n          if(value.selectList && value.selectList.length){\n            items = {\n              ...value.selectList[0],\n              [value.key] : value.selectList[0].name,\n              [value.key+'PK'] : value.selectList[0].pk,//여기 봐야됨!\n              ...items,\n            }\n          }\n        })\n\n        const random_id = Math.random()*1000\n\n        setBasicRow([\n          {\n            ...items,\n            id: `process_${random_id}`,\n            name: null,\n            additional: [],\n          },\n          ...basicRow\n        ])\n        break;\n\n      case 4:\n        SaveBasic()\n\n        break;\n      case 5:\n        Notiflix.Confirm.show(\"경고\",\"삭제하시겠습니까?\",\"확인\",\"취소\",\n            ()=>{DeleteBasic()},\n            ()=>{}\n        )\n\n        break;\n\n    }\n  }\n\n  return (\n    <div style={{display: 'flex', }}>\n      <MenuNavigation pageType={'BASIC'} subType={2}/>\n      <div style={{paddingBottom: 40}}>\n        <ProfileHeader/>\n        <BasicProcess keyword={keyword} page={page} option={option}/>\n      </div>\n    </div>\n  );\n}\n\nexport const getServerSideProps = (ctx: NextPageContext) => {\n  return {\n    props: {\n      page: ctx.query.page,\n      keyword: ctx.query.keyword ?? \"\",\n      option: ctx.query.option ?? 0,\n    }\n  }\n}\n\n// BasicContainer.getInitialProps = async ({ query }) => {\n//   let { page, keyword, opt } = query\n//   if (typeof page === 'string')\n//     page = parseInt(page);\n//   if (typeof opt === 'string')\n//     opt = parseInt(opt);\n//   return { page, keyword, option: opt };\n// }\n\nexport default BasicContainer;\n"]},"metadata":{},"sourceType":"module"}