{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/basic/customer/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport MenuNavigation from '../../../../component/MenuNav/MenuNavigation';\nimport ProfileHeader from '../../../../component/Profile/ProfileHeader';\nimport { RequestMethod } from '../../../../common/RequestFunctions';\nimport { columnlist } from \"../../../../common/columnInit\";\nimport Notiflix from \"notiflix\";\nimport { useRouter } from 'next/router';\nimport TextEditor from '../../../../component/InputBox/ExcelBasicInputBox';\nimport { excelDownload } from '../../../../common/excelDownloadFunction';\nimport { BasicCustomer } from '../../../../../basic';\n\nconst BasicContainer = ({\n  page,\n  keyword,\n  option\n}) => {\n  const router = useRouter();\n  const {\n    0: excelOpen,\n    1: setExcelOpen\n  } = useState(false);\n  const {\n    0: excelUploadOpen,\n    1: setExcelUploadOpen\n  } = useState(false);\n  const {\n    0: basicRow,\n    1: setBasicRow\n  } = useState([{\n    name: \"\",\n    id: \"\"\n  }]);\n  const {\n    0: column,\n    1: setColumn\n  } = useState(columnlist[\"customer\"]);\n  const {\n    0: selectList,\n    1: setSelectList\n  } = useState(new Set());\n  const {\n    0: optionList,\n    1: setOptionList\n  } = useState(['고객사명', '대표자명', '담당자명', '전화 번호', '휴대폰 번호', '팩스 번호', '주소', '사업자 번호']);\n  const {\n    0: optionIndex,\n    1: setOptionIndex\n  } = useState(option);\n  const {\n    0: pageInfo,\n    1: setPageInfo\n  } = useState({\n    page: 1,\n    total: 1\n  });\n  useEffect(() => {\n    if (keyword) {\n      SearchBasic(keyword, option, page).then(() => {\n        Notiflix.Loading.remove();\n      });\n    } else {\n      LoadBasic(page).then(() => {\n        Notiflix.Loading.remove();\n      }).then(() => {\n        Notiflix.Loading.remove();\n      });\n    }\n  }, [page, keyword, option]);\n\n  const SaveBasic = async () => {\n    let res;\n    res = await RequestMethod('post', `customerSave`, {\n      ['customers']: basicRow.map((row, i) => {\n        if (selectList.has(row.id)) {\n          let selectKey = [];\n          let additional = [];\n          column.map(v => {\n            if (v.selectList) {\n              selectKey.push(v.key);\n            }\n\n            if (v.type === 'additional') {\n              additional.push(v);\n            }\n          });\n          let selectData = {};\n          Object.keys(row).map(v => {\n            if (v.indexOf('PK') !== -1) {\n              selectData = _objectSpread(_objectSpread({}, selectData), {}, {\n                [v.split('PK')[0]]: row[v]\n              });\n            }\n\n            if (v === 'unitWeight') {\n              selectData = _objectSpread(_objectSpread({}, selectData), {}, {\n                unitWeight: Number(row['unitWeight'])\n              });\n            }\n\n            if (v === 'tmpId') {\n              selectData = _objectSpread(_objectSpread({}, selectData), {}, {\n                id: row['tmpId']\n              });\n            }\n          });\n          return _objectSpread(_objectSpread(_objectSpread({}, row), selectData), {}, {\n            additional: [...additional.map(v => {\n              if (row[v.name]) {\n                return {\n                  id: v.id,\n                  title: v.name,\n                  value: row[v.name],\n                  unit: v.unit\n                };\n              }\n            }).filter(v => v)]\n          });\n        }\n      }).filter(v => v)\n    });\n\n    if (res) {\n      if (res.status === 200) {\n        Notiflix.Report.success('저장되었습니다.', '', '확인');\n\n        if (keyword) {\n          SearchBasic(keyword, option, page).then(() => {\n            Notiflix.Loading.remove();\n          });\n        } else {\n          LoadBasic(page).then(() => {\n            Notiflix.Loading.remove();\n          });\n        }\n      }\n    }\n  };\n\n  const DeleteBasic = async () => {\n    const res = await RequestMethod('delete', `customerDelete`, {\n      ['customers']: basicRow.map((row, i) => {\n        if (selectList.has(row.id)) {\n          let pk = \"\";\n          Object.keys(row).map(v => {\n            if (v.indexOf(\"_id\") !== -1) {\n              pk = v;\n            }\n          });\n          return row[pk];\n        }\n      }).filter(v => v)\n    });\n\n    if (res) {\n      if (res.status === 200) {\n        Notiflix.Report.success('삭제 성공!', '', '확인', () => {\n          if (Number(page) === 1) {\n            LoadBasic(1).then(() => {\n              Notiflix.Loading.remove();\n            });\n          } else {\n            if (keyword) {\n              router.push(`/mes/basic/customer?page=1&keyword=${keyword}&opt=${option}`);\n            } else {\n              router.push(`/mes/basic/customer?page=1`);\n            }\n          }\n        });\n      }\n    }\n  };\n\n  const LoadBasic = async page => {\n    Notiflix.Loading.circle();\n    const res = await RequestMethod('get', `customerList`, {\n      path: {\n        page: page || page !== 0 ? page : 1,\n        renderItem: 18\n      }\n    });\n\n    if (res && res.status === 200) {\n      if (res.results.totalPages < page) {\n        LoadBasic(page - 1);\n      } else {\n        setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n          page: res.results.page,\n          total: res.results.totalPages\n        }));\n        cleanUpData(res);\n      }\n    } else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back();\n      });\n    }\n  };\n\n  const SearchBasic = async (keyword, option, isPaging) => {\n    Notiflix.Loading.circle();\n\n    if (!isPaging) {\n      setOptionIndex(option);\n    }\n\n    const res = await RequestMethod('get', `customerSearch`, {\n      path: {\n        page: isPaging !== null && isPaging !== void 0 ? isPaging : 1,\n        renderItem: 18\n      },\n      params: {\n        keyword: keyword !== null && keyword !== void 0 ? keyword : '',\n        opt: option !== null && option !== void 0 ? option : 0\n      }\n    });\n\n    if (res && res.status === 200) {\n      setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n        page: res.results.page,\n        total: res.results.totalPages\n      }));\n      cleanUpData(res);\n    }\n  };\n\n  const cleanUpBasicData = res => {\n    let tmpRow = res.data.results.info_list;\n    let tmpBasicRow = tmpRow.map((row, index) => {\n      let appendAdditional = {};\n      row.additional && row.additional.map(v => {\n        appendAdditional = _objectSpread(_objectSpread({}, appendAdditional), {}, {\n          [v.title]: v.value\n        });\n      });\n      let random_id = Math.random() * 1000;\n      return _objectSpread(_objectSpread(_objectSpread({}, row), {}, {\n        customer_id: row.customer_id,\n        name: row.name,\n        rep: row.rep,\n        telephone: row.telephone,\n        manager: row.manager,\n        cellphone: row.cellphone,\n        fax: row.fax,\n        photo: row.photo,\n        crn: row.crn,\n        address: row.address,\n        password: '-'\n      }, appendAdditional), {}, {\n        id: `customer_${random_id}`\n      });\n    });\n    setBasicRow([...tmpBasicRow]);\n  };\n\n  const cleanUpData = async res => {\n    let tmpColumn = columnlist[\"customer\"];\n    let tmpRow = [];\n    tmpColumn = tmpColumn.map(column => {\n      let menuData;\n      res.results.menus && res.results.menus.map(menu => {\n        if (menu.colName === column.key) {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit,\n            moddable: !menu.moddable\n          };\n        } else if (menu.colName === 'id' && column.key === 'tmpId') {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit,\n            moddable: !menu.moddable\n          };\n        }\n      });\n\n      if (menuData) {\n        return _objectSpread(_objectSpread({}, column), menuData);\n      }\n    }).filter(v => v);\n    let additionalMenus = res.results.menus ? res.results.menus.map(menu => {\n      if (menu.colName === null) {\n        return {\n          id: menu.id,\n          name: menu.title,\n          width: menu.width,\n          key: menu.title,\n          editor: TextEditor,\n          type: 'additional',\n          unit: menu.unit\n        };\n      }\n    }).filter(v => v) : [];\n    tmpRow = res.results.info_list;\n    let selectKey = \"\";\n    let additionalData = [];\n    tmpColumn.map(v => {\n      if (v.selectList) {\n        selectKey = v.key;\n      }\n    });\n    additionalMenus.map(v => {\n      if (v.type === 'additional') {\n        additionalData.push(v.key);\n      }\n    });\n    setColumn([...tmpColumn.map(v => {\n      return _objectSpread(_objectSpread({}, v), {}, {\n        name: v.moddable ? v.name + '(필수)' : v.name\n      });\n    }), ...additionalMenus]);\n    let pk = \"\";\n    Object.keys(tmpRow).map(v => {\n      if (v.indexOf('_id') !== -1) {\n        pk = v;\n      }\n    });\n    let tmpBasicRow = tmpRow.map((row, index) => {\n      let appendAdditional = {};\n      row.additional && row.additional.map(v => {\n        appendAdditional = _objectSpread(_objectSpread({}, appendAdditional), {}, {\n          [v.title]: v.value\n        });\n      });\n      let random_id = Math.random() * 1000;\n      return _objectSpread(_objectSpread(_objectSpread({}, row), {}, {\n        customer_id: row.customer_id,\n        name: row.name,\n        rep: row.rep,\n        telephone: row.telephone,\n        manager: row.manager,\n        cellphone: row.cellphone,\n        fax: row.fax,\n        photo: row.photo,\n        crn: row.crn,\n        address: row.address,\n        password: '-'\n      }, appendAdditional), {}, {\n        id: `customer_${random_id}`\n      });\n    });\n    setBasicRow([...tmpBasicRow]);\n  };\n\n  const downloadExcel = () => {\n    let tmpSelectList = [];\n    basicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id));\n    });\n    excelDownload(column, basicRow, `${\"customer\"}`, \"customer\", tmpSelectList);\n  };\n\n  const onClickHeaderButton = index => {\n    switch (index) {\n      case 0:\n        setExcelUploadOpen(true);\n        break;\n\n      case 1:\n        setExcelOpen(true);\n        break;\n\n      case 2:\n        router.push(`/mes/item/manage/customer`);\n        break;\n\n      case 3:\n        let items = {};\n        let random_id = Math.random() * 1000;\n        column.map(value => {\n          if (value.selectList && value.selectList.length) {\n            items = _objectSpread(_objectSpread({}, value.selectList[0]), {}, {\n              [value.key]: value.selectList[0].name,\n              [value.key + 'PK']: value.selectList[0].pk\n            }, items);\n          }\n        });\n        setBasicRow([_objectSpread(_objectSpread({}, items), {}, {\n          id: `customer_${random_id}`,\n          name: null,\n          additional: []\n        }), ...basicRow]);\n        break;\n\n      case 4:\n        SaveBasic();\n        break;\n\n      case 5:\n        Notiflix.Confirm.show(\"경고\", \"삭제하시겠습니까?\", \"확인\", \"취소\", () => {\n          DeleteBasic();\n        }, () => {});\n        break;\n    }\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 9\n    }\n  }, __jsx(MenuNavigation, {\n    pageType: 'BASIC',\n    subType: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    style: {\n      paddingBottom: 40\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 13\n    }\n  }, __jsx(ProfileHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 17\n    }\n  }), __jsx(BasicCustomer, {\n    page: page,\n    keyword: keyword,\n    option: option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport const getServerSideProps = ctx => {\n  var _ctx$query$page, _ctx$query$keyword, _ctx$query$opt;\n\n  return {\n    props: {\n      page: (_ctx$query$page = ctx.query.page) !== null && _ctx$query$page !== void 0 ? _ctx$query$page : 1,\n      keyword: (_ctx$query$keyword = ctx.query.keyword) !== null && _ctx$query$keyword !== void 0 ? _ctx$query$keyword : \"\",\n      option: (_ctx$query$opt = ctx.query.opt) !== null && _ctx$query$opt !== void 0 ? _ctx$query$opt : 0\n    }\n  };\n}; // BasicContainer.getInitialProps = async ({ query }) => {\n//     let { page, keyword, opt } = query\n//     if (typeof page === 'string')\n//         page = parseInt(page);\n//     if (typeof opt === 'string')\n//         opt = parseInt(opt);\n//     return { page, keyword, option: opt };\n// }\n\nexport default BasicContainer;","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/basic/customer/index.tsx"],"names":["React","useEffect","useState","MenuNavigation","ProfileHeader","RequestMethod","columnlist","Notiflix","useRouter","TextEditor","excelDownload","BasicCustomer","BasicContainer","page","keyword","option","router","excelOpen","setExcelOpen","excelUploadOpen","setExcelUploadOpen","basicRow","setBasicRow","name","id","column","setColumn","selectList","setSelectList","Set","optionList","setOptionList","optionIndex","setOptionIndex","pageInfo","setPageInfo","total","SearchBasic","then","Loading","remove","LoadBasic","SaveBasic","res","map","row","i","has","selectKey","additional","v","push","key","type","selectData","Object","keys","indexOf","split","unitWeight","Number","title","value","unit","filter","status","Report","success","DeleteBasic","pk","circle","path","renderItem","results","totalPages","cleanUpData","state","failure","back","isPaging","params","opt","cleanUpBasicData","tmpRow","data","info_list","tmpBasicRow","index","appendAdditional","random_id","Math","random","customer_id","rep","telephone","manager","cellphone","fax","photo","crn","address","password","tmpColumn","menuData","menus","menu","colName","width","tab","moddable","additionalMenus","editor","additionalData","downloadExcel","tmpSelectList","onClickHeaderButton","items","length","Confirm","show","display","paddingBottom","getServerSideProps","ctx","props","query"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport ExcelTable from '../../../../component/Excel/ExcelTable'\nimport MenuNavigation from '../../../../component/MenuNav/MenuNavigation'\nimport ProfileHeader from '../../../../component/Profile/ProfileHeader'\nimport PageHeader from '../../../../component/Header/Header'\n// @ts-ignore\nimport {SelectColumn} from 'react-data-grid'\nimport {RequestMethod} from '../../../../common/RequestFunctions'\nimport {columnlist} from \"../../../../common/columnInit\";\nimport Notiflix from \"notiflix\";\nimport {useRouter} from 'next/router'\nimport {MAX_VALUE} from '../../../../common/configset'\nimport DropDownEditor from '../../../../component/Dropdown/ExcelBasicDropdown'\nimport TextEditor from '../../../../component/InputBox/ExcelBasicInputBox'\nimport {excelDownload} from '../../../../common/excelDownloadFunction'\nimport {loadAll} from 'react-cookies'\nimport {IExcelHeaderType} from \"../../../../common/@types/type\";\nimport PaginationComponent from '../../../../component/Pagination/PaginationComponent'\nimport {NextPageContext} from 'next'\nimport ExcelDownloadModal from '../../../../component/Modal/ExcelDownloadMoadal'\nimport ExcelUploadModal from \"../../../../component/Modal/ExcelUploadModal\";\nimport {BasicCustomer} from '../../../../../basic'\n\ninterface IProps {\n    children?: any\n    page?: number\n    keyword?: string\n    option?: number\n}\n\n\nconst BasicContainer = ({page, keyword, option}: IProps) => {\n    const router = useRouter()\n\n    const [excelOpen, setExcelOpen] = useState<boolean>(false)\n    const [excelUploadOpen, setExcelUploadOpen] = useState<boolean>(false);\n    const [basicRow, setBasicRow] = useState<Array<any>>([{\n        name: \"\", id: \"\"\n    }])\n    const [column, setColumn] = useState<Array<IExcelHeaderType>>(columnlist[\"customer\"]);\n    const [selectList, setSelectList] = useState<Set<number>>(new Set())\n    const [optionList, setOptionList] = useState<string[]>(['고객사명', '대표자명', '담당자명', '전화 번호','휴대폰 번호', '팩스 번호', '주소', '사업자 번호'])\n    const [optionIndex, setOptionIndex] = useState<number>(option)\n\n    const [pageInfo, setPageInfo] = useState<{page: number, total: number}>({\n        page: 1,\n        total: 1\n    })\n\n    useEffect(() => {\n        if(keyword){\n            SearchBasic(keyword, option, page).then(() => {\n                Notiflix.Loading.remove()\n            })\n        }else{\n            LoadBasic(page).then(() => {\n                Notiflix.Loading.remove()\n            }).then(() => {\n                Notiflix.Loading.remove()\n            })\n        }\n    }, [page, keyword, option])\n\n    const SaveBasic = async () => {\n        let res: any\n            res = await RequestMethod('post', `customerSave`,\n                {\n                    [ 'customers']: basicRow.map((row, i) => {\n                        if(selectList.has(row.id)){\n                            let selectKey: string[] = []\n                            let additional:any[] = []\n                            column.map((v) => {\n                                if(v.selectList){\n                                    selectKey.push(v.key)\n                                }\n\n                                if(v.type === 'additional'){\n                                    additional.push(v)\n                                }\n                            })\n\n                            let selectData: any = {}\n\n                            Object.keys(row).map(v => {\n                                if(v.indexOf('PK') !== -1) {\n                                    selectData = {\n                                        ...selectData,\n                                        [v.split('PK')[0]]: row[v]\n                                    }\n                                }\n\n                                if(v === 'unitWeight') {\n                                    selectData = {\n                                        ...selectData,\n                                        unitWeight: Number(row['unitWeight'])\n                                    }\n                                }\n\n                                if(v === 'tmpId') {\n                                    selectData = {\n                                        ...selectData,\n                                        id: row['tmpId']\n                                    }\n                                }\n                            })\n\n                            return {\n                                ...row,\n                                ...selectData,\n                                additional: [\n                                    ...additional.map(v => {\n                                        if(row[v.name]) {\n                                            return {\n                                                id: v.id,\n                                                title: v.name,\n                                                value: row[v.name],\n                                                unit: v.unit\n                                            }\n                                        }\n                                    }).filter((v) => v)\n                                ]\n                            }\n\n                        }\n                    }).filter((v) => v)\n                })\n\n\n        if(res){\n            if(res.status === 200){\n                Notiflix.Report.success('저장되었습니다.','','확인');\n                if(keyword){\n                    SearchBasic(keyword, option, page).then(() => {\n                        Notiflix.Loading.remove()\n                    })\n                }else{\n                    LoadBasic(page).then(() => {\n                        Notiflix.Loading.remove()\n                    })\n                }\n            }\n        }\n    }\n\n    const DeleteBasic = async () => {\n        const res = await RequestMethod('delete', `customerDelete`,\n            {\n                [ 'customers']: basicRow.map((row, i) => {\n                    if(selectList.has(row.id)){\n                            let pk = \"\"\n                            Object.keys(row).map((v:string) => {\n                                if(v.indexOf(\"_id\") !== -1){\n                                    pk = v\n                                }\n                            })\n                            return row[pk]\n                    }\n                }).filter((v) => v)\n            })\n\n        if(res) {\n            if(res.status === 200){\n                Notiflix.Report.success('삭제 성공!', '', '확인', () => {\n                    if(Number(page) === 1){\n                        LoadBasic(1).then(() => {\n                            Notiflix.Loading.remove()\n                        })\n                    }else{\n                        if(keyword){\n                            router.push(`/mes/basic/customer?page=1&keyword=${keyword}&opt=${option}`)\n                        }else{\n                            router.push(`/mes/basic/customer?page=1`)\n                        }\n                    }\n                })\n            }\n        }\n    }\n\n    const LoadBasic = async (page?: number) => {\n        Notiflix.Loading.circle()\n        const res = await RequestMethod('get', `customerList`, {\n            path: {\n                page: (page || page !== 0) ? page : 1,\n                renderItem: 18,\n            }\n        })\n\n        if(res && res.status === 200){\n            if(res.results.totalPages < page){\n                LoadBasic(page - 1)\n            }else{\n                setPageInfo({\n                    ...pageInfo,\n                    page: res.results.page,\n                    total: res.results.totalPages\n                })\n                cleanUpData(res)\n            }\n        }else if (res.state === 401) {\n            Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n                router.back()\n            })\n        }\n    }\n\n\n    const SearchBasic = async (keyword: any, option: number, isPaging?: number) => {\n        Notiflix.Loading.circle()\n        if(!isPaging){\n            setOptionIndex(option)\n        }\n\n        const res = await RequestMethod('get', `customerSearch`,{\n            path: {\n                page: isPaging ?? 1,\n                renderItem: 18,\n            },\n            params: {\n                keyword: keyword ?? '',\n                opt: option ?? 0\n            }\n        })\n\n        if(res && res.status === 200){\n            setPageInfo({\n                ...pageInfo,\n                page: res.results.page,\n                total: res.results.totalPages\n            })\n            cleanUpData(res)\n        }\n    }\n    const cleanUpBasicData = (res:any) => {\n        let tmpRow = res.data.results.info_list;\n\n        let tmpBasicRow = tmpRow.map((row: any, index: number) => {\n\n            let appendAdditional: any = {}\n\n            row.additional && row.additional.map((v: any) => {\n                appendAdditional = {\n                    ...appendAdditional,\n                    [v.title]: v.value\n                }\n            })\n            let random_id = Math.random()*1000;\n            return {\n                ...row,\n                customer_id: row.customer_id,\n                name: row.name,\n                rep: row.rep,\n                telephone: row.telephone,\n                manager: row.manager,\n                cellphone: row.cellphone,\n                fax: row.fax,\n                photo: row.photo,\n                crn: row.crn,\n                address: row.address,\n                password: '-',\n                ...appendAdditional,\n                id: `customer_${random_id}`,\n            }\n        })\n        setBasicRow([...tmpBasicRow])\n    }\n    const cleanUpData = async(res: any) => {\n\n        let tmpColumn = columnlist[\"customer\"]\n        let tmpRow = []\n        tmpColumn = tmpColumn.map((column: any) => {\n            let menuData: object | undefined;\n            res.results.menus && res.results.menus.map((menu: any) => {\n                if(menu.colName === column.key){\n                    menuData = {\n                        id: menu.id,\n                        name: menu.title,\n                        width: menu.width,\n                        tab:menu.tab,\n                        unit:menu.unit,\n                        moddable: !menu.moddable\n                    }\n                } else if(menu.colName === 'id' && column.key === 'tmpId'){\n                    menuData = {\n                        id: menu.id,\n                        name: menu.title,\n                        width: menu.width,\n                        tab:menu.tab,\n                        unit:menu.unit,\n                        moddable: !menu.moddable\n                    }\n                }\n            })\n\n            if(menuData){\n                return {\n                    ...column,\n                    ...menuData\n                }\n            }\n        }).filter((v:any) => v)\n\n        let additionalMenus = res.results.menus ? res.results.menus.map((menu:any) => {\n            if(menu.colName === null){\n                return {\n                    id: menu.id,\n                    name: menu.title,\n                    width: menu.width,\n                    key: menu.title,\n                    editor: TextEditor,\n                    type: 'additional',\n                    unit: menu.unit\n                }\n            }\n        }).filter((v: any) => v) : []\n\n\n        tmpRow = res.results.info_list\n\n        let selectKey = \"\"\n        let additionalData: any[] = []\n        tmpColumn.map((v: any) => {\n            if(v.selectList){\n                selectKey = v.key\n            }\n        })\n\n        additionalMenus.map((v: any) => {\n            if(v.type === 'additional'){\n                additionalData.push(v.key)\n            }\n        })\n\n        setColumn([...tmpColumn.map(v=> {\n            return {\n                ...v,\n                name: v.moddable ? v.name+'(필수)' : v.name\n            }\n        }), ...additionalMenus])\n\n        let pk = \"\";\n        Object.keys(tmpRow).map((v) => {\n            if(v.indexOf('_id') !== -1){\n                pk = v\n            }\n        })\n\n        let tmpBasicRow = tmpRow.map((row: any, index: number) => {\n\n            let appendAdditional: any = {}\n\n            row.additional && row.additional.map((v: any) => {\n                appendAdditional = {\n                    ...appendAdditional,\n                    [v.title]: v.value\n                }\n            })\n            let random_id = Math.random()*1000;\n            return {\n                ...row,\n                customer_id: row.customer_id,\n                name: row.name,\n                rep: row.rep,\n                telephone: row.telephone,\n                manager: row.manager,\n                cellphone: row.cellphone,\n                fax: row.fax,\n                photo: row.photo,\n                crn: row.crn,\n                address: row.address,\n                password: '-',\n                ...appendAdditional,\n                id: `customer_${random_id}`,\n            }\n        })\n\n\n        setBasicRow([...tmpBasicRow])\n    }\n\n    const downloadExcel = () => {\n        let tmpSelectList: boolean[] = []\n        basicRow.map(row => {\n            tmpSelectList.push(selectList.has(row.id))\n        })\n        excelDownload(column, basicRow, `${\"customer\"}`, \"customer\", tmpSelectList)\n    }\n\n    const onClickHeaderButton = (index: number) => {\n        switch (index) {\n            case 0:\n                setExcelUploadOpen(true)\n                break;\n            case 1:\n                setExcelOpen(true)\n                break;\n            case 2:\n\n                router.push(`/mes/item/manage/customer`)\n\n                break;\n            case 3:\n                let items = {}\n                let random_id = Math.random()*1000;\n                column.map((value) => {\n                    if (value.selectList && value.selectList.length) {\n                        items = {\n                            ...value.selectList[0],\n                            [value.key]: value.selectList[0].name,\n                            [value.key + 'PK']: value.selectList[0].pk,//여기 봐야됨!\n                            ...items,\n                        }\n                    }\n                })\n\n                setBasicRow([\n                    {\n                        ...items,\n                        id: `customer_${random_id}`,\n                        name: null,\n                        additional: [],\n                    },\n                    ...basicRow\n                ])\n\n                break;\n\n            case 4:\n                SaveBasic()\n\n                break;\n            case 5:\n                Notiflix.Confirm.show(\"경고\",\"삭제하시겠습니까?\",\"확인\",\"취소\",\n                    ()=>{DeleteBasic()}\n                    ,()=>{}\n                )\n                break;\n\n        }\n    }\n\n    return (\n        <div style={{display: 'flex', }}>\n            <MenuNavigation pageType={'BASIC'} subType={1}/>\n            <div style={{paddingBottom: 40}}>\n                <ProfileHeader/>\n                <BasicCustomer page={page} keyword={keyword} option={option}/>\n            </div>\n        </div>\n    );\n}\n\nexport const getServerSideProps = (ctx: NextPageContext) => {\n    return {\n        props: {\n            page: ctx.query.page ?? 1,\n            keyword: ctx.query.keyword ?? \"\",\n            option: ctx.query.opt ?? 0,\n        }\n    }\n}\n\n// BasicContainer.getInitialProps = async ({ query }) => {\n//     let { page, keyword, opt } = query\n//     if (typeof page === 'string')\n//         page = parseInt(page);\n//     if (typeof opt === 'string')\n//         opt = parseInt(opt);\n//     return { page, keyword, option: opt };\n// }\n\nexport default BasicContainer;\n"]},"metadata":{},"sourceType":"module"}