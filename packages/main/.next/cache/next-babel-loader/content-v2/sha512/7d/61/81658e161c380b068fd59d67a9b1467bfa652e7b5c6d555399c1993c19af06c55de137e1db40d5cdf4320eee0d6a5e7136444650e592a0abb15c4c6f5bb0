{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/mes/src/container/SubMaterial/MesSubMaterialStock.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { ExcelTable, Header as PageHeader, RequestMethod, columnlist, MAX_VALUE, TextEditor, excelDownload, PaginationComponent, ExcelDownloadModal } from 'shared'; // @ts-ignore\n\nimport { SelectColumn } from 'react-data-grid';\nimport Notiflix from \"notiflix\";\nimport { useRouter } from 'next/router';\nimport moment from 'moment';\nconst dummyDate = moment().subtract(10, 'days');\n\nconst MesSubMaterialStock = ({\n  page,\n  keyword,\n  option\n}) => {\n  const router = useRouter();\n  const {\n    0: excelOpen,\n    1: setExcelOpen\n  } = useState(false);\n  const {\n    0: basicRow,\n    1: setBasicRow\n  } = useState([{\n    date: dummyDate.format('YYYY-MM-DD'),\n    code: 'SUS-111',\n    name: 'SUS360',\n    texture: 'SUS360',\n    depth: '1.2',\n    width: 3000,\n    height: 3000,\n    type: 'COIL',\n    amount: 1000,\n    number: `${dummyDate.format('YYMMDD')}-01-01`,\n    current: 1000,\n    customer: '한국상사'\n  }]);\n  const {\n    0: column,\n    1: setColumn\n  } = useState(columnlist[\"substockV1u\"]);\n  const {\n    0: selectList,\n    1: setSelectList\n  } = useState(new Set());\n  const {\n    0: optionList,\n    1: setOptionList\n  } = useState(['원자재 CODE', '원자재 품명', '재질', '원자재 LOT 번호', '거래처']);\n  const {\n    0: optionIndex,\n    1: setOptionIndex\n  } = useState(0);\n  const {\n    0: pageInfo,\n    1: setPageInfo\n  } = useState({\n    page: 1,\n    total: 1\n  });\n  const {\n    0: selectDate,\n    1: setSelectDate\n  } = useState({\n    from: moment().startOf('isoWeek').format('YYYY-MM-DD'),\n    to: moment().endOf('isoWeek').format('YYYY-MM-DD')\n  }); // useEffect(() => {\n  //   setOptionIndex(option)\n  //   if(keyword){\n  //     SearchBasic(keyword, option, page).then(() => {\n  //       Notiflix.Loading.remove()\n  //     })\n  //   }else{\n  //     LoadBasic(page).then(() => {\n  //       Notiflix.Loading.remove()\n  //     })\n  //   }\n  // }, [page, keyword, option])\n\n  const loadAllSelectItems = async column => {\n    let tmpColumn = column.map(async v => {\n      if (v.selectList && v.selectList.length === 0) {\n        let tmpKey = v.key;\n        let res;\n        res = await RequestMethod('get', `${tmpKey}List`, {\n          path: {\n            page: 1,\n            renderItem: MAX_VALUE\n          }\n        });\n        let pk = \"\";\n        res.results.info_list && res.results.info_list.length && Object.keys(res.results.info_list[0]).map(v => {\n          if (v.indexOf('_id') !== -1) {\n            pk = v;\n          }\n        });\n        return _objectSpread(_objectSpread({}, v), {}, {\n          selectList: [...res.results.info_list.map(value => {\n            return _objectSpread(_objectSpread({}, value), {}, {\n              name: tmpKey === 'model' ? value.model : value.name,\n              pk: value[pk]\n            });\n          })]\n        });\n      } else {\n        if (v.selectList) {\n          return _objectSpread(_objectSpread({}, v), {}, {\n            pk: v.unit_id\n          });\n        } else {\n          return v;\n        }\n      }\n    }); // if(type !== 'productprocess'){\n\n    Promise.all(tmpColumn).then(res => {\n      setColumn([...res]);\n    }); // }\n  };\n\n  const SaveBasic = async () => {\n    let res;\n    res = await RequestMethod('post', `moldSave`, {\n      ['molds']: basicRow.map((row, i) => {\n        if (selectList.has(row.id)) {\n          let selectKey = [];\n          let additional = [];\n          column.map(v => {\n            if (v.selectList) {\n              selectKey.push(v.key);\n            }\n\n            if (v.type === 'additional') {\n              additional.push(v);\n            }\n          });\n          let selectData = {};\n          Object.keys(row).map(v => {\n            if (v.indexOf('PK') !== -1) {\n              selectData = _objectSpread(_objectSpread({}, selectData), {}, {\n                [v.split('PK')[0]]: row[v]\n              });\n            }\n\n            if (v === 'unitWeight') {\n              selectData = _objectSpread(_objectSpread({}, selectData), {}, {\n                unitWeight: Number(row['unitWeight'])\n              });\n            }\n\n            if (v === 'tmpId') {\n              selectData = _objectSpread(_objectSpread({}, selectData), {}, {\n                id: row['tmpId']\n              });\n            }\n          });\n          return _objectSpread(_objectSpread(_objectSpread({}, row), selectData), {}, {\n            additional: [...additional.map(v => {\n              if (row[v.name]) {\n                return {\n                  id: v.id,\n                  title: v.name,\n                  value: row[v.name],\n                  unit: v.unit\n                };\n              }\n            }).filter(v => v)]\n          });\n        }\n      }).filter(v => v)\n    });\n\n    if (res) {\n      if (res.status === 200) {\n        Notiflix.Report.success('저장되었습니다.', '', '확인');\n\n        if (keyword) {\n          SearchBasic(keyword, option, page).then(() => {\n            Notiflix.Loading.remove();\n          });\n        } else {\n          LoadBasic(page).then(() => {\n            Notiflix.Loading.remove();\n          });\n        }\n      }\n    }\n  };\n\n  const LoadBasic = async page => {\n    Notiflix.Loading.circle();\n    const res = await RequestMethod('get', `moldList`, {\n      path: {\n        page: page || page !== 0 ? page : 1,\n        renderItem: 18\n      }\n    });\n\n    if (res && res.status === 200) {\n      setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n        page: res.results.page,\n        total: res.results.totalPages\n      }));\n      cleanUpData(res);\n    } else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back();\n      });\n    }\n  };\n\n  const SearchBasic = async (keyword, option, isPaging) => {\n    Notiflix.Loading.circle();\n\n    if (!isPaging) {\n      setOptionIndex(option);\n    }\n\n    const res = await RequestMethod('get', `moldSearch`, {\n      path: {\n        page: isPaging !== null && isPaging !== void 0 ? isPaging : 1,\n        renderItem: 18\n      },\n      params: {\n        keyword: keyword !== null && keyword !== void 0 ? keyword : '',\n        opt: option !== null && option !== void 0 ? option : 0\n      }\n    });\n\n    if (res && res.status === 200) {\n      setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n        page: res.results.page,\n        total: res.results.totalPages\n      }));\n      cleanUpData(res);\n    }\n  };\n\n  const cleanUpData = res => {\n    let tmpColumn = columnlist[\"mold\"];\n    let tmpRow = [];\n    tmpColumn = tmpColumn.map(column => {\n      let menuData;\n      res.results.menus && res.results.menus.map(menu => {\n        if (menu.colName === column.key) {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit\n          };\n        } else if (menu.colName === 'id' && column.key === 'tmpId') {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit\n          };\n        }\n      });\n\n      if (menuData) {\n        return _objectSpread(_objectSpread({}, column), menuData);\n      }\n    }).filter(v => v);\n    let additionalMenus = res.results.menus ? res.results.menus.map(menu => {\n      if (menu.colName === null) {\n        return {\n          id: menu.id,\n          name: menu.title,\n          width: menu.width,\n          key: menu.title,\n          editor: TextEditor,\n          type: 'additional',\n          unit: menu.unit\n        };\n      }\n    }).filter(v => v) : [];\n    tmpRow = res.results.info_list;\n    loadAllSelectItems([...tmpColumn, ...additionalMenus]);\n    let selectKey = \"\";\n    let additionalData = [];\n    tmpColumn.map(v => {\n      if (v.selectList) {\n        selectKey = v.key;\n      }\n    });\n    additionalMenus.map(v => {\n      if (v.type === 'additional') {\n        additionalData.push(v.key);\n      }\n    });\n    let pk = \"\";\n    Object.keys(tmpRow).map(v => {\n      if (v.indexOf('_id') !== -1) {\n        pk = v;\n      }\n    });\n    let tmpBasicRow = tmpRow.map((row, index) => {\n      let appendAdditional = {};\n      row.additional && row.additional.map(v => {\n        appendAdditional = _objectSpread(_objectSpread({}, appendAdditional), {}, {\n          [v.title]: v.value\n        });\n      });\n      let random_id = Math.random() * 1000;\n      return _objectSpread(_objectSpread({\n        cm_id: index === 0 || row.ppd.seq === 1 ? row.product.raw_material.model.model : undefined,\n        cm_idPK: row.product.raw_material.model.cm_id,\n        mold_id: row.mold_id,\n        mold_name: row.ppd.mold_name,\n        limit: row.limit,\n        inspect: row.inspect,\n        current: row.current,\n        customer_id: index === 0 || row.ppd.seq === 1 ? row.product.raw_material.model.customer.name : undefined,\n        customer_idPK: row.product.raw_material.model.customer.customer_id,\n        code: index === 0 || row.ppd.seq === 1 ? row.product.raw_material.code : undefined,\n        name: index === 0 || row.ppd.seq === 1 ? row.product.raw_material.name : undefined,\n        seq: row.ppd.seq,\n        cavity: row.ppd.cavity,\n        spm: row.spm,\n        slideHeight: row.slideHeight,\n        process_id: row.ppd.process.name\n      }, appendAdditional), {}, {\n        id: `mold_${random_id}`\n      });\n    });\n    setBasicRow([...tmpBasicRow]);\n  };\n\n  const downloadExcel = () => {\n    let tmpSelectList = [];\n    basicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id));\n    });\n    excelDownload(column, basicRow, `mold`, \"mold\", tmpSelectList);\n  };\n\n  const onClickHeaderButton = index => {\n    switch (index) {\n      case 0:\n        setExcelOpen(true);\n        break;\n\n      case 1:\n        router.push(`/mes/item/manage/mold`);\n        break;\n\n      case 2:\n        SaveBasic();\n        break;\n    }\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 5\n    }\n  }, __jsx(PageHeader, {\n    isSearch: true,\n    searchKeyword: keyword,\n    onChangeSearchKeyword: keyword => {\n      if (keyword) {\n        router.push(`/mes/rawmaterial/input?page=1&keyword=${keyword}&opt=${optionIndex}`);\n      } else {\n        router.push(`/mes/rawmaterial/input?page=1&keyword=`);\n      }\n    },\n    searchOptionList: optionList,\n    onChangeSearchOption: option => {\n      setOptionIndex(option);\n    },\n    calendarTitle: '입고일',\n    optionIndex: optionIndex,\n    isCalendar: true,\n    calendarType: 'period',\n    selectDate: selectDate //@ts-ignore\n    ,\n    setSelectDate: setSelectDate,\n    title: \"부자재 재고 현황\",\n    buttons: ['엑셀로 받기', '수정하기', '저장하기', '삭제'],\n    buttonsOnclick: () => {} // onClickHeaderButton\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }\n  }), __jsx(ExcelTable, {\n    editable: true,\n    resizable: true,\n    headerList: [SelectColumn, ...column],\n    row: basicRow // setRow={setBasicRow}\n    ,\n    setRow: e => {\n      let tmp = selectList;\n      e.map(v => {\n        if (v.isChange) tmp.add(v.id);\n      });\n      setSelectList(tmp);\n      setBasicRow(e);\n    },\n    selectList: selectList //@ts-ignore\n    ,\n    setSelectList: setSelectList,\n    height: basicRow.length * 40 >= 40 * 18 + 56 ? 40 * 19 : basicRow.length * 40 + 56,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 7\n    }\n  }), __jsx(PaginationComponent, {\n    currentPage: pageInfo.page,\n    totalPage: pageInfo.total,\n    setPage: page => {\n      if (keyword) {\n        router.push(`/mes/basic/mold?page=${page}&keyword=${keyword}&opt=${option}`);\n      } else {\n        router.push(`/mes/basic/mold?page=${page}`);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 7\n    }\n  }), __jsx(ExcelDownloadModal, {\n    isOpen: excelOpen,\n    column: column,\n    basicRow: basicRow,\n    filename: `금형기본정보`,\n    sheetname: `금형기본정보`,\n    selectList: selectList,\n    tab: 'ROLE_BASE_07',\n    setIsOpen: setExcelOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport const getServerSideProps = ctx => {\n  var _ctx$query$page, _ctx$query$keyword, _ctx$query$opt;\n\n  return {\n    props: {\n      page: (_ctx$query$page = ctx.query.page) !== null && _ctx$query$page !== void 0 ? _ctx$query$page : 1,\n      keyword: (_ctx$query$keyword = ctx.query.keyword) !== null && _ctx$query$keyword !== void 0 ? _ctx$query$keyword : \"\",\n      option: (_ctx$query$opt = ctx.query.opt) !== null && _ctx$query$opt !== void 0 ? _ctx$query$opt : 0\n    }\n  };\n};\nexport { MesSubMaterialStock };","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/mes/src/container/SubMaterial/MesSubMaterialStock.tsx"],"names":["React","useState","ExcelTable","Header","PageHeader","RequestMethod","columnlist","MAX_VALUE","TextEditor","excelDownload","PaginationComponent","ExcelDownloadModal","SelectColumn","Notiflix","useRouter","moment","dummyDate","subtract","MesSubMaterialStock","page","keyword","option","router","excelOpen","setExcelOpen","basicRow","setBasicRow","date","format","code","name","texture","depth","width","height","type","amount","number","current","customer","column","setColumn","selectList","setSelectList","Set","optionList","setOptionList","optionIndex","setOptionIndex","pageInfo","setPageInfo","total","selectDate","setSelectDate","from","startOf","to","endOf","loadAllSelectItems","tmpColumn","map","v","length","tmpKey","key","res","path","renderItem","pk","results","info_list","Object","keys","indexOf","value","model","unit_id","Promise","all","then","SaveBasic","row","i","has","id","selectKey","additional","push","selectData","split","unitWeight","Number","title","unit","filter","status","Report","success","SearchBasic","Loading","remove","LoadBasic","circle","totalPages","cleanUpData","state","failure","back","isPaging","params","opt","tmpRow","menuData","menus","menu","colName","tab","additionalMenus","editor","additionalData","tmpBasicRow","index","appendAdditional","random_id","Math","random","cm_id","ppd","seq","product","raw_material","undefined","cm_idPK","mold_id","mold_name","limit","inspect","customer_id","customer_idPK","cavity","spm","slideHeight","process_id","process","downloadExcel","tmpSelectList","onClickHeaderButton","e","tmp","isChange","add","getServerSideProps","ctx","props","query"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {\n  ExcelTable,\n  Header as PageHeader,\n  RequestMethod,\n  columnlist,\n  MAX_VALUE,\n  DropDownEditor,\n  TextEditor,\n  excelDownload,\n  PaginationComponent,\n  ExcelDownloadModal,\n  IExcelHeaderType, IItemMenuType\n} from 'shared'\n// @ts-ignore\nimport {SelectColumn} from 'react-data-grid'\nimport Notiflix from \"notiflix\";\nimport {useRouter} from 'next/router'\nimport {loadAll} from 'react-cookies'\nimport {NextPageContext} from 'next'\nimport moment from 'moment'\n\ninterface IProps {\n  children?: any\n  page?: number\n  keyword?: string\n  option?: number\n}\n\nconst dummyDate = moment().subtract(10, 'days')\n\nconst MesSubMaterialStock = ({page, keyword, option}: IProps) => {\n  const router = useRouter()\n\n  const [excelOpen, setExcelOpen] = useState<boolean>(false)\n\n  const [basicRow, setBasicRow] = useState<Array<any>>([{\n    date: dummyDate.format('YYYY-MM-DD'),\n    code: 'SUS-111', name: 'SUS360', texture: 'SUS360', depth: '1.2', width: 3000, height: 3000, type: 'COIL', amount: 1000,\n    number: `${dummyDate.format('YYMMDD')}-01-01`, current: 1000, customer: '한국상사',\n  }])\n  const [column, setColumn] = useState<Array<IExcelHeaderType>>( columnlist[\"substockV1u\"])\n  const [selectList, setSelectList] = useState<Set<number>>(new Set())\n  const [optionList, setOptionList] = useState<string[]>(['원자재 CODE', '원자재 품명', '재질', '원자재 LOT 번호', '거래처'])\n  const [optionIndex, setOptionIndex] = useState<number>(0)\n\n  const [pageInfo, setPageInfo] = useState<{page: number, total: number}>({\n    page: 1,\n    total: 1\n  })\n\n  const [selectDate, setSelectDate] = useState<{from:string, to:string}>({\n    from: moment().startOf('isoWeek').format('YYYY-MM-DD'),\n    to: moment().endOf('isoWeek').format('YYYY-MM-DD')\n  });\n\n  // useEffect(() => {\n  //   setOptionIndex(option)\n  //   if(keyword){\n  //     SearchBasic(keyword, option, page).then(() => {\n  //       Notiflix.Loading.remove()\n  //     })\n  //   }else{\n  //     LoadBasic(page).then(() => {\n  //       Notiflix.Loading.remove()\n  //     })\n  //   }\n  // }, [page, keyword, option])\n\n\n  const loadAllSelectItems = async (column: IExcelHeaderType[]) => {\n    let tmpColumn = column.map(async (v: any) => {\n      if(v.selectList && v.selectList.length === 0){\n        let tmpKey = v.key\n\n\n        let res: any\n        res = await RequestMethod('get', `${tmpKey}List`,{\n          path: {\n            page: 1,\n            renderItem: MAX_VALUE,\n          }\n        })\n\n\n        let pk = \"\";\n\n        res.results.info_list && res.results.info_list.length && Object.keys(res.results.info_list[0]).map((v) => {\n          if(v.indexOf('_id') !== -1){\n            pk = v\n          }\n        })\n        return {\n          ...v,\n          selectList: [...res.results.info_list.map((value: any) => {\n            return {\n              ...value,\n              name: tmpKey === 'model' ? value.model : value.name,\n              pk: value[pk]\n            }\n          })]\n        }\n\n      }else{\n        if(v.selectList){\n          return {\n            ...v,\n            pk: v.unit_id\n          }\n        }else{\n          return v\n        }\n      }\n    })\n\n    // if(type !== 'productprocess'){\n    Promise.all(tmpColumn).then(res => {\n      setColumn([...res])\n    })\n    // }\n  }\n\n  const SaveBasic = async () => {\n    let res: any\n    res = await RequestMethod('post', `moldSave`,\n      {\n        ['molds']: basicRow.map((row, i) => {\n          if(selectList.has(row.id)){\n            let selectKey: string[] = []\n            let additional:any[] = []\n            column.map((v) => {\n              if(v.selectList){\n                selectKey.push(v.key)\n              }\n\n              if(v.type === 'additional'){\n                additional.push(v)\n              }\n            })\n\n            let selectData: any = {}\n\n            Object.keys(row).map(v => {\n              if(v.indexOf('PK') !== -1) {\n                selectData = {\n                  ...selectData,\n                  [v.split('PK')[0]]: row[v]\n                }\n              }\n\n              if(v === 'unitWeight') {\n                selectData = {\n                  ...selectData,\n                  unitWeight: Number(row['unitWeight'])\n                }\n              }\n\n              if(v === 'tmpId') {\n                selectData = {\n                  ...selectData,\n                  id: row['tmpId']\n                }\n              }\n            })\n\n            return {\n              ...row,\n              ...selectData,\n              additional: [\n                ...additional.map(v => {\n                  if(row[v.name]) {\n                    return {\n                      id: v.id,\n                      title: v.name,\n                      value: row[v.name],\n                      unit: v.unit\n                    }\n                  }\n                }).filter((v) => v)\n              ]\n            }\n\n          }\n        }).filter((v) => v)\n      })\n\n\n    if(res){\n      if(res.status === 200){\n        Notiflix.Report.success('저장되었습니다.','','확인');\n        if(keyword){\n          SearchBasic(keyword, option, page).then(() => {\n            Notiflix.Loading.remove()\n          })\n        }else{\n          LoadBasic(page).then(() => {\n            Notiflix.Loading.remove()\n          })\n        }\n      }\n    }\n  }\n\n\n  const LoadBasic = async (page?: number) => {\n    Notiflix.Loading.circle()\n    const res = await RequestMethod('get', `moldList`,{\n      path: {\n        page: (page || page !== 0) ? page : 1,\n        renderItem: 18,\n      }\n    })\n\n    if(res && res.status === 200){\n      setPageInfo({\n        ...pageInfo,\n        page: res.results.page,\n        total: res.results.totalPages\n      })\n      cleanUpData(res)\n    }else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back()\n      })\n    }\n\n  }\n\n  const SearchBasic = async (keyword: any, option: number, isPaging?: number) => {\n    Notiflix.Loading.circle()\n    if(!isPaging){\n      setOptionIndex(option)\n    }\n    const res = await RequestMethod('get', `moldSearch`,{\n      path: {\n        page: isPaging ?? 1,\n        renderItem: 18,\n      },\n      params: {\n        keyword: keyword ?? '',\n        opt: option ?? 0\n      }\n    })\n\n    if(res && res.status === 200){\n      setPageInfo({\n        ...pageInfo,\n        page: res.results.page,\n        total: res.results.totalPages\n      })\n      cleanUpData(res)\n    }\n  }\n\n  const cleanUpData = (res: any) => {\n    let tmpColumn = columnlist[\"mold\"];\n    let tmpRow = []\n    tmpColumn = tmpColumn.map((column: any) => {\n      let menuData: object | undefined;\n      res.results.menus && res.results.menus.map((menu: any) => {\n        if(menu.colName === column.key){\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab:menu.tab,\n            unit:menu.unit\n          }\n        } else if(menu.colName === 'id' && column.key === 'tmpId'){\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab:menu.tab,\n            unit:menu.unit\n          }\n        }\n      })\n\n      if(menuData){\n        return {\n          ...column,\n          ...menuData\n        }\n      }\n    }).filter((v:any) => v)\n\n    let additionalMenus = res.results.menus ? res.results.menus.map((menu:any) => {\n      if(menu.colName === null){\n        return {\n          id: menu.id,\n          name: menu.title,\n          width: menu.width,\n          key: menu.title,\n          editor: TextEditor,\n          type: 'additional',\n          unit: menu.unit\n        }\n      }\n    }).filter((v: any) => v) : []\n\n\n    tmpRow = res.results.info_list\n\n\n    loadAllSelectItems( [\n      ...tmpColumn,\n      ...additionalMenus\n    ] )\n\n\n    let selectKey = \"\"\n    let additionalData: any[] = []\n    tmpColumn.map((v: any) => {\n      if(v.selectList){\n        selectKey = v.key\n      }\n    })\n\n    additionalMenus.map((v: any) => {\n      if(v.type === 'additional'){\n        additionalData.push(v.key)\n      }\n    })\n\n    let pk = \"\";\n    Object.keys(tmpRow).map((v) => {\n      if(v.indexOf('_id') !== -1){\n        pk = v\n      }\n    })\n\n    let tmpBasicRow = tmpRow.map((row: any, index: number) => {\n\n      let appendAdditional: any = {}\n\n      row.additional && row.additional.map((v: any) => {\n        appendAdditional = {\n          ...appendAdditional,\n          [v.title]: v.value\n        }\n      })\n\n      let random_id = Math.random()*1000;\n      return {\n        cm_id:(index === 0 || row.ppd.seq === 1) ? row.product.raw_material.model.model : undefined,\n        cm_idPK:row.product.raw_material.model.cm_id,\n        mold_id:row.mold_id,\n        mold_name:row.ppd.mold_name,\n        limit:row.limit,\n        inspect:row.inspect,\n        current:row.current,\n        customer_id: (index === 0 || row.ppd.seq === 1) ? row.product.raw_material.model.customer.name : undefined,\n        customer_idPK: row.product.raw_material.model.customer.customer_id,\n        code: (index === 0 || row.ppd.seq === 1) ? row.product.raw_material.code : undefined,\n        name: (index === 0 || row.ppd.seq === 1) ? row.product.raw_material.name : undefined,\n        seq: row.ppd.seq,\n        cavity: row.ppd.cavity,\n        spm: row.spm,\n        slideHeight: row.slideHeight,\n        process_id: row.ppd.process.name,\n        ...appendAdditional,\n        id: `mold_${random_id}`,\n      }\n    })\n\n    setBasicRow([...tmpBasicRow])\n  }\n\n  const downloadExcel = () => {\n    let tmpSelectList: boolean[] = []\n    basicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id))\n    })\n    excelDownload(column, basicRow, `mold`, \"mold\", tmpSelectList)\n  }\n\n  const onClickHeaderButton = (index: number) => {\n    switch(index){\n      case 0:\n        setExcelOpen(true)\n        break;\n      case 1:\n\n        router.push(`/mes/item/manage/mold`)\n\n        break;\n      case 2:\n        SaveBasic()\n        break;\n    }\n  }\n\n  return (\n    <div>\n      <PageHeader\n        isSearch\n        searchKeyword={keyword}\n        onChangeSearchKeyword={(keyword) => {\n          if(keyword){\n            router.push(`/mes/rawmaterial/input?page=1&keyword=${keyword}&opt=${optionIndex}`)\n          }else{\n            router.push(`/mes/rawmaterial/input?page=1&keyword=`)\n          }\n        }}\n        searchOptionList={optionList}\n        onChangeSearchOption={(option) => {\n          setOptionIndex(option)\n        }}\n        calendarTitle={'입고일'}\n        optionIndex={optionIndex}\n      isCalendar\n        calendarType={'period'}\n        selectDate={selectDate}\n        //@ts-ignore\n        setSelectDate={setSelectDate}\n        title={\"부자재 재고 현황\"}\n        buttons={\n          ['엑셀로 받기', '수정하기', '저장하기', '삭제']\n        }\n        buttonsOnclick={\n          () => {}\n          // onClickHeaderButton\n        }\n      />\n      <ExcelTable\n        editable\n        resizable\n        headerList={[\n          SelectColumn,\n          ...column\n        ]}\n        row={basicRow}\n        // setRow={setBasicRow}\n        setRow={(e) => {\n          let tmp: Set<any> = selectList\n          e.map(v => {\n            if(v.isChange) tmp.add(v.id)\n          })\n          setSelectList(tmp)\n          setBasicRow(e)\n        }}\n        selectList={selectList}\n        //@ts-ignore\n        setSelectList={setSelectList}\n        height={basicRow.length * 40 >= 40*18+56 ? 40*19 : basicRow.length * 40 + 56}\n      />\n      <PaginationComponent\n        currentPage={pageInfo.page}\n        totalPage={pageInfo.total}\n        setPage={(page) => {\n          if(keyword){\n            router.push(`/mes/basic/mold?page=${page}&keyword=${keyword}&opt=${option}`)\n          }else{\n            router.push(`/mes/basic/mold?page=${page}`)\n          }\n        }}\n      />\n      <ExcelDownloadModal\n        isOpen={excelOpen}\n        column={column}\n        basicRow={basicRow}\n        filename={`금형기본정보`}\n        sheetname={`금형기본정보`}\n        selectList={selectList}\n        tab={'ROLE_BASE_07'}\n        setIsOpen={setExcelOpen}\n      />\n    </div>\n  );\n}\n\nexport const getServerSideProps = (ctx: NextPageContext) => {\n  return {\n    props: {\n      page: ctx.query.page ?? 1,\n      keyword: ctx.query.keyword ?? \"\",\n      option: ctx.query.opt ?? 0,\n    }\n  }\n}\n\nexport {MesSubMaterialStock};\n"]},"metadata":{},"sourceType":"module"}