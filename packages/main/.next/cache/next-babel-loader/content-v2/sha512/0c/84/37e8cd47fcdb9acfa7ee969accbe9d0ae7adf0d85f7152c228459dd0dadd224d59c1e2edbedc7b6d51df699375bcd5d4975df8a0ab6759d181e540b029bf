{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/main/component/ButtonComponent/AddlButtom.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { CellButton } from '../../styles/styledComponents';\n\nconst CellButtonComponent = ({\n  row,\n  column,\n  onRowChange\n}) => {\n  const {\n    0: title,\n    1: setTitle\n  } = useState(\"추가\");\n  return __jsx(CellButton, {\n    onClick: () => {\n      onRowChange(_objectSpread(_objectSpread({}, row), {}, {\n        add: true\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, title);\n};\n\nexport default CellButtonComponent;","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/main/component/ButtonComponent/AddlButtom.tsx"],"names":["React","useState","CellButton","CellButtonComponent","row","column","onRowChange","title","setTitle","add"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAA0BC,QAA1B,QAAyC,OAAzC;AAEA,SAAQC,UAAR,QAAyB,+BAAzB;;AAUA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,MAAP;AAAeC,EAAAA;AAAf,CAAD,KAAyC;AACnE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBP,QAAQ,CAAS,IAAT,CAAlC;AAEA,SACE,MAAC,UAAD;AAAY,IAAA,OAAO,EAAE,MAAM;AACzBK,MAAAA,WAAW,iCACNF,GADM;AAETK,QAAAA,GAAG,EAAE;AAFI,SAAX;AAID,KALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGF,KANH,CADF;AAUD,CAbD;;AAeA,eAAeJ,mBAAf","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {IExcelHeaderType} from '../../common/@types/type'\nimport {CellButton} from '../../styles/styledComponents'\nimport {useRouter} from 'next/router'\nimport Notiflix from 'notiflix'\n\ninterface IProps {\n  row: any\n  column: IExcelHeaderType\n  onRowChange: (row: any) => void\n}\n\nconst CellButtonComponent = ({ row, column, onRowChange}: IProps) => {\n  const [title, setTitle] = useState<string>(\"추가\")\n\n  return (\n    <CellButton onClick={() => {\n      onRowChange({\n        ...row,\n        add: true\n      })\n    }}>\n      {title}\n    </CellButton>\n  );\n}\n\nexport default CellButtonComponent;\n"]},"metadata":{},"sourceType":"module"}