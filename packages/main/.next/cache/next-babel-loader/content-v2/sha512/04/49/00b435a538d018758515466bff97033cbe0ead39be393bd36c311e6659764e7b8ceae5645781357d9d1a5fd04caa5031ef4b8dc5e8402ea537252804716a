{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/shared/src/components/Excel/ExcelTable.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport styled from \"styled-components\"; // @ts-ignore\n\nimport DataGrid from 'react-data-grid';\nimport { SearchModalStyle } from '../../styles/styledComponents';\nimport { RequestMethod } from \"../../common/RequestFunctions\";\n\nconst ExcelTable = ({\n  headerList,\n  setHeaderList,\n  row,\n  width,\n  maxWidth,\n  rowHeight,\n  height,\n  maxHeight,\n  editable,\n  resizable,\n  selectable,\n  setRow,\n  setSelectRow,\n  selectList,\n  setSelectList,\n  type,\n  disableVirtualization,\n  selectPage,\n  setSelectPage,\n  overflow,\n  headerAlign\n}) => {\n  const {\n    0: selectedRows,\n    1: setSelectedRows\n  } = useState(selectList !== null && selectList !== void 0 ? selectList : new Set()); // const [selectPage, setSelectPage] = useState<number>(1);\n\n  const onePageHeight = 600;\n\n  const rowKeyGetter = row => {\n    return row.id;\n  };\n\n  const scrollState = () => {\n    if (overflow) {\n      return \"0px\";\n    } else {\n      return \"8px\";\n    }\n  };\n\n  let tempData = [];\n  useEffect(() => {\n    setSelectList && setSelectList(selectedRows);\n  }, [selectedRows]);\n  useEffect(() => {\n    let allWidth = 0;\n    headerList.map(v => {\n      allWidth += v.width;\n    });\n  }, [headerList]);\n\n  const showDataGrid = () => {\n    return __jsx(DataGridTable, {\n      headerRowHeight: 40 //@ts-ignore\n      ,\n      rowKeyGetter: rowKeyGetter //@ts-ignore\n      ,\n      className: 'cell',\n      columns: headerList,\n      rows: row,\n      onColumnResize: (v, i) => {\n        tempData.map((time, i) => {\n          clearTimeout(time);\n        }); // headerList[v-1].width = i;\n        //\n        // setHeaderList && setHeaderList(headerList)\n\n        tempData.push(setTimeout(() => {\n          let tmpHeader = headerList[v].name.indexOf('(필수)') === -1 ? headerList[v].name : headerList[v - 1].name.split('(필수)')[0];\n          RequestMethod(\"post\", \"itemSave\", {\n            tab: headerList[v].tab,\n            menus: [{\n              mi_id: headerList[v].id,\n              width: i <= 80 ? 80 : i,\n              title: tmpHeader,\n              hide: false\n            }]\n          }).then(res => {\n            headerList[v].width = i <= 80 ? 80 : i;\n            setHeaderList && setHeaderList(headerList);\n          });\n        }, 800));\n      },\n      rowHeight: rowHeight !== null && rowHeight !== void 0 ? rowHeight : 40,\n      defaultColumnOptions: {\n        resizable: resizable,\n        editable: editable\n      },\n      onRowsChange: setRow,\n      emptyRowsView: () => __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 28\n        }\n      }, \"empty\"),\n      onSelectedRows: e => {},\n      onSelectedRowsChange: setSelectedRows,\n      selectedRows: selectedRows,\n      onRowChange: e => {\n        setSelectedRows(e);\n      },\n      onRowClick: (i, r) => {\n        setSelectRow && setSelectRow(i);\n      },\n      style: {\n        border: \"none\",\n        overflow: \"auto\",\n        width: width !== null && width !== void 0 ? width : 1576,\n        maxWidth: maxWidth,\n        height: height !== null && height !== void 0 ? height : 760,\n        maxHeight: maxHeight,\n        backgroundColor: '#00000000',\n        textAlign: 'center'\n      },\n      theme: scrollState,\n      state: type,\n      enableVirtualization: !disableVirtualization,\n      onScroll: e => {\n        if (e.target.scrollTop > onePageHeight * (selectPage - 1)) {\n          setSelectPage(selectPage + 1);\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 12\n      }\n    });\n  };\n\n  if (type === 'searchModal') {\n    return __jsx(SearchModalStyle // @ts-ignore\n    , {\n      headerAlign: headerAlign,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 12\n      }\n    }, showDataGrid());\n  } else {\n    return showDataGrid(); // <ExcelDataStyle>\n    // </ExcelDataStyle>\n  }\n};\n\nconst DataGridTable = styled(DataGrid)`\n  ::-webkit-scrollbar{\n    display:block;\n    width:${props => props.theme};\n    height:8px;\n  }\n\n  ::-webkit-scrollbar-thumb{\n    background:#484848;\n  }\n\n  ::-webkit-scrollbar-track{\n    background:none;\n  }\n\n  ::-webkit-scrollbar-corner{\n    display:none;\n  }\n  \n  ${props => props.state === \"searchModal\" ? \"\" : `\n    .rdg{\n        border:none;\n        \n    }\n    .rdg-cell{\n        border:none;\n        margin-bottom:1px;\n        border-right: 1px solid #151E2D;\n        \n    }\n    \n    .rdg-header-row{\n        background:#111319;\n        color:white;\n        // grid-gap:1px;\n        border:none;\n        // grid-gap:1px;\n    }\n    \n    .rdg-row {\n        border:none;\n        background:none;\n        background-color:none;\n        color:white;\n        // grid-gap:1px;\n        &:hover{\n            background:none;\n            background-color:none;\n        }\n        \n    }\n    .rdg-row > .rdg-cell{\n        background:#353B48;\n        // &:hover{\n        //     background:red;\n        // }\n    }\n    \n    .rdg-row[aria-selected=true]{\n        background:none;\n        &:hover{\n            background:none;\n            background-color:none;\n        }\n    }\n    \n    .editDropdown > option {\n      background:#484848;\n    }\n   \n    .rdg-row[aria-selected=true]{\n        background:none;\n    }\n\n    .rdg-checkbox-input:checked + div{\n        width:20px;\n        height:20px;\n        box-shadow:none;\n        border:none;\n        background: url(${require('../../../public/images/check_box_activated.png')}) ;\n        background-size: 20px 20px;\n    }\n    \n    .c1wupbe700-canary49 {\n      padding: 0;\n    }\n    \n  div .cell .rdg-row {\n    background-color: #353B48;\n  }\n  \n  .editCell {\n    background-color: #00000000;\n    color: white;\n    width: 100%;\n    height: 100%;\n  }\n  \n  .editDropdown {\n    background-color: #00000000;\n    color: white;\n    width: 100%;\n    height: 100%;\n  }\n  .editDropdown > option {\n    background:#484848;\n  }\n  `}\n    \n  \n`;\nexport { ExcelTable };","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/shared/src/components/Excel/ExcelTable.tsx"],"names":["useEffect","useState","styled","DataGrid","SearchModalStyle","RequestMethod","ExcelTable","headerList","setHeaderList","row","width","maxWidth","rowHeight","height","maxHeight","editable","resizable","selectable","setRow","setSelectRow","selectList","setSelectList","type","disableVirtualization","selectPage","setSelectPage","overflow","headerAlign","selectedRows","setSelectedRows","Set","onePageHeight","rowKeyGetter","id","scrollState","tempData","allWidth","map","v","showDataGrid","i","time","clearTimeout","push","setTimeout","tmpHeader","name","indexOf","split","tab","menus","mi_id","title","hide","then","res","e","r","border","backgroundColor","textAlign","target","scrollTop","DataGridTable","props","theme","state","require"],"mappings":"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ACF,OA7DI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAgED,GAlED;;AAoEA,MAAGF,IAAI,KAAK,aAAZ,EAA0B;AACxB,WAAO,MAAC,gBAAD,CACL;AADK;AAEL,MAAA,WAAW,EAAEK,WAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIJY,YAAY,EAJR,CAAP;AAMD,GAPD,MAOO;AACL,WAAOA,YAAY,EAAnB,CADK,CAEL;AACA;AACD;AAEF,CAjHD;;AAmHA,MAAMwB,aAAa,GAAG7D,MAAM,CAACC,QAAD,CAAW;AACvC;AACA;AACA,YAAa6D,KAAD,IAAcA,KAAK,CAACC,KAAM;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAKD,KAAD,IAAeA,KAAK,CAACE,KAAN,KAAgB,aAAhB,GAAgC,EAAhC,GACd;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0BC,OAAO,CAAC,gDAAD,CAAmD;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACC;AACD;AACA;AACA,CAhHA;AAkHA,SAAQ7D,UAAR","sourcesContent":["import {useEffect, useState} from 'react'\nimport styled from \"styled-components\";\n// @ts-ignore\nimport DataGrid, {TextEditor} from 'react-data-grid'\nimport {IExcelHeaderType} from '../../@types/type'\nimport {ExcelDataStyle, SearchModalStyle} from '../../styles/styledComponents'\nimport {RequestMethod} from \"../../common/RequestFunctions\";\nimport {NextComponentType, NextPage} from 'next'\n\ninterface IProps {\n  headerList: Array<IExcelHeaderType>\n  setHeaderList?:(value:Array<IExcelHeaderType>) => void\n  row: Array<any>\n  width?: number\n  maxWidth?:number\n  rowHeight?: number\n  height?:number\n  maxHeight?:number\n  editable?: boolean\n  resizable?: boolean\n  selectable?: boolean\n  setRow: (row: Array<any>) => void\n  setSelectRow?: (index: number) => void\n  setSelectList?: (selectedRows: ReadonlySet<number>) => void\n  selectList?: ReadonlySet<number>\n  type?: 'searchModal'\n  disableVirtualization?: boolean\n  selectPage?:number\n  setSelectPage?:(value:number)=>void\n  overflow?:\"hidden\"\n  headerAlign?: string\n}\n\nconst ExcelTable = ({headerList, setHeaderList, row, width, maxWidth, rowHeight, height, maxHeight, editable, resizable, selectable, setRow, setSelectRow, selectList, setSelectList, type, disableVirtualization, selectPage, setSelectPage, overflow, headerAlign}: IProps) => {\n  const [selectedRows, setSelectedRows] = useState<ReadonlySet<number>>(selectList ?? new Set());\n  // const [selectPage, setSelectPage] = useState<number>(1);\n  const onePageHeight = 600;\n  const rowKeyGetter = (row: any) => {\n    return row.id;\n  }\n\n  const scrollState = () => {\n    if(overflow){\n      return \"0px\"\n    }else{\n      return \"8px\"\n    }\n\n  }\n\n  let tempData:any[] = [];\n\n  useEffect(() => {\n    setSelectList && setSelectList(selectedRows)\n  }, [selectedRows])\n\n  useEffect(() => {\n    let allWidth = 0\n    headerList.map((v: any) => {\n      allWidth += v.width\n    })\n  }, [headerList])\n\n\n\n  const showDataGrid = () => {\n\n    return <DataGridTable\n      headerRowHeight={40}\n      //@ts-ignore\n      rowKeyGetter={rowKeyGetter}\n      //@ts-ignore\n      className={'cell'}\n      columns={headerList}\n      rows={row}\n      onColumnResize={(v, i) => {\n        tempData.map((time,i)=>{\n            clearTimeout(time)\n        })\n        // headerList[v-1].width = i;\n        //\n        // setHeaderList && setHeaderList(headerList)\n        tempData.push(\n            setTimeout(()=>{\n              let tmpHeader = headerList[v].name.indexOf('(필수)') === -1 ? headerList[v].name : headerList[v-1].name.split('(필수)')[0]\n              RequestMethod(\"post\", \"itemSave\", {tab:headerList[v].tab, menus:[{mi_id:headerList[v].id, width:i <= 80 ? 80 : i,title:tmpHeader, hide:false}]} )\n                  .then((res)=> {\n                    headerList[v].width = i <= 80 ? 80 : i;\n\n                    setHeaderList && setHeaderList(headerList)\n                  })\n            },800)\n        );\n      }}\n      rowHeight={rowHeight ?? 40}\n      defaultColumnOptions={{\n        resizable: resizable,\n        editable: editable,\n      }}\n      onRowsChange={setRow}\n      emptyRowsView={() => <div>empty</div>}\n      onSelectedRows={(e:any)=>{\n      }}\n      onSelectedRowsChange={setSelectedRows}\n      selectedRows={selectedRows}\n      onRowChange={(e:any)=>{\n        setSelectedRows(e)\n      }}\n      onRowClick={(i, r) => {\n        setSelectRow && setSelectRow(i)\n      }}\n      style={{\n        border:\"none\",\n        overflow:\"auto\",\n        width: width ?? 1576,\n        maxWidth: maxWidth,\n        height: height ?? 760,\n        maxHeight:maxHeight,\n        backgroundColor: '#00000000',\n        textAlign: 'center',\n      }}\n      theme={scrollState}\n      state={type}\n      enableVirtualization={!disableVirtualization}\n      onScroll={(e:any)=>{\n        if(e.target.scrollTop > onePageHeight * (selectPage-1)){\n          setSelectPage(selectPage+1);\n        }\n      }}\n\n    />\n  }\n\n  if(type === 'searchModal'){\n    return <SearchModalStyle\n      // @ts-ignore\n      headerAlign={headerAlign}\n    >\n      {showDataGrid()}\n    </SearchModalStyle>\n  } else {\n    return showDataGrid()\n    // <ExcelDataStyle>\n    // </ExcelDataStyle>\n  }\n\n}\n\nconst DataGridTable = styled(DataGrid)`\n  ::-webkit-scrollbar{\n    display:block;\n    width:${(props:any)=> props.theme};\n    height:8px;\n  }\n\n  ::-webkit-scrollbar-thumb{\n    background:#484848;\n  }\n\n  ::-webkit-scrollbar-track{\n    background:none;\n  }\n\n  ::-webkit-scrollbar-corner{\n    display:none;\n  }\n  \n  ${(props:any) => props.state === \"searchModal\" ? \"\" : \n    `\n    .rdg{\n        border:none;\n        \n    }\n    .rdg-cell{\n        border:none;\n        margin-bottom:1px;\n        border-right: 1px solid #151E2D;\n        \n    }\n    \n    .rdg-header-row{\n        background:#111319;\n        color:white;\n        // grid-gap:1px;\n        border:none;\n        // grid-gap:1px;\n    }\n    \n    .rdg-row {\n        border:none;\n        background:none;\n        background-color:none;\n        color:white;\n        // grid-gap:1px;\n        &:hover{\n            background:none;\n            background-color:none;\n        }\n        \n    }\n    .rdg-row > .rdg-cell{\n        background:#353B48;\n        // &:hover{\n        //     background:red;\n        // }\n    }\n    \n    .rdg-row[aria-selected=true]{\n        background:none;\n        &:hover{\n            background:none;\n            background-color:none;\n        }\n    }\n    \n    .editDropdown > option {\n      background:#484848;\n    }\n   \n    .rdg-row[aria-selected=true]{\n        background:none;\n    }\n\n    .rdg-checkbox-input:checked + div{\n        width:20px;\n        height:20px;\n        box-shadow:none;\n        border:none;\n        background: url(${require('../../../public/images/check_box_activated.png')}) ;\n        background-size: 20px 20px;\n    }\n    \n    .c1wupbe700-canary49 {\n      padding: 0;\n    }\n    \n  div .cell .rdg-row {\n    background-color: #353B48;\n  }\n  \n  .editCell {\n    background-color: #00000000;\n    color: white;\n    width: 100%;\n    height: 100%;\n  }\n  \n  .editDropdown {\n    background-color: #00000000;\n    color: white;\n    width: 100%;\n    height: 100%;\n  }\n  .editDropdown > option {\n    background:#484848;\n  }\n  `\n}\n    \n  \n`;\n\nexport {ExcelTable};\n"]},"metadata":{},"sourceType":"module"}