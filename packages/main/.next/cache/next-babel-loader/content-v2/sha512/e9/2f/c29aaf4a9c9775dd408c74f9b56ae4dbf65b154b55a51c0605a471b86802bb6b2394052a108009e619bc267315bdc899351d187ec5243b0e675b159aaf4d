{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/stock/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from \"react\";\nimport MenuNavigation from \"../../../component/MenuNav/MenuNavigation\";\nimport ProfileHeader from \"../../../component/Profile/ProfileHeader\";\nimport PageHeader from \"../../../component/Header/Header\";\nimport ExcelTable from \"../../../component/Excel/ExcelTable\";\nimport { columnlist } from \"../../../common/columnInit\";\nimport { RequestMethod } from \"../../../common/RequestFunctions\";\n//@ts-ignore\nimport { SelectColumn } from \"react-data-grid\";\nimport { excelDownload } from \"../../../common/excelDownloadFunction\";\nimport PaginationComponent from \"../../../component/Pagination/PaginationComponent\";\nimport { useRouter } from \"next/router\"; //@ts-ignore\n\nimport Notiflix from \"notiflix\";\nimport ExcelDownloadModal from '../../../component/Modal/ExcelDownloadMoadal';\nimport TextEditor from \"../../../component/InputBox/ExcelBasicInputBox\";\nconst optList = [\"고객사명\", \"모델\", \"CODE\", \"품명\"];\n\nconst Stock = ({\n  page,\n  keyword,\n  option\n}) => {\n  const router = useRouter();\n  const {\n    0: excelOpen,\n    1: setExcelOpen\n  } = useState(false);\n  const {\n    0: rowData,\n    1: setRowData\n  } = useState([]);\n  const {\n    0: column,\n    1: setColumn\n  } = useState(columnlist.stock);\n  const {\n    0: selectList,\n    1: setSelectList\n  } = useState(new Set());\n  const {\n    0: optionList,\n    1: setOptionList\n  } = useState(optList);\n  const {\n    0: optionIndex,\n    1: setOptionIndex\n  } = useState(0);\n  const {\n    0: pageInfo,\n    1: setPageInfo\n  } = useState({\n    page: 1,\n    total: 1\n  });\n  useEffect(() => {\n    setOptionIndex(option);\n\n    if (keyword) {\n      SearchList(keyword, option, page).then(() => {\n        Notiflix.Loading.remove();\n      });\n    } else {\n      LoadBasic(page).then(() => {\n        Notiflix.Loading.remove();\n      }).then(() => {\n        Notiflix.Loading.remove();\n      });\n    }\n  }, [page, keyword, option]);\n\n  const cleanUpData = async res => {\n    let tmpColumn = columnlist.stock;\n    let tmpRow = [];\n    tmpColumn = tmpColumn.map(column => {\n      let menuData;\n      res.results.menus && res.results.menus.map(menu => {\n        if (menu.colName === column.key) {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit\n          };\n        } else if (menu.colName === 'id' && column.key === 'tmpId') {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit\n          };\n        }\n      });\n\n      if (menuData) {\n        return _objectSpread(_objectSpread({}, column), menuData);\n      }\n    }).filter(v => v);\n    let additionalMenus = res.results.menus ? res.results.menus.map(menu => {\n      if (menu.colName === null) {\n        return {\n          id: menu.id,\n          name: menu.title,\n          width: menu.width,\n          key: menu.title,\n          editor: TextEditor,\n          type: 'additional',\n          unit: menu.unit,\n          tab: menu.tab\n        };\n      }\n    }).filter(v => v) : [];\n    tmpRow = res.results.info_list;\n    let selectKey = \"\"; // let additionalData: any[] = []\n\n    tmpColumn.map(v => {\n      if (v.selectList) {\n        selectKey = v.key;\n      }\n    });\n    setColumn([...tmpColumn, ...additionalMenus]);\n    let pk = \"\";\n    Object.keys(tmpRow).map(v => {\n      if (v.indexOf('_id') !== -1) {\n        pk = v;\n      }\n    });\n    let tmpBasicRow = tmpRow.map((row, index) => {\n      let random_id = Math.random() * 1000;\n      return _objectSpread(_objectSpread({}, row), {}, {\n        customer_id: row.product.raw_material.model.customer.name,\n        cm_id: row.product.raw_material.model.model,\n        model: row.product.raw_material.model.model,\n        code: row.product.raw_material.code,\n        name: row.product.raw_material.name,\n        unused: row.unused,\n        wip: row.wip_stock,\n        current_stock: row.current_stock,\n        expectation: row.expectation,\n        id: `stock_${random_id}`\n      });\n    });\n    setPageInfo({\n      total: res.results.totalPages,\n      page: res.results.page\n    });\n    setRowData([...tmpBasicRow]);\n    Notiflix.Loading.remove(300);\n  };\n\n  const LoadBasic = async page => {\n    Notiflix.Loading.standard();\n    const res = await RequestMethod('get', \"stockList\", {\n      path: {\n        page: page !== null && page !== void 0 ? page : 1,\n        renderItem: 17\n      }\n    });\n\n    if (res && res.status === 200) {\n      if (res.results.totalPages !== 0 && res.results.totalPages < page) {\n        LoadBasic(page - 1);\n      } else {\n        setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n          page: res.results.page,\n          total: res.results.totalPages\n        }));\n        cleanUpData(res);\n      }\n    }\n  };\n\n  const SearchList = async (keyword, option, isPaging) => {\n    if (!isPaging) {\n      setOptionIndex(option);\n    }\n\n    const res = await RequestMethod(\"get\", \"stockSearch\", {\n      path: {\n        page: isPaging !== null && isPaging !== void 0 ? isPaging : 1,\n        renderItem: 17\n      },\n      params: {\n        keyword: keyword !== null && keyword !== void 0 ? keyword : '',\n        opt: option !== null && option !== void 0 ? option : 0\n      }\n    });\n\n    if (res && res.status === 200) {\n      setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n        page: res.results.page,\n        total: res.results.totalPages\n      }));\n      cleanUpData(res);\n    }\n  };\n\n  const downloadExcel = () => {\n    let tmpSelectList = [];\n    rowData.map(row => {\n      tmpSelectList.push(selectList.has(row.id));\n    });\n    excelDownload(column, rowData, \"stock\", \"stock\", tmpSelectList);\n  };\n\n  const buttonClickEvents = number => {\n    switch (number) {\n      case 0:\n        router.push(`/mes/item/manage/stock`);\n        return;\n\n      case 1:\n        setExcelOpen(true);\n        return;\n\n      default:\n        return;\n    }\n  };\n\n  useEffect(() => {\n    Notiflix.Loading.standard();\n    setOptionIndex(option);\n\n    if (keyword) {\n      SearchList(keyword, option, page);\n    } else {\n      LoadBasic(page).then(() => {});\n    }\n  }, [page, keyword, option]);\n  return __jsx(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 9\n    }\n  }, __jsx(MenuNavigation, {\n    pageType: 'MES',\n    subType: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    style: {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }\n  }, __jsx(ProfileHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 17\n    }\n  }), __jsx(PageHeader, {\n    title: \"재고 현황\",\n    buttons: [\"항목관리\", \"엑셀로 받기\"],\n    buttonsOnclick: buttonClickEvents,\n    isSearch: true,\n    searchKeyword: keyword,\n    onChangeSearchKeyword: keyword => {\n      // if(keyword){\n      router.push(`/mes/stock?page=1&keyword=${keyword}&opt=${optionIndex}`); // }else{\n      //     router.push(`/mes/stock?page=1&keyword=${keyword}&opt=${optionIndex}`)\n      // }\n    },\n    searchOptionList: optionList,\n    onChangeSearchOption: option => {\n      setOptionIndex(option);\n    },\n    optionIndex: optionIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 21\n    }\n  }), __jsx(ExcelTable, {\n    editable: true,\n    headerList: [SelectColumn, ...column],\n    row: rowData,\n    setRow: setRowData,\n    setSelectList: setSelectList,\n    selectList: selectList,\n    width: 1570,\n    height: rowData.length * 40 >= 40 * 18 + 56 ? 40 * 19 : rowData.length * 40 + 56,\n    resizable: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 17\n    }\n  }, __jsx(PaginationComponent, {\n    currentPage: pageInfo.page,\n    totalPage: pageInfo.total,\n    setPage: page => {\n      // if(keyword){\n      router.push(`/mes/stock?page=${page}&keyword=${keyword}&opt=${option}`); // }else{\n      //     router.push(`/mes/stock?page=${page}`)\n      // }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 21\n    }\n  }))), __jsx(ExcelDownloadModal, {\n    isOpen: excelOpen,\n    column: column,\n    basicRow: rowData,\n    filename: `재고현황`,\n    sheetname: `재고현황`,\n    selectList: selectList,\n    tab: 'ROLE_STK_01',\n    setIsOpen: setExcelOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport const getServerSideProps = ctx => {\n  var _ctx$query$page, _ctx$query$keyword, _ctx$query$opt;\n\n  return {\n    props: {\n      page: (_ctx$query$page = ctx.query.page) !== null && _ctx$query$page !== void 0 ? _ctx$query$page : 1,\n      keyword: (_ctx$query$keyword = ctx.query.keyword) !== null && _ctx$query$keyword !== void 0 ? _ctx$query$keyword : \"\",\n      option: (_ctx$query$opt = ctx.query.opt) !== null && _ctx$query$opt !== void 0 ? _ctx$query$opt : 0\n    }\n  };\n}; // Stock.getInitialProps = async ({ query }) => {\n//     let { page, keyword, opt } = query\n//     if (typeof page === 'string')\n//         page = parseInt(page);\n//     if (typeof opt === 'string')\n//         opt = parseInt(opt);\n//     return { page, keyword, option: opt };\n// }\n\nexport default Stock;","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/stock/index.tsx"],"names":["React","useEffect","useState","MenuNavigation","ProfileHeader","PageHeader","ExcelTable","columnlist","RequestMethod","SelectColumn","excelDownload","PaginationComponent","useRouter","Notiflix","ExcelDownloadModal","TextEditor","optList","Stock","page","keyword","option","router","excelOpen","setExcelOpen","rowData","setRowData","column","setColumn","stock","selectList","setSelectList","Set","optionList","setOptionList","optionIndex","setOptionIndex","pageInfo","setPageInfo","total","SearchList","then","Loading","remove","LoadBasic","cleanUpData","res","tmpColumn","tmpRow","map","menuData","results","menus","menu","colName","key","id","name","title","width","tab","unit","filter","v","additionalMenus","editor","type","info_list","selectKey","pk","Object","keys","indexOf","tmpBasicRow","row","index","random_id","Math","random","customer_id","product","raw_material","model","customer","cm_id","code","unused","wip","wip_stock","current_stock","expectation","totalPages","standard","path","renderItem","status","isPaging","params","opt","downloadExcel","tmpSelectList","push","has","buttonClickEvents","number","display","length","marginBottom","getServerSideProps","ctx","props","query"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport MenuNavigation from \"../../../component/MenuNav/MenuNavigation\";\nimport ProfileHeader from \"../../../component/Profile/ProfileHeader\";\nimport PageHeader from \"../../../component/Header/Header\";\nimport ExcelTable from \"../../../component/Excel/ExcelTable\";\nimport {columnlist} from \"../../../common/columnInit\";\nimport {RequestMethod} from \"../../../common/RequestFunctions\";\nimport {IExcelHeaderType} from \"../../../common/@types/type\";\n//@ts-ignore\nimport {SelectColumn} from \"react-data-grid\";\nimport {excelDownload} from \"../../../common/excelDownloadFunction\";\nimport PaginationComponent from \"../../../component/Pagination/PaginationComponent\";\nimport {NextPageContext} from \"next\";\nimport {useRouter} from \"next/router\";\n//@ts-ignore\nimport Notiflix from \"notiflix\";\nimport ExcelDownloadModal from '../../../component/Modal/ExcelDownloadMoadal'\nimport BasicContainer from '../basic/customer'\nimport TextEditor from \"../../../component/InputBox/ExcelBasicInputBox\";\n\ninterface IProps {\n    children?: any\n    page?: number\n    keyword?: string\n    option?: number\n}\n\nconst optList = [\"고객사명\", \"모델\", \"CODE\", \"품명\"];\nconst Stock = ({page, keyword, option}: IProps) => {\n    const router = useRouter();\n\n    const [excelOpen, setExcelOpen] = useState<boolean>(false)\n\n    const [rowData, setRowData] = useState<any[]>([]);\n    const [column, setColumn] = useState<Array<IExcelHeaderType>>(columnlist.stock);\n    const [selectList, setSelectList] = useState<ReadonlySet<number>>(new Set());\n    const [optionList, setOptionList] = useState<string[]>(optList)\n    const [optionIndex, setOptionIndex] = useState<number>(0)\n\n    const [pageInfo, setPageInfo] = useState<{page:number, total:number}>({\n        page:1,\n        total:1\n    });\n\n    useEffect(() => {\n        setOptionIndex(option)\n        if(keyword){\n            SearchList(keyword, option, page).then(() => {\n                Notiflix.Loading.remove()\n            })\n        }else{\n            LoadBasic(page).then(() => {\n                Notiflix.Loading.remove()\n            }).then(() => {\n                Notiflix.Loading.remove()\n            })\n        }\n    }, [page, keyword, option])\n\n    const cleanUpData = async(res: any) => {\n        let tmpColumn = columnlist.stock;\n        let tmpRow = []\n        tmpColumn = tmpColumn.map((column: any) => {\n            let menuData: object | undefined;\n            res.results.menus && res.results.menus.map((menu: any) => {\n                if(menu.colName === column.key){\n                    menuData = {\n                        id: menu.id,\n                        name: menu.title,\n                        width: menu.width,\n                        tab:menu.tab,\n                        unit:menu.unit\n                    }\n                } else if(menu.colName === 'id' && column.key === 'tmpId'){\n                    menuData = {\n                        id: menu.id,\n                        name: menu.title,\n                        width: menu.width,\n                        tab:menu.tab,\n                        unit:menu.unit\n                    }\n                }\n            })\n\n            if(menuData){\n                return {\n                    ...column,\n                    ...menuData\n                }\n            }\n        }).filter((v:any) => v)\n\n        let additionalMenus = res.results.menus ? res.results.menus.map((menu:any) => {\n            if(menu.colName === null){\n                return {\n                    id: menu.id,\n                    name: menu.title,\n                    width: menu.width,\n                    key: menu.title,\n                    editor: TextEditor,\n                    type: 'additional',\n                    unit: menu.unit,\n                    tab: menu.tab\n                }\n            }\n        }).filter((v: any) => v) : []\n\n        tmpRow = res.results.info_list\n\n        let selectKey = \"\"\n        // let additionalData: any[] = []\n        tmpColumn.map((v: any) => {\n            if(v.selectList){\n                selectKey = v.key\n            }\n        })\n\n        setColumn([...tmpColumn, ...additionalMenus])\n\n        let pk = \"\";\n        Object.keys(tmpRow).map((v) => {\n            if(v.indexOf('_id') !== -1){\n                pk = v\n            }\n        })\n\n\n        let tmpBasicRow = tmpRow.map((row: any, index: number) => {\n            let random_id = Math.random()*1000;\n\n            return {\n                ...row,\n                customer_id: row.product.raw_material.model.customer.name,\n                cm_id:row.product.raw_material.model.model,\n                model:row.product.raw_material.model.model,\n                code:row.product.raw_material.code,\n                name: row.product.raw_material.name,\n                unused: row.unused,\n                wip: row.wip_stock,\n                current_stock: row.current_stock,\n                expectation: row.expectation,\n                id: `stock_${random_id}`,\n            }\n        })\n\n        setPageInfo({total:res.results.totalPages ,page:res.results.page})\n        setRowData([...tmpBasicRow])\n        Notiflix.Loading.remove(300);\n    }\n\n\n\n    const LoadBasic = async(page?:number) => {\n        Notiflix.Loading.standard();\n        const res = await RequestMethod('get', \"stockList\",\n            {\n                path:\n                    {\n                        page:page ?? 1,\n                        renderItem:17,\n                    }\n            } )\n        if(res && res.status === 200){\n            if(res.results.totalPages !== 0 && res.results.totalPages < page){\n                LoadBasic(page - 1)\n            }else{\n                setPageInfo({\n                    ...pageInfo,\n                    page: res.results.page,\n                    total: res.results.totalPages\n                })\n                cleanUpData(res)\n            }\n        }\n    }\n\n    const SearchList = async(keyword:string, option: number, isPaging?: number) => {\n        if(!isPaging){\n            setOptionIndex(option)\n        }\n\n        const res = await RequestMethod(\"get\", \"stockSearch\", {\n            path:{\n                page:isPaging ?? 1,\n                renderItem:17,\n\n            },\n            params:{\n                keyword:keyword ?? '',\n                opt:option ?? 0,\n            }\n        })\n\n        if(res && res.status === 200){\n            setPageInfo({\n                ...pageInfo,\n                page: res.results.page,\n                total: res.results.totalPages\n            })\n            cleanUpData(res)\n        }\n    }\n\n\n    const downloadExcel = () => {\n        let tmpSelectList: boolean[] = []\n        rowData.map(row => {\n            tmpSelectList.push(selectList.has(row.id))\n        })\n        excelDownload(column, rowData, \"stock\", \"stock\", tmpSelectList)\n    }\n\n    const buttonClickEvents = (number:number) => {\n        switch(number) {\n            case 0 :\n                router.push(`/mes/item/manage/stock`)\n                return\n\n            case 1:\n                setExcelOpen(true)\n                return\n            default :\n                return\n\n        }\n    }\n\n\n    useEffect(() => {\n        Notiflix.Loading.standard();\n        setOptionIndex(option)\n        if(keyword){\n            SearchList(keyword, option, page)\n        }else{\n            LoadBasic(page).then(() => {})\n        }\n    }, [page, keyword, option])\n\n\n    return (\n        <div style={{display:\"flex\"}}>\n            <MenuNavigation pageType={'MES'} subType={3}/>\n            <div style={{}}>\n                <ProfileHeader/>\n                    <PageHeader\n                        title={\"재고 현황\"}\n                        buttons={[\"항목관리\",\"엑셀로 받기\"]}\n                        buttonsOnclick={buttonClickEvents}\n                        isSearch={true}\n                        searchKeyword={keyword}\n                        onChangeSearchKeyword={(keyword) => {\n                            // if(keyword){\n                                router.push(`/mes/stock?page=1&keyword=${keyword}&opt=${optionIndex}`)\n                            // }else{\n                            //     router.push(`/mes/stock?page=1&keyword=${keyword}&opt=${optionIndex}`)\n                            // }\n                        }}\n\n                        searchOptionList={optionList}\n\n                        onChangeSearchOption={(option) => {\n                            setOptionIndex(option)\n                        }}\n                        optionIndex={optionIndex}\n                    />\n                <ExcelTable\n                    editable\n                    headerList={[\n                        SelectColumn,\n                        ...column\n                    ]}\n                    row={rowData}\n                    setRow={setRowData}\n                    setSelectList={setSelectList}\n                    selectList={selectList}\n                    width={1570}\n                    height={rowData.length * 40 >= 40*18+56 ? 40*19 : rowData.length * 40 + 56}\n                    resizable\n                />\n                <div style={{marginBottom:20}}>\n                    <PaginationComponent\n                        currentPage={pageInfo.page}\n                        totalPage={pageInfo.total}\n                        setPage={(page) => {\n                            // if(keyword){\n                                router.push(`/mes/stock?page=${page}&keyword=${keyword}&opt=${option}`)\n                            // }else{\n                            //     router.push(`/mes/stock?page=${page}`)\n                            // }\n                        }}\n                    />\n                </div>\n            </div>\n            <ExcelDownloadModal\n              isOpen={excelOpen}\n              column={column}\n              basicRow={rowData}\n              filename={`재고현황`}\n              sheetname={`재고현황`}\n              selectList={selectList}\n              tab={'ROLE_STK_01'}\n              setIsOpen={setExcelOpen}\n            />\n        </div>\n    );\n}\n\n\nexport const getServerSideProps = (ctx: NextPageContext) => {\n    return {\n        props: {\n            page: ctx.query.page ?? 1,\n            keyword: ctx.query.keyword ?? \"\",\n            option: ctx.query.opt ?? 0,\n        }\n    }\n}\n\n// Stock.getInitialProps = async ({ query }) => {\n//     let { page, keyword, opt } = query\n//     if (typeof page === 'string')\n//         page = parseInt(page);\n//     if (typeof opt === 'string')\n//         opt = parseInt(opt);\n//     return { page, keyword, option: opt };\n// }\n\nexport default Stock;\n"]},"metadata":{},"sourceType":"module"}