{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initalState = {\n  data: [],\n  index: 0\n};\nconst INSERT_SUMMARY_INFO = \"INSERT_SUMMARY_INFO\";\nexport const insert_summary_info = payload => {\n  return {\n    type: INSERT_SUMMARY_INFO,\n    payload: payload\n  };\n};\n\nconst infoModal = (state = initalState, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case INSERT_SUMMARY_INFO:\n      let tmp_state = _objectSpread({}, state);\n\n      tmp_state.data.splice(payload.index, 0, payload.data);\n      return _objectSpread({}, tmp_state);\n\n    default:\n      return state;\n  }\n};\n\nexport default infoModal;","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/shared/src/reducer/infoModal.ts"],"names":["initalState","data","index","INSERT_SUMMARY_INFO","insert_summary_info","payload","type","infoModal","state","tmp_state","splice"],"mappings":";;;;;;AAAA,OAAO,MAAMA,WAAe,GAAG;AAC7BC,EAAAA,IAAI,EAAE,EADuB;AAE7BC,EAAAA,KAAK,EAAE;AAFsB,CAAxB;AAKP,MAAMC,mBAAmB,GAAG,qBAA5B;AAEA,OAAO,MAAMC,mBAAmB,GAAIC,OAAD,IAAiB;AAClD,SAAO;AACLC,IAAAA,IAAI,EAACH,mBADA;AAELE,IAAAA,OAAO,EAACA;AAFH,GAAP;AAID,CALM;;AASP,MAAME,SAAS,GAAG,CAACC,KAAK,GAAGR,WAAT,EAAsB;AAACM,EAAAA,IAAD;AAAOD,EAAAA;AAAP,CAAtB,KAAwD;AACxE,UAAQC,IAAR;AACE,SAAKH,mBAAL;AACE,UAAIM,SAAS,qBAAOD,KAAP,CAAb;;AACAC,MAAAA,SAAS,CAACR,IAAV,CAAeS,MAAf,CAAsBL,OAAO,CAACH,KAA9B,EAAqC,CAArC,EAAwCG,OAAO,CAACJ,IAAhD;AACA,+BAAWQ,SAAX;;AAEF;AACE,aAAOD,KAAP;AAPJ;AASD,CAVD;;AAaA,eAAeD,SAAf","sourcesContent":["export const initalState:any = {\n  data: [],\n  index: 0\n}\n\nconst INSERT_SUMMARY_INFO = \"INSERT_SUMMARY_INFO\";\n\nexport const insert_summary_info = (payload:any) => {\n  return {\n    type:INSERT_SUMMARY_INFO,\n    payload:payload\n  }\n}\n\ntype DefaultAction = ReturnType<typeof insert_summary_info>;\n\nconst infoModal = (state = initalState, {type, payload}:DefaultAction) => {\n  switch (type){\n    case INSERT_SUMMARY_INFO :\n      let tmp_state = {...state}\n      tmp_state.data.splice(payload.index, 0, payload.data)\n      return {...tmp_state}\n\n    default :\n      return state\n  }\n}\n\n\nexport default infoModal;\n"]},"metadata":{},"sourceType":"module"}