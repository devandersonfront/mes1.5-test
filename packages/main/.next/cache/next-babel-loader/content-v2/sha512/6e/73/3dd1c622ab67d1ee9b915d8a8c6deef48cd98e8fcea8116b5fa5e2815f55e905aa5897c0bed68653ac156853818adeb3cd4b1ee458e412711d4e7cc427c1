{"ast":null,"code":"import _regeneratorRuntime from \"/Users/user/Desktop/sizl/mono_pop/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/user/Desktop/sizl/mono_pop/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/user/Desktop/sizl/mono_pop/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/user/Desktop/sizl/mono_pop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/stock/index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport MenuNavigation from \"../../../component/MenuNav/MenuNavigation\";\nimport ProfileHeader from \"../../../component/Profile/ProfileHeader\";\nimport PageHeader from \"../../../component/Header/Header\";\nimport ExcelTable from \"../../../component/Excel/ExcelTable\";\nimport { columnlist } from \"../../../common/columnInit\";\nimport { RequestMethod } from \"../../../common/RequestFunctions\";\n//@ts-ignore\nimport { SelectColumn } from \"react-data-grid\";\nimport { excelDownload } from \"../../../common/excelDownloadFunction\";\nimport PaginationComponent from \"../../../component/Pagination/PaginationComponent\";\nimport { useRouter } from \"next/router\"; //@ts-ignore\n\nimport Notiflix from \"notiflix\";\nimport ExcelDownloadModal from '../../../component/Modal/ExcelDownloadMoadal';\nimport TextEditor from \"../../../component/InputBox/ExcelBasicInputBox\";\nvar optList = [\"고객사명\", \"모델\", \"CODE\", \"품명\"];\n\nvar Stock = function Stock(_ref) {\n  _s();\n\n  var page = _ref.page,\n      keyword = _ref.keyword,\n      option = _ref.option;\n  var router = useRouter();\n\n  var _useState = useState(false),\n      excelOpen = _useState[0],\n      setExcelOpen = _useState[1];\n\n  var _useState2 = useState([]),\n      rowData = _useState2[0],\n      setRowData = _useState2[1];\n\n  var _useState3 = useState(columnlist.stock),\n      column = _useState3[0],\n      setColumn = _useState3[1];\n\n  var _useState4 = useState(new Set()),\n      selectList = _useState4[0],\n      setSelectList = _useState4[1];\n\n  var _useState5 = useState(optList),\n      optionList = _useState5[0],\n      setOptionList = _useState5[1];\n\n  var _useState6 = useState(0),\n      optionIndex = _useState6[0],\n      setOptionIndex = _useState6[1];\n\n  var _useState7 = useState({\n    page: 1,\n    total: 1\n  }),\n      pageInfo = _useState7[0],\n      setPageInfo = _useState7[1];\n\n  useEffect(function () {\n    setOptionIndex(option);\n\n    if (keyword) {\n      SearchList(keyword, option, page).then(function () {\n        Notiflix.Loading.remove();\n      });\n    } else {\n      LoadBasic(page).then(function () {\n        Notiflix.Loading.remove();\n      }).then(function () {\n        Notiflix.Loading.remove();\n      });\n    }\n  }, [page, keyword, option]);\n\n  var cleanUpData = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(res) {\n      var tmpColumn, tmpRow, additionalMenus, selectKey, pk, tmpBasicRow;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              tmpColumn = columnlist.stock;\n              tmpRow = [];\n              tmpColumn = tmpColumn.map(function (column) {\n                var menuData;\n                res.results.menus && res.results.menus.map(function (menu) {\n                  if (menu.colName === column.key) {\n                    menuData = {\n                      id: menu.id,\n                      name: menu.title,\n                      width: menu.width,\n                      tab: menu.tab,\n                      unit: menu.unit\n                    };\n                  } else if (menu.colName === 'id' && column.key === 'tmpId') {\n                    menuData = {\n                      id: menu.id,\n                      name: menu.title,\n                      width: menu.width,\n                      tab: menu.tab,\n                      unit: menu.unit\n                    };\n                  }\n                });\n\n                if (menuData) {\n                  return _objectSpread(_objectSpread({}, column), menuData);\n                }\n              }).filter(function (v) {\n                return v;\n              });\n              additionalMenus = res.results.menus ? res.results.menus.map(function (menu) {\n                if (menu.colName === null) {\n                  return {\n                    id: menu.id,\n                    name: menu.title,\n                    width: menu.width,\n                    key: menu.title,\n                    editor: TextEditor,\n                    type: 'additional',\n                    unit: menu.unit,\n                    tab: menu.tab\n                  };\n                }\n              }).filter(function (v) {\n                return v;\n              }) : [];\n              tmpRow = res.results.info_list;\n              selectKey = \"\"; // let additionalData: any[] = []\n\n              tmpColumn.map(function (v) {\n                if (v.selectList) {\n                  selectKey = v.key;\n                }\n              });\n              setColumn([].concat(_toConsumableArray(tmpColumn), _toConsumableArray(additionalMenus)));\n              pk = \"\";\n              Object.keys(tmpRow).map(function (v) {\n                if (v.indexOf('_id') !== -1) {\n                  pk = v;\n                }\n              });\n              tmpBasicRow = tmpRow.map(function (row, index) {\n                var random_id = Math.random() * 1000;\n                return _objectSpread(_objectSpread({}, row), {}, {\n                  customer_id: row.product.raw_material.model.customer.name,\n                  cm_id: row.product.raw_material.model.model,\n                  model: row.product.raw_material.model.model,\n                  code: row.product.raw_material.code,\n                  name: row.product.raw_material.name,\n                  unused: row.unused,\n                  wip: row.wip_stock,\n                  current_stock: row.current_stock,\n                  expectation: row.expectation,\n                  id: \"stock_\".concat(random_id)\n                });\n              });\n              setPageInfo({\n                total: res.results.totalPages,\n                page: res.results.page\n              });\n              setRowData(_toConsumableArray(tmpBasicRow));\n              Notiflix.Loading.remove(300);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function cleanUpData(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var LoadBasic = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(page) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              Notiflix.Loading.standard();\n              _context2.next = 3;\n              return RequestMethod('get', \"stockList\", {\n                path: {\n                  page: page !== null && page !== void 0 ? page : 1,\n                  renderItem: 17\n                }\n              });\n\n            case 3:\n              res = _context2.sent;\n\n              if (res && res.status === 200) {\n                if (res.results.totalPages !== 0 && res.results.totalPages < page) {\n                  LoadBasic(page - 1);\n                } else {\n                  setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n                    page: res.results.page,\n                    total: res.results.totalPages\n                  }));\n                  cleanUpData(res);\n                }\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function LoadBasic(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var SearchList = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(keyword, option, isPaging) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!isPaging) {\n                setOptionIndex(option);\n              }\n\n              _context3.next = 3;\n              return RequestMethod(\"get\", \"stockSearch\", {\n                path: {\n                  page: isPaging !== null && isPaging !== void 0 ? isPaging : 1,\n                  renderItem: 17\n                },\n                params: {\n                  keyword: keyword !== null && keyword !== void 0 ? keyword : '',\n                  opt: option !== null && option !== void 0 ? option : 0\n                }\n              });\n\n            case 3:\n              res = _context3.sent;\n\n              if (res && res.status === 200) {\n                setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n                  page: res.results.page,\n                  total: res.results.totalPages\n                }));\n                cleanUpData(res);\n              }\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function SearchList(_x3, _x4, _x5) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var downloadExcel = function downloadExcel() {\n    var tmpSelectList = [];\n    rowData.map(function (row) {\n      tmpSelectList.push(selectList.has(row.id));\n    });\n    excelDownload(column, rowData, \"stock\", \"stock\", tmpSelectList);\n  };\n\n  var buttonClickEvents = function buttonClickEvents(number) {\n    switch (number) {\n      case 0:\n        router.push(\"/mes/item/manage/stock\");\n        return;\n\n      case 1:\n        setExcelOpen(true);\n        return;\n\n      default:\n        return;\n    }\n  };\n\n  useEffect(function () {\n    Notiflix.Loading.standard();\n    setOptionIndex(option);\n\n    if (keyword) {\n      SearchList(keyword, option, page);\n    } else {\n      LoadBasic(page).then(function () {});\n    }\n  }, [page, keyword, option]);\n  return __jsx(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 9\n    }\n  }, __jsx(MenuNavigation, {\n    pageType: 'MES',\n    subType: 3,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    style: {},\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }\n  }, __jsx(ProfileHeader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 17\n    }\n  }), __jsx(PageHeader, {\n    title: \"재고 현황\",\n    buttons: [\"항목관리\", \"엑셀로 받기\"],\n    buttonsOnclick: buttonClickEvents,\n    isSearch: true,\n    searchKeyword: keyword,\n    onChangeSearchKeyword: function onChangeSearchKeyword(keyword) {\n      // if(keyword){\n      router.push(\"/mes/stock?page=1&keyword=\".concat(keyword, \"&opt=\").concat(optionIndex)); // }else{\n      //     router.push(`/mes/stock?page=1&keyword=${keyword}&opt=${optionIndex}`)\n      // }\n    },\n    searchOptionList: optionList,\n    onChangeSearchOption: function onChangeSearchOption(option) {\n      setOptionIndex(option);\n    },\n    optionIndex: optionIndex,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 21\n    }\n  }), __jsx(ExcelTable, {\n    editable: true,\n    headerList: [SelectColumn].concat(_toConsumableArray(column)),\n    row: rowData,\n    setRow: setRowData,\n    setSelectList: setSelectList,\n    selectList: selectList,\n    width: 1570,\n    height: rowData.length * 40 >= 40 * 18 + 56 ? 40 * 19 : rowData.length * 40 + 56,\n    resizable: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 17\n    }\n  }, __jsx(PaginationComponent, {\n    currentPage: pageInfo.page,\n    totalPage: pageInfo.total,\n    setPage: function setPage(page) {\n      // if(keyword){\n      router.push(\"/mes/stock?page=\".concat(page, \"&keyword=\").concat(keyword, \"&opt=\").concat(option)); // }else{\n      //     router.push(`/mes/stock?page=${page}`)\n      // }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 21\n    }\n  }))), __jsx(ExcelDownloadModal, {\n    isOpen: excelOpen,\n    column: column,\n    basicRow: rowData,\n    filename: \"\\uC7AC\\uACE0\\uD604\\uD669\",\n    sheetname: \"\\uC7AC\\uACE0\\uD604\\uD669\",\n    selectList: selectList,\n    tab: 'ROLE_STK_01',\n    setIsOpen: setExcelOpen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 13\n    }\n  }));\n};\n\n_s(Stock, \"qOhKcMjCQgbEECfFsygIEWisn6Y=\", false, function () {\n  return [useRouter];\n});\n\n_c = Stock;\n// Stock.getInitialProps = async ({ query }) => {\n//     let { page, keyword, opt } = query\n//     if (typeof page === 'string')\n//         page = parseInt(page);\n//     if (typeof opt === 'string')\n//         opt = parseInt(opt);\n//     return { page, keyword, option: opt };\n// }\nexport var __N_SSP = true;\nexport default Stock;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stock\");","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/stock/index.tsx"],"names":["React","useEffect","useState","MenuNavigation","ProfileHeader","PageHeader","ExcelTable","columnlist","RequestMethod","SelectColumn","excelDownload","PaginationComponent","useRouter","Notiflix","ExcelDownloadModal","TextEditor","optList","Stock","page","keyword","option","router","excelOpen","setExcelOpen","rowData","setRowData","stock","column","setColumn","Set","selectList","setSelectList","optionList","setOptionList","optionIndex","setOptionIndex","total","pageInfo","setPageInfo","SearchList","then","Loading","remove","LoadBasic","cleanUpData","res","tmpColumn","tmpRow","map","menuData","results","menus","menu","colName","key","id","name","title","width","tab","unit","filter","v","additionalMenus","editor","type","info_list","selectKey","pk","Object","keys","indexOf","tmpBasicRow","row","index","random_id","Math","random","customer_id","product","raw_material","model","customer","cm_id","code","unused","wip","wip_stock","current_stock","expectation","totalPages","standard","path","renderItem","status","isPaging","params","opt","downloadExcel","tmpSelectList","push","has","buttonClickEvents","number","display","length","marginBottom"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport MenuNavigation from \"../../../component/MenuNav/MenuNavigation\";\nimport ProfileHeader from \"../../../component/Profile/ProfileHeader\";\nimport PageHeader from \"../../../component/Header/Header\";\nimport ExcelTable from \"../../../component/Excel/ExcelTable\";\nimport {columnlist} from \"../../../common/columnInit\";\nimport {RequestMethod} from \"../../../common/RequestFunctions\";\nimport {IExcelHeaderType} from \"../../../common/@types/type\";\n//@ts-ignore\nimport {SelectColumn} from \"react-data-grid\";\nimport {excelDownload} from \"../../../common/excelDownloadFunction\";\nimport PaginationComponent from \"../../../component/Pagination/PaginationComponent\";\nimport {NextPageContext} from \"next\";\nimport {useRouter} from \"next/router\";\n//@ts-ignore\nimport Notiflix from \"notiflix\";\nimport ExcelDownloadModal from '../../../component/Modal/ExcelDownloadMoadal'\nimport BasicContainer from '../basic/customer'\nimport TextEditor from \"../../../component/InputBox/ExcelBasicInputBox\";\n\ninterface IProps {\n    children?: any\n    page?: number\n    keyword?: string\n    option?: number\n}\n\nconst optList = [\"고객사명\", \"모델\", \"CODE\", \"품명\"];\nconst Stock = ({page, keyword, option}: IProps) => {\n    const router = useRouter();\n\n    const [excelOpen, setExcelOpen] = useState<boolean>(false)\n\n    const [rowData, setRowData] = useState<any[]>([]);\n    const [column, setColumn] = useState<Array<IExcelHeaderType>>(columnlist.stock);\n    const [selectList, setSelectList] = useState<ReadonlySet<number>>(new Set());\n    const [optionList, setOptionList] = useState<string[]>(optList)\n    const [optionIndex, setOptionIndex] = useState<number>(0)\n\n    const [pageInfo, setPageInfo] = useState<{page:number, total:number}>({\n        page:1,\n        total:1\n    });\n\n    useEffect(() => {\n        setOptionIndex(option)\n        if(keyword){\n            SearchList(keyword, option, page).then(() => {\n                Notiflix.Loading.remove()\n            })\n        }else{\n            LoadBasic(page).then(() => {\n                Notiflix.Loading.remove()\n            }).then(() => {\n                Notiflix.Loading.remove()\n            })\n        }\n    }, [page, keyword, option])\n\n    const cleanUpData = async(res: any) => {\n        let tmpColumn = columnlist.stock;\n        let tmpRow = []\n        tmpColumn = tmpColumn.map((column: any) => {\n            let menuData: object | undefined;\n            res.results.menus && res.results.menus.map((menu: any) => {\n                if(menu.colName === column.key){\n                    menuData = {\n                        id: menu.id,\n                        name: menu.title,\n                        width: menu.width,\n                        tab:menu.tab,\n                        unit:menu.unit\n                    }\n                } else if(menu.colName === 'id' && column.key === 'tmpId'){\n                    menuData = {\n                        id: menu.id,\n                        name: menu.title,\n                        width: menu.width,\n                        tab:menu.tab,\n                        unit:menu.unit\n                    }\n                }\n            })\n\n            if(menuData){\n                return {\n                    ...column,\n                    ...menuData\n                }\n            }\n        }).filter((v:any) => v)\n\n        let additionalMenus = res.results.menus ? res.results.menus.map((menu:any) => {\n            if(menu.colName === null){\n                return {\n                    id: menu.id,\n                    name: menu.title,\n                    width: menu.width,\n                    key: menu.title,\n                    editor: TextEditor,\n                    type: 'additional',\n                    unit: menu.unit,\n                    tab: menu.tab\n                }\n            }\n        }).filter((v: any) => v) : []\n\n        tmpRow = res.results.info_list\n\n        let selectKey = \"\"\n        // let additionalData: any[] = []\n        tmpColumn.map((v: any) => {\n            if(v.selectList){\n                selectKey = v.key\n            }\n        })\n\n        setColumn([...tmpColumn, ...additionalMenus])\n\n        let pk = \"\";\n        Object.keys(tmpRow).map((v) => {\n            if(v.indexOf('_id') !== -1){\n                pk = v\n            }\n        })\n\n\n        let tmpBasicRow = tmpRow.map((row: any, index: number) => {\n            let random_id = Math.random()*1000;\n\n            return {\n                ...row,\n                customer_id: row.product.raw_material.model.customer.name,\n                cm_id:row.product.raw_material.model.model,\n                model:row.product.raw_material.model.model,\n                code:row.product.raw_material.code,\n                name: row.product.raw_material.name,\n                unused: row.unused,\n                wip: row.wip_stock,\n                current_stock: row.current_stock,\n                expectation: row.expectation,\n                id: `stock_${random_id}`,\n            }\n        })\n\n        setPageInfo({total:res.results.totalPages ,page:res.results.page})\n        setRowData([...tmpBasicRow])\n        Notiflix.Loading.remove(300);\n    }\n\n\n\n    const LoadBasic = async(page?:number) => {\n        Notiflix.Loading.standard();\n        const res = await RequestMethod('get', \"stockList\",\n            {\n                path:\n                    {\n                        page:page ?? 1,\n                        renderItem:17,\n                    }\n            } )\n        if(res && res.status === 200){\n            if(res.results.totalPages !== 0 && res.results.totalPages < page){\n                LoadBasic(page - 1)\n            }else{\n                setPageInfo({\n                    ...pageInfo,\n                    page: res.results.page,\n                    total: res.results.totalPages\n                })\n                cleanUpData(res)\n            }\n        }\n    }\n\n    const SearchList = async(keyword:string, option: number, isPaging?: number) => {\n        if(!isPaging){\n            setOptionIndex(option)\n        }\n\n        const res = await RequestMethod(\"get\", \"stockSearch\", {\n            path:{\n                page:isPaging ?? 1,\n                renderItem:17,\n\n            },\n            params:{\n                keyword:keyword ?? '',\n                opt:option ?? 0,\n            }\n        })\n\n        if(res && res.status === 200){\n            setPageInfo({\n                ...pageInfo,\n                page: res.results.page,\n                total: res.results.totalPages\n            })\n            cleanUpData(res)\n        }\n    }\n\n\n    const downloadExcel = () => {\n        let tmpSelectList: boolean[] = []\n        rowData.map(row => {\n            tmpSelectList.push(selectList.has(row.id))\n        })\n        excelDownload(column, rowData, \"stock\", \"stock\", tmpSelectList)\n    }\n\n    const buttonClickEvents = (number:number) => {\n        switch(number) {\n            case 0 :\n                router.push(`/mes/item/manage/stock`)\n                return\n\n            case 1:\n                setExcelOpen(true)\n                return\n            default :\n                return\n\n        }\n    }\n\n\n    useEffect(() => {\n        Notiflix.Loading.standard();\n        setOptionIndex(option)\n        if(keyword){\n            SearchList(keyword, option, page)\n        }else{\n            LoadBasic(page).then(() => {})\n        }\n    }, [page, keyword, option])\n\n\n    return (\n        <div style={{display:\"flex\"}}>\n            <MenuNavigation pageType={'MES'} subType={3}/>\n            <div style={{}}>\n                <ProfileHeader/>\n                    <PageHeader\n                        title={\"재고 현황\"}\n                        buttons={[\"항목관리\",\"엑셀로 받기\"]}\n                        buttonsOnclick={buttonClickEvents}\n                        isSearch={true}\n                        searchKeyword={keyword}\n                        onChangeSearchKeyword={(keyword) => {\n                            // if(keyword){\n                                router.push(`/mes/stock?page=1&keyword=${keyword}&opt=${optionIndex}`)\n                            // }else{\n                            //     router.push(`/mes/stock?page=1&keyword=${keyword}&opt=${optionIndex}`)\n                            // }\n                        }}\n\n                        searchOptionList={optionList}\n\n                        onChangeSearchOption={(option) => {\n                            setOptionIndex(option)\n                        }}\n                        optionIndex={optionIndex}\n                    />\n                <ExcelTable\n                    editable\n                    headerList={[\n                        SelectColumn,\n                        ...column\n                    ]}\n                    row={rowData}\n                    setRow={setRowData}\n                    setSelectList={setSelectList}\n                    selectList={selectList}\n                    width={1570}\n                    height={rowData.length * 40 >= 40*18+56 ? 40*19 : rowData.length * 40 + 56}\n                    resizable\n                />\n                <div style={{marginBottom:20}}>\n                    <PaginationComponent\n                        currentPage={pageInfo.page}\n                        totalPage={pageInfo.total}\n                        setPage={(page) => {\n                            // if(keyword){\n                                router.push(`/mes/stock?page=${page}&keyword=${keyword}&opt=${option}`)\n                            // }else{\n                            //     router.push(`/mes/stock?page=${page}`)\n                            // }\n                        }}\n                    />\n                </div>\n            </div>\n            <ExcelDownloadModal\n              isOpen={excelOpen}\n              column={column}\n              basicRow={rowData}\n              filename={`재고현황`}\n              sheetname={`재고현황`}\n              selectList={selectList}\n              tab={'ROLE_STK_01'}\n              setIsOpen={setExcelOpen}\n            />\n        </div>\n    );\n}\n\n\nexport const getServerSideProps = (ctx: NextPageContext) => {\n    return {\n        props: {\n            page: ctx.query.page ?? 1,\n            keyword: ctx.query.keyword ?? \"\",\n            option: ctx.query.opt ?? 0,\n        }\n    }\n}\n\n// Stock.getInitialProps = async ({ query }) => {\n//     let { page, keyword, opt } = query\n//     if (typeof page === 'string')\n//         page = parseInt(page);\n//     if (typeof opt === 'string')\n//         opt = parseInt(opt);\n//     return { page, keyword, option: opt };\n// }\n\nexport default Stock;\n"]},"metadata":{},"sourceType":"module"}