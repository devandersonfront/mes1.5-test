{"ast":null,"code":"import _defineProperty from \"/Users/user/Desktop/sizl/mono_pop/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/shared/src/components/InputBox/ExcelBasicInputBox.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Notiflix from 'notiflix';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { insert_machine_list } from \"../../reducer/machineSelect\";\n\nvar autoFocusAndSelect = function autoFocusAndSelect(input) {\n  input === null || input === void 0 ? void 0 : input.focus();\n  input === null || input === void 0 ? void 0 : input.select();\n};\n\nvar TextEditor = function TextEditor(_ref) {\n  _s();\n\n  var row = _ref.row,\n      column = _ref.column,\n      onRowChange = _ref.onRowChange,\n      onClose = _ref.onClose;\n  var dispatch = useDispatch();\n  var selector = useSelector(function (state) {\n    return state.MachineSelectReducer;\n  });\n  return __jsx(\"input\", {\n    style: {\n      textAlign: 'center',\n      color: column.textType ? 'black' : 'white'\n    },\n    className: 'editCell',\n    ref: autoFocusAndSelect,\n    value: row[column.key],\n    onFocus: function onFocus() {\n      if (column.searchType === 'record' && row.osd_id) {\n        onClose(true);\n        Notiflix.Report.warning('수정할 수 없습니다.', '작업지시 고유 번호가 있으면 수정할 수 없습니다.', '확인');\n      }\n    },\n    onChange: function onChange(event) {\n      if (column.key === 'mold_name') {\n        var _objectSpread2;\n\n        onRowChange(_objectSpread(_objectSpread({}, row), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, column.key, event.target.value), _defineProperty(_objectSpread2, \"wip_name\", event.target.value ? event.target.value + '-1' : undefined), _defineProperty(_objectSpread2, \"isChange\", true), _objectSpread2)));\n      } else if (column.key === \"goal\") {\n        var _objectSpread3;\n\n        onRowChange(_objectSpread(_objectSpread({}, row), {}, (_objectSpread3 = {}, _defineProperty(_objectSpread3, column.key, event.target.value), _defineProperty(_objectSpread3, \"isChange\", true), _objectSpread3)));\n\n        if (selector.selectRow === 1) {\n          selector.machineList.map(function (v, i) {\n            if (i !== 0) {\n              v.goal = Number(event.target.value);\n            }\n          });\n        } else {\n          selector.machineList[selector.selectRow].goal = Number(event.target.value);\n        }\n\n        dispatch(insert_machine_list(_objectSpread({}, selector)));\n      } else {\n        var _objectSpread4;\n\n        onRowChange(_objectSpread(_objectSpread({}, row), {}, (_objectSpread4 = {}, _defineProperty(_objectSpread4, column.key, event.target.value), _defineProperty(_objectSpread4, \"isChange\", true), _objectSpread4)));\n      }\n    },\n    onBlur: function onBlur() {\n      return onClose(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  });\n};\n\n_s(TextEditor, \"89b4AEtOcg6oItZHFCuzuUkVRcY=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = TextEditor;\nexport { TextEditor };\n\nvar _c;\n\n$RefreshReg$(_c, \"TextEditor\");","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/shared/src/components/InputBox/ExcelBasicInputBox.tsx"],"names":["React","Notiflix","useDispatch","useSelector","insert_machine_list","autoFocusAndSelect","input","focus","select","TextEditor","row","column","onRowChange","onClose","dispatch","selector","state","MachineSelectReducer","textAlign","color","textType","key","searchType","osd_id","Report","warning","event","target","value","undefined","selectRow","machineList","map","v","i","goal","Number"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react'\nimport {IExcelHeaderType} from '../../common/@types/type'\nimport Notiflix from 'notiflix'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootState} from \"../../reducer\";\nimport {insert_machine_list} from \"../../reducer/machineSelect\";\n\ninterface IProps {\n  row: any\n  column: IExcelHeaderType\n  onRowChange: (e: any) => void\n  onClose: (state: boolean) => void\n}\n\nconst autoFocusAndSelect = (input: HTMLInputElement | null) => {\n  input?.focus()\n  input?.select()\n}\n\nconst TextEditor = ({ row, column, onRowChange, onClose }: IProps) => {\n  const dispatch = useDispatch();\n  const selector = useSelector((state:RootState) => state.MachineSelectReducer);\n\n  return (\n    <input\n      style={{textAlign: 'center', color: column.textType ? 'black' : 'white' }}\n      className={'editCell'}\n      ref={autoFocusAndSelect}\n      value={row[column.key]}\n      onFocus={() => {\n        if(column.searchType === 'record' && row.osd_id){\n          onClose(true)\n          Notiflix.Report.warning('수정할 수 없습니다.', '작업지시 고유 번호가 있으면 수정할 수 없습니다.', '확인', )\n        }\n      }}\n      onChange={(event) => {\n        if(column.key === 'mold_name') {\n          onRowChange({\n            ...row,\n            [column.key]: event.target.value,\n            wip_name: event.target.value ? event.target.value+'-1' : undefined,\n            isChange: true\n          })\n        }else if(column.key === \"goal\"){\n          onRowChange({ ...row, [column.key]: event.target.value, isChange: true })\n          if(selector.selectRow === 1){\n            selector.machineList.map((v,i)=>{\n              if(i !== 0){\n                v.goal = Number(event.target.value)\n              }\n            })\n          }else{\n            selector.machineList[selector.selectRow].goal = Number(event.target.value);\n          }\n          dispatch(insert_machine_list({...selector}))\n        }else{\n          onRowChange({ ...row, [column.key]: event.target.value, isChange: true })\n        }\n      }}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n\nexport {TextEditor};\n"]},"metadata":{},"sourceType":"module"}