{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/submaterialV1u/input.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport MenuNavigation from '../../../component/MenuNav/MenuNavigation';\nimport ProfileHeader from '../../../component/Profile/ProfileHeader';\nimport { RequestMethod } from '../../../common/RequestFunctions';\nimport { columnlist } from \"../../../common/columnInit\";\nimport Notiflix from \"notiflix\";\nimport { useRouter } from 'next/router';\nimport { MAX_VALUE } from '../../../common/configset';\nimport TextEditor from '../../../component/InputBox/ExcelBasicInputBox';\nimport { excelDownload } from '../../../common/excelDownloadFunction';\nimport { MesRawMaterialInput } from '../../../../mes';\nimport moment from 'moment';\n\nconst BasicContainer = ({\n  page,\n  keyword,\n  option\n}) => {\n  const router = useRouter();\n  const {\n    0: excelOpen,\n    1: setExcelOpen\n  } = useState(false);\n  const {\n    0: basicRow,\n    1: setBasicRow\n  } = useState([{\n    name: \"\",\n    id: \"\",\n    date: moment().format('YYYY-MM-DD')\n  }]);\n  const {\n    0: column,\n    1: setColumn\n  } = useState(columnlist[\"mold\"]);\n  const {\n    0: selectList,\n    1: setSelectList\n  } = useState(new Set());\n  const {\n    0: optionList,\n    1: setOptionList\n  } = useState(['고객사명', '모델명', 'CODE', '품명', '금형명']);\n  const {\n    0: optionIndex,\n    1: setOptionIndex\n  } = useState(0);\n  const {\n    0: pageInfo,\n    1: setPageInfo\n  } = useState({\n    page: 1,\n    total: 1\n  });\n  useEffect(() => {\n    setOptionIndex(option);\n\n    if (keyword) {\n      SearchBasic(keyword, option, page).then(() => {\n        Notiflix.Loading.remove();\n      });\n    } else {\n      LoadBasic(page).then(() => {\n        Notiflix.Loading.remove();\n      });\n    }\n  }, [page, keyword, option]);\n\n  const loadAllSelectItems = async column => {\n    let tmpColumn = column.map(async v => {\n      if (v.selectList && v.selectList.length === 0) {\n        let tmpKey = v.key;\n        let res;\n        res = await RequestMethod('get', `${tmpKey}List`, {\n          path: {\n            page: 1,\n            renderItem: MAX_VALUE\n          }\n        });\n        let pk = \"\";\n        res.results.info_list && res.results.info_list.length && Object.keys(res.results.info_list[0]).map(v => {\n          if (v.indexOf('_id') !== -1) {\n            pk = v;\n          }\n        });\n        return _objectSpread(_objectSpread({}, v), {}, {\n          selectList: [...res.results.info_list.map(value => {\n            return _objectSpread(_objectSpread({}, value), {}, {\n              name: tmpKey === 'model' ? value.model : value.name,\n              pk: value[pk]\n            });\n          })]\n        });\n      } else {\n        if (v.selectList) {\n          return _objectSpread(_objectSpread({}, v), {}, {\n            pk: v.unit_id\n          });\n        } else {\n          return v;\n        }\n      }\n    }); // if(type !== 'productprocess'){\n\n    Promise.all(tmpColumn).then(res => {\n      setColumn([...res]);\n    }); // }\n  };\n\n  const SaveBasic = async () => {\n    let res;\n    res = await RequestMethod('post', `moldSave`, {\n      ['molds']: basicRow.map((row, i) => {\n        if (selectList.has(row.id)) {\n          let selectKey = [];\n          let additional = [];\n          column.map(v => {\n            if (v.selectList) {\n              selectKey.push(v.key);\n            }\n\n            if (v.type === 'additional') {\n              additional.push(v);\n            }\n          });\n          let selectData = {};\n          Object.keys(row).map(v => {\n            if (v.indexOf('PK') !== -1) {\n              selectData = _objectSpread(_objectSpread({}, selectData), {}, {\n                [v.split('PK')[0]]: row[v]\n              });\n            }\n\n            if (v === 'unitWeight') {\n              selectData = _objectSpread(_objectSpread({}, selectData), {}, {\n                unitWeight: Number(row['unitWeight'])\n              });\n            }\n\n            if (v === 'tmpId') {\n              selectData = _objectSpread(_objectSpread({}, selectData), {}, {\n                id: row['tmpId']\n              });\n            }\n          });\n          return _objectSpread(_objectSpread(_objectSpread({}, row), selectData), {}, {\n            additional: [...additional.map(v => {\n              if (row[v.name]) {\n                return {\n                  id: v.id,\n                  title: v.name,\n                  value: row[v.name],\n                  unit: v.unit\n                };\n              }\n            }).filter(v => v)]\n          });\n        }\n      }).filter(v => v)\n    });\n\n    if (res) {\n      if (res.status === 200) {\n        Notiflix.Report.success('저장되었습니다.', '', '확인');\n\n        if (keyword) {\n          SearchBasic(keyword, option, page).then(() => {\n            Notiflix.Loading.remove();\n          });\n        } else {\n          LoadBasic(page).then(() => {\n            Notiflix.Loading.remove();\n          });\n        }\n      }\n    }\n  };\n\n  const LoadBasic = async page => {\n    Notiflix.Loading.circle();\n    const res = await RequestMethod('get', `moldList`, {\n      path: {\n        page: page || page !== 0 ? page : 1,\n        renderItem: 18\n      }\n    });\n\n    if (res && res.status === 200) {\n      setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n        page: res.results.page,\n        total: res.results.totalPages\n      }));\n      cleanUpData(res);\n    } else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back();\n      });\n    }\n  };\n\n  const SearchBasic = async (keyword, option, isPaging) => {\n    Notiflix.Loading.circle();\n\n    if (!isPaging) {\n      setOptionIndex(option);\n    }\n\n    const res = await RequestMethod('get', `moldSearch`, {\n      path: {\n        page: isPaging !== null && isPaging !== void 0 ? isPaging : 1,\n        renderItem: 18\n      },\n      params: {\n        keyword: keyword !== null && keyword !== void 0 ? keyword : '',\n        opt: option !== null && option !== void 0 ? option : 0\n      }\n    });\n\n    if (res && res.status === 200) {\n      setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n        page: res.results.page,\n        total: res.results.totalPages\n      }));\n      cleanUpData(res);\n    }\n  };\n\n  const cleanUpData = res => {\n    let tmpColumn = columnlist[\"mold\"];\n    let tmpRow = [];\n    tmpColumn = tmpColumn.map(column => {\n      let menuData;\n      res.results.menus && res.results.menus.map(menu => {\n        if (menu.colName === column.key) {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit\n          };\n        } else if (menu.colName === 'id' && column.key === 'tmpId') {\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab: menu.tab,\n            unit: menu.unit\n          };\n        }\n      });\n\n      if (menuData) {\n        return _objectSpread(_objectSpread({}, column), menuData);\n      }\n    }).filter(v => v);\n    let additionalMenus = res.results.menus ? res.results.menus.map(menu => {\n      if (menu.colName === null) {\n        return {\n          id: menu.id,\n          name: menu.title,\n          width: menu.width,\n          key: menu.title,\n          editor: TextEditor,\n          type: 'additional',\n          unit: menu.unit\n        };\n      }\n    }).filter(v => v) : [];\n    tmpRow = res.results.info_list;\n    loadAllSelectItems([...tmpColumn, ...additionalMenus]);\n    let selectKey = \"\";\n    let additionalData = [];\n    tmpColumn.map(v => {\n      if (v.selectList) {\n        selectKey = v.key;\n      }\n    });\n    additionalMenus.map(v => {\n      if (v.type === 'additional') {\n        additionalData.push(v.key);\n      }\n    });\n    let pk = \"\";\n    Object.keys(tmpRow).map(v => {\n      if (v.indexOf('_id') !== -1) {\n        pk = v;\n      }\n    });\n    let tmpBasicRow = tmpRow.map((row, index) => {\n      let appendAdditional = {};\n      row.additional && row.additional.map(v => {\n        appendAdditional = _objectSpread(_objectSpread({}, appendAdditional), {}, {\n          [v.title]: v.value\n        });\n      });\n      let random_id = Math.random() * 1000;\n      return _objectSpread(_objectSpread({\n        cm_id: index === 0 || row.ppd.seq === 1 ? row.product.raw_material.model.model : undefined,\n        cm_idPK: row.product.raw_material.model.cm_id,\n        mold_id: row.mold_id,\n        mold_name: row.ppd.mold_name,\n        limit: row.limit,\n        inspect: row.inspect,\n        current: row.current,\n        customer_id: index === 0 || row.ppd.seq === 1 ? row.product.raw_material.model.customer.name : undefined,\n        customer_idPK: row.product.raw_material.model.customer.customer_id,\n        code: index === 0 || row.ppd.seq === 1 ? row.product.raw_material.code : undefined,\n        name: index === 0 || row.ppd.seq === 1 ? row.product.raw_material.name : undefined,\n        seq: row.ppd.seq,\n        cavity: row.ppd.cavity,\n        spm: row.spm,\n        slideHeight: row.slideHeight,\n        process_id: row.ppd.process.name\n      }, appendAdditional), {}, {\n        id: `mold_${random_id}`\n      });\n    });\n    setBasicRow([...tmpBasicRow]);\n  };\n\n  const downloadExcel = () => {\n    let tmpSelectList = [];\n    basicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id));\n    });\n    excelDownload(column, basicRow, `mold`, \"mold\", tmpSelectList);\n  };\n\n  const onClickHeaderButton = index => {\n    switch (index) {\n      case 0:\n        setExcelOpen(true);\n        break;\n\n      case 1:\n        router.push(`/mes/item/manage/mold`);\n        break;\n\n      case 2:\n        SaveBasic();\n        break;\n    }\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 5\n    }\n  }, __jsx(MenuNavigation, {\n    pageType: 'MES',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    style: {\n      paddingBottom: 40\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }\n  }, __jsx(ProfileHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 9\n    }\n  }), __jsx(MesRawMaterialInput, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport const getServerSideProps = ctx => {\n  var _ctx$query$page, _ctx$query$keyword, _ctx$query$opt;\n\n  return {\n    props: {\n      page: (_ctx$query$page = ctx.query.page) !== null && _ctx$query$page !== void 0 ? _ctx$query$page : 1,\n      keyword: (_ctx$query$keyword = ctx.query.keyword) !== null && _ctx$query$keyword !== void 0 ? _ctx$query$keyword : \"\",\n      option: (_ctx$query$opt = ctx.query.opt) !== null && _ctx$query$opt !== void 0 ? _ctx$query$opt : 0\n    }\n  };\n};\nexport default BasicContainer;","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/submaterialV1u/input.tsx"],"names":["React","useEffect","useState","MenuNavigation","ProfileHeader","RequestMethod","columnlist","Notiflix","useRouter","MAX_VALUE","TextEditor","excelDownload","MesRawMaterialInput","moment","BasicContainer","page","keyword","option","router","excelOpen","setExcelOpen","basicRow","setBasicRow","name","id","date","format","column","setColumn","selectList","setSelectList","Set","optionList","setOptionList","optionIndex","setOptionIndex","pageInfo","setPageInfo","total","SearchBasic","then","Loading","remove","LoadBasic","loadAllSelectItems","tmpColumn","map","v","length","tmpKey","key","res","path","renderItem","pk","results","info_list","Object","keys","indexOf","value","model","unit_id","Promise","all","SaveBasic","row","i","has","selectKey","additional","push","type","selectData","split","unitWeight","Number","title","unit","filter","status","Report","success","circle","totalPages","cleanUpData","state","failure","back","isPaging","params","opt","tmpRow","menuData","menus","menu","colName","width","tab","additionalMenus","editor","additionalData","tmpBasicRow","index","appendAdditional","random_id","Math","random","cm_id","ppd","seq","product","raw_material","undefined","cm_idPK","mold_id","mold_name","limit","inspect","current","customer_id","customer","customer_idPK","code","cavity","spm","slideHeight","process_id","process","downloadExcel","tmpSelectList","onClickHeaderButton","display","paddingBottom","getServerSideProps","ctx","props","query"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport ExcelTable from '../../../component/Excel/ExcelTable'\nimport MenuNavigation from '../../../component/MenuNav/MenuNavigation'\nimport ProfileHeader from '../../../component/Profile/ProfileHeader'\nimport PageHeader from '../../../component/Header/Header'\nimport {BasicMold} from 'basic'\n// @ts-ignore\nimport {SelectColumn} from 'react-data-grid'\nimport {IExcelHeaderType, IItemMenuType} from '../../../common/@types/type'\nimport {RequestMethod} from '../../../common/RequestFunctions'\nimport {columnlist} from \"../../../common/columnInit\";\nimport Notiflix from \"notiflix\";\nimport {useRouter} from 'next/router'\nimport {MAX_VALUE} from '../../../common/configset'\nimport DropDownEditor from '../../../component/Dropdown/ExcelBasicDropdown'\nimport TextEditor from '../../../component/InputBox/ExcelBasicInputBox'\nimport {excelDownload} from '../../../common/excelDownloadFunction'\nimport {loadAll} from 'react-cookies'\nimport PaginationComponent from '../../../component/Pagination/PaginationComponent'\nimport {NextPageContext} from 'next'\nimport ExcelDownloadModal from '../../../component/Modal/ExcelDownloadMoadal'\nimport {MesRawMaterialInput} from '../../../../mes'\nimport moment from 'moment'\n\ninterface IProps {\n  children?: any\n  page?: number\n  keyword?: string\n  option?: number\n}\n\nconst BasicContainer = ({page, keyword, option}: IProps) => {\n  const router = useRouter()\n\n  const [excelOpen, setExcelOpen] = useState<boolean>(false)\n\n  const [basicRow, setBasicRow] = useState<Array<any>>([{\n    name: \"\", id: \"\", date: moment().format('YYYY-MM-DD')\n  }])\n  const [column, setColumn] = useState<Array<IExcelHeaderType>>( columnlist[\"mold\"])\n  const [selectList, setSelectList] = useState<Set<number>>(new Set())\n  const [optionList, setOptionList] = useState<string[]>(['고객사명','모델명', 'CODE', '품명', '금형명'])\n  const [optionIndex, setOptionIndex] = useState<number>(0)\n\n  const [pageInfo, setPageInfo] = useState<{page: number, total: number}>({\n    page: 1,\n    total: 1\n  })\n\n  useEffect(() => {\n    setOptionIndex(option)\n    if(keyword){\n      SearchBasic(keyword, option, page).then(() => {\n        Notiflix.Loading.remove()\n      })\n    }else{\n      LoadBasic(page).then(() => {\n        Notiflix.Loading.remove()\n      })\n    }\n  }, [page, keyword, option])\n\n\n  const loadAllSelectItems = async (column: IExcelHeaderType[]) => {\n    let tmpColumn = column.map(async (v: any) => {\n      if(v.selectList && v.selectList.length === 0){\n        let tmpKey = v.key\n\n\n        let res: any\n        res = await RequestMethod('get', `${tmpKey}List`,{\n          path: {\n            page: 1,\n            renderItem: MAX_VALUE,\n          }\n        })\n\n\n        let pk = \"\";\n\n        res.results.info_list && res.results.info_list.length && Object.keys(res.results.info_list[0]).map((v) => {\n          if(v.indexOf('_id') !== -1){\n            pk = v\n          }\n        })\n        return {\n          ...v,\n          selectList: [...res.results.info_list.map((value: any) => {\n            return {\n              ...value,\n              name: tmpKey === 'model' ? value.model : value.name,\n              pk: value[pk]\n            }\n          })]\n        }\n\n      }else{\n        if(v.selectList){\n          return {\n            ...v,\n            pk: v.unit_id\n          }\n        }else{\n          return v\n        }\n      }\n    })\n\n    // if(type !== 'productprocess'){\n    Promise.all(tmpColumn).then(res => {\n      setColumn([...res])\n    })\n    // }\n  }\n\n  const SaveBasic = async () => {\n    let res: any\n    res = await RequestMethod('post', `moldSave`,\n      {\n        ['molds']: basicRow.map((row, i) => {\n          if(selectList.has(row.id)){\n            let selectKey: string[] = []\n            let additional:any[] = []\n            column.map((v) => {\n              if(v.selectList){\n                selectKey.push(v.key)\n              }\n\n              if(v.type === 'additional'){\n                additional.push(v)\n              }\n            })\n\n            let selectData: any = {}\n\n            Object.keys(row).map(v => {\n              if(v.indexOf('PK') !== -1) {\n                selectData = {\n                  ...selectData,\n                  [v.split('PK')[0]]: row[v]\n                }\n              }\n\n              if(v === 'unitWeight') {\n                selectData = {\n                  ...selectData,\n                  unitWeight: Number(row['unitWeight'])\n                }\n              }\n\n              if(v === 'tmpId') {\n                selectData = {\n                  ...selectData,\n                  id: row['tmpId']\n                }\n              }\n            })\n\n            return {\n              ...row,\n              ...selectData,\n              additional: [\n                ...additional.map(v => {\n                  if(row[v.name]) {\n                    return {\n                      id: v.id,\n                      title: v.name,\n                      value: row[v.name],\n                      unit: v.unit\n                    }\n                  }\n                }).filter((v) => v)\n              ]\n            }\n\n          }\n        }).filter((v) => v)\n      })\n\n\n    if(res){\n      if(res.status === 200){\n        Notiflix.Report.success('저장되었습니다.','','확인');\n        if(keyword){\n          SearchBasic(keyword, option, page).then(() => {\n            Notiflix.Loading.remove()\n          })\n        }else{\n          LoadBasic(page).then(() => {\n            Notiflix.Loading.remove()\n          })\n        }\n      }\n    }\n  }\n\n\n  const LoadBasic = async (page?: number) => {\n    Notiflix.Loading.circle()\n    const res = await RequestMethod('get', `moldList`,{\n      path: {\n        page: (page || page !== 0) ? page : 1,\n        renderItem: 18,\n      }\n    })\n\n    if(res && res.status === 200){\n      setPageInfo({\n        ...pageInfo,\n        page: res.results.page,\n        total: res.results.totalPages\n      })\n      cleanUpData(res)\n    }else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back()\n      })\n    }\n\n  }\n\n  const SearchBasic = async (keyword: any, option: number, isPaging?: number) => {\n    Notiflix.Loading.circle()\n    if(!isPaging){\n      setOptionIndex(option)\n    }\n    const res = await RequestMethod('get', `moldSearch`,{\n      path: {\n        page: isPaging ?? 1,\n        renderItem: 18,\n      },\n      params: {\n        keyword: keyword ?? '',\n        opt: option ?? 0\n      }\n    })\n\n    if(res && res.status === 200){\n      setPageInfo({\n        ...pageInfo,\n        page: res.results.page,\n        total: res.results.totalPages\n      })\n      cleanUpData(res)\n    }\n  }\n\n  const cleanUpData = (res: any) => {\n    let tmpColumn = columnlist[\"mold\"];\n    let tmpRow = []\n    tmpColumn = tmpColumn.map((column: any) => {\n      let menuData: object | undefined;\n      res.results.menus && res.results.menus.map((menu: any) => {\n        if(menu.colName === column.key){\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab:menu.tab,\n            unit:menu.unit\n          }\n        } else if(menu.colName === 'id' && column.key === 'tmpId'){\n          menuData = {\n            id: menu.id,\n            name: menu.title,\n            width: menu.width,\n            tab:menu.tab,\n            unit:menu.unit\n          }\n        }\n      })\n\n      if(menuData){\n        return {\n          ...column,\n          ...menuData\n        }\n      }\n    }).filter((v:any) => v)\n\n    let additionalMenus = res.results.menus ? res.results.menus.map((menu:any) => {\n      if(menu.colName === null){\n        return {\n          id: menu.id,\n          name: menu.title,\n          width: menu.width,\n          key: menu.title,\n          editor: TextEditor,\n          type: 'additional',\n          unit: menu.unit\n        }\n      }\n    }).filter((v: any) => v) : []\n\n\n    tmpRow = res.results.info_list\n\n\n    loadAllSelectItems( [\n      ...tmpColumn,\n      ...additionalMenus\n    ] )\n\n\n    let selectKey = \"\"\n    let additionalData: any[] = []\n    tmpColumn.map((v: any) => {\n      if(v.selectList){\n        selectKey = v.key\n      }\n    })\n\n    additionalMenus.map((v: any) => {\n      if(v.type === 'additional'){\n        additionalData.push(v.key)\n      }\n    })\n\n    let pk = \"\";\n    Object.keys(tmpRow).map((v) => {\n      if(v.indexOf('_id') !== -1){\n        pk = v\n      }\n    })\n\n    let tmpBasicRow = tmpRow.map((row: any, index: number) => {\n\n      let appendAdditional: any = {}\n\n      row.additional && row.additional.map((v: any) => {\n        appendAdditional = {\n          ...appendAdditional,\n          [v.title]: v.value\n        }\n      })\n\n      let random_id = Math.random()*1000;\n      return {\n        cm_id:(index === 0 || row.ppd.seq === 1) ? row.product.raw_material.model.model : undefined,\n        cm_idPK:row.product.raw_material.model.cm_id,\n        mold_id:row.mold_id,\n        mold_name:row.ppd.mold_name,\n        limit:row.limit,\n        inspect:row.inspect,\n        current:row.current,\n        customer_id: (index === 0 || row.ppd.seq === 1) ? row.product.raw_material.model.customer.name : undefined,\n        customer_idPK: row.product.raw_material.model.customer.customer_id,\n        code: (index === 0 || row.ppd.seq === 1) ? row.product.raw_material.code : undefined,\n        name: (index === 0 || row.ppd.seq === 1) ? row.product.raw_material.name : undefined,\n        seq: row.ppd.seq,\n        cavity: row.ppd.cavity,\n        spm: row.spm,\n        slideHeight: row.slideHeight,\n        process_id: row.ppd.process.name,\n        ...appendAdditional,\n        id: `mold_${random_id}`,\n      }\n    })\n\n    setBasicRow([...tmpBasicRow])\n  }\n\n  const downloadExcel = () => {\n    let tmpSelectList: boolean[] = []\n    basicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id))\n    })\n    excelDownload(column, basicRow, `mold`, \"mold\", tmpSelectList)\n  }\n\n  const onClickHeaderButton = (index: number) => {\n    switch(index){\n      case 0:\n        setExcelOpen(true)\n        break;\n      case 1:\n\n        router.push(`/mes/item/manage/mold`)\n\n        break;\n      case 2:\n        SaveBasic()\n        break;\n    }\n  }\n\n  return (\n    <div style={{display: 'flex', }}>\n      <MenuNavigation pageType={'MES'}/>\n      <div style={{paddingBottom: 40}}>\n        <ProfileHeader/>\n        <MesRawMaterialInput/>\n      </div>\n    </div>\n  );\n}\n\nexport const getServerSideProps = (ctx: NextPageContext) => {\n  return {\n    props: {\n      page: ctx.query.page ?? 1,\n      keyword: ctx.query.keyword ?? \"\",\n      option: ctx.query.opt ?? 0,\n    }\n  }\n}\n\nexport default BasicContainer;\n"]},"metadata":{},"sourceType":"module"}