{"ast":null,"code":"import _regeneratorRuntime from \"/Users/user/Desktop/sizl/mono_pop/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/user/Desktop/sizl/mono_pop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/user/Desktop/sizl/mono_pop/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/user/Desktop/sizl/mono_pop/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/basic/register/defect.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport MenuNavigation from \"../../../../component/MenuNav/MenuNavigation\";\nimport ProfileHeader from \"../../../../component/Profile/ProfileHeader\";\nimport { RequestMethod } from \"../../../../common/RequestFunctions\";\nimport PageHeader from \"../../../../component/Header/Header\";\nimport ExcelTable from \"../../../../component/Excel/ExcelTable\";\nimport ButtonGroup from \"../../../../component/ButtonGroup\";\n//@ts-ignore\nimport { SelectColumn } from \"react-data-grid\";\nimport { columnlist } from \"../../../../common/columnInit\"; //@ts-ignore\n\nimport Notiflix from \"notiflix\";\nimport { excelDownload } from \"../../../../common/excelDownloadFunction\";\nimport { useRouter } from 'next/router';\nimport ExcelUploadModal from \"../../../../component/Modal/ExcelUploadModal\";\n\nvar RegisterBasicContainer = function RegisterBasicContainer() {\n  _s();\n\n  var _useState = useState([]),\n      processBasicRow = _useState[0],\n      setProcessBasicRow = _useState[1];\n\n  var _useState2 = useState(columnlist[\"pause\"]),\n      processColumn = _useState2[0],\n      setProcessColumn = _useState2[1];\n\n  var _useState3 = useState(false),\n      excelUploadOpen = _useState3[0],\n      setExcelUploadOpen = _useState3[1];\n\n  var _useState4 = useState([]),\n      pauseBasicRow = _useState4[0],\n      setPauseBasicRow = _useState4[1];\n\n  var _useState5 = useState(columnlist[\"defectReason\"]),\n      pauseColumn = _useState5[0],\n      setPauseColumn = _useState5[1];\n\n  var _useState6 = useState(0),\n      selectRow = _useState6[0],\n      setSelectRow = _useState6[1];\n\n  var _useState7 = useState(0),\n      processId = _useState7[0],\n      setProcessId = _useState7[1];\n\n  var _useState8 = useState(false),\n      state = _useState8[0],\n      setState = _useState8[1];\n\n  var _useState9 = useState(new Set()),\n      selectList = _useState9[0],\n      setSelectList = _useState9[1];\n\n  var router = useRouter();\n  useEffect(function () {\n    if (processBasicRow.length > 0) {\n      LoadPauseList(processBasicRow[selectRow].process_id);\n    }\n  }, [selectRow]);\n\n  var cleanUpBasicData = function cleanUpBasicData(res) {\n    var tmpRow = [];\n    tmpRow = res.data.results.info_list.map(function (column, index) {\n      var menuData = {};\n      menuData = {\n        index: index + 1,\n        width: column.width // id:Math.random()*100\n        // id: info.ppr_id,\n        // name: info.reason,\n\n      };\n      var random_id = Math.random() * 1000;\n      return _objectSpread(_objectSpread({\n        id: random_id\n      }, column), menuData);\n    });\n    setPauseBasicRow(_toConsumableArray(tmpRow));\n  };\n\n  var LoadPauseList = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value) {\n      var res, tmpColumn, tmpRow;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return RequestMethod(\"get\", \"defectReasonList\", {\n                path: {\n                  page: 1,\n                  renderItem: 51,\n                  process_id: value\n                }\n              });\n\n            case 2:\n              res = _context.sent;\n\n              if (res && res.status === 200) {\n                tmpColumn = columnlist[\"defectReason\"];\n                tmpColumn = tmpColumn.map(function (value, index) {\n                  return _objectSpread(_objectSpread({}, value), {}, {\n                    key: value.key,\n                    name: value.name,\n                    width: value.width\n                  });\n                });\n                setPauseColumn(tmpColumn); // tmpColumn.push({key:})\n\n                tmpRow = [];\n                tmpRow = res.results.info_list.map(function (column, index) {\n                  var menuData = {};\n                  menuData = {\n                    index: index + 1,\n                    width: column.width // id:Math.random()*100\n                    // id: info.ppr_id,\n                    // name: info.reason,\n\n                  };\n                  var random_id = Math.random() * 1000;\n                  return _objectSpread(_objectSpread({\n                    id: random_id\n                  }, column), menuData);\n                });\n                setPauseBasicRow(_toConsumableArray(tmpRow));\n                Notiflix.Loading.remove(300);\n              } else {\n                Notiflix.Loading.remove(300);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function LoadPauseList(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var LoadBasic = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var res, tmpColumn, tmpRow;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              Notiflix.Loading.standard();\n              _context2.next = 3;\n              return RequestMethod('get', \"processList\", {\n                path: {\n                  page: 1,\n                  renderItem: 51\n                }\n              });\n\n            case 3:\n              res = _context2.sent;\n\n              if (res && res.status === 200) {\n                if (res.results.info_list.length > 0) {\n                  setProcessId(res.results.info_list[selectRow].process_id);\n                }\n\n                tmpColumn = columnlist[\"pause\"];\n                tmpRow = [];\n                tmpColumn = tmpColumn.map(function (column) {\n                  var menuData = {};\n                  res.results.menus.map(function (menu) {\n                    if (menu.colName === column.key) {\n                      menuData = {\n                        id: menu.id,\n                        name: menu.title,\n                        width: 1560\n                      };\n                    }\n                  });\n                  return _objectSpread(_objectSpread({}, column), menuData);\n                });\n                tmpRow = res.results.info_list;\n\n                if (res.results.info_list.length > 0) {\n                  LoadPauseList(res.results.info_list[selectRow].process_id);\n                } else {\n                  Notiflix.Loading.remove(300);\n                }\n\n                setProcessColumn(tmpColumn);\n                setProcessBasicRow(_toConsumableArray(tmpRow.map(function (row) {\n                  return _objectSpread({}, row);\n                })));\n              } else if (res.state === 401) {\n                Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', function () {\n                  router.back();\n                });\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function LoadBasic() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var downloadExcel = function downloadExcel() {\n    var tmpSelectList = [];\n    pauseBasicRow.map(function (row) {\n      tmpSelectList.push(selectList.has(row.id));\n    });\n    excelDownload(pauseColumn, pauseBasicRow, \"\\uACF5\\uC815\\uBCC4 \\uBD88\\uB7C9\\uC720\\uD615 \\uB4F1\\uB85D\", '공정별 불량유형 등록', tmpSelectList);\n  };\n\n  var buttonEvents = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(index) {\n      var dataRow, savePauseBasicRow;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.t0 = index;\n              _context4.next = _context4.t0 === 0 ? 3 : _context4.t0 === 1 ? 5 : _context4.t0 === 2 ? 7 : _context4.t0 === 3 ? 11 : _context4.t0 === 4 ? 16 : 17;\n              break;\n\n            case 3:\n              setExcelUploadOpen(true);\n              return _context4.abrupt(\"return\");\n\n            case 5:\n              downloadExcel();\n              return _context4.abrupt(\"return\");\n\n            case 7:\n              dataRow = {};\n              columnlist[\"defectReason\"].map(function (key, index) {\n                if (key.key === \"index\") {\n                  dataRow[key.key] = pauseBasicRow.length + 1;\n                  dataRow.id = Math.random() * 100;\n                } else {\n                  dataRow[key.key] = \"\";\n                }\n              });\n\n              if (processId !== 0) {\n                pauseBasicRow.push(_objectSpread({}, dataRow));\n                setPauseBasicRow(_toConsumableArray(pauseBasicRow));\n              } else {\n                Notiflix.Report.warning(\"선택된 공정이 없습니다.\", \"\", \"확인\");\n              } // pauseBasicRow.push({...dataRow})\n              // setPauseBasicRow([...pauseBasicRow])\n\n\n              return _context4.abrupt(\"return\");\n\n            case 11:\n              // let validation = true;\n              Notiflix.Loading.standard();\n              savePauseBasicRow = [];\n              pauseBasicRow.map(function (value) {\n                if (value.reason === \"\" || value.reason === undefined) {// validation = false;\n                } else {\n                  savePauseBasicRow.push(value);\n                }\n              });\n\n              if (pauseBasicRow.length > 0) {\n                RequestMethod(\"post\", \"defectSave\", {\n                  process_id: processBasicRow[selectRow].process_id,\n                  reasons: savePauseBasicRow\n                }).then(function () {\n                  Notiflix.Loading.remove(300);\n                  Notiflix.Report.success(\"저장되었습니다.\", \"\", \"확인\");\n                  LoadBasic();\n                });\n              } else {\n                Notiflix.Loading.remove(300);\n                Notiflix.Report.warning(\"저장할 데이터가 없습니다\", \"\", \"확인\");\n              }\n\n              return _context4.abrupt(\"return\");\n\n            case 16:\n              Notiflix.Confirm.show(\"경고\", \"삭제하시겠습니까?\", \"확인\", \"취소\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                var idList, spliceArray, tmpPauseBasicRow, res;\n                return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        idList = [];\n                        spliceArray = [];\n                        pauseBasicRow.map(function (v, i) {\n                          if (selectList.has(v.id)) {\n                            spliceArray.push(i);\n                            idList.push(v.pdr_id);\n                          }\n                        });\n                        tmpPauseBasicRow = _toConsumableArray(pauseBasicRow);\n                        spliceArray.reverse();\n                        spliceArray.map(function (value, index) {\n                          tmpPauseBasicRow.splice(value, 1);\n                        });\n                        _context3.next = 8;\n                        return RequestMethod(\"delete\", \"defectDelete\", {\n                          reasons: idList.filter(function (v) {\n                            return v;\n                          })\n                        });\n\n                      case 8:\n                        res = _context3.sent;\n\n                        if (res && res.status === 200) {\n                          Notiflix.Report.success(\"삭제되었습니다.\", \"\", \"확인\");\n                          sortObject(tmpPauseBasicRow); // LoadPauseList(processBasicRow[selectRow].process_id);\n                        }\n\n                      case 10:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3);\n              })), function () {});\n\n            case 17:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function buttonEvents(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var sortObject = function sortObject(object) {\n    var compare_qty = function compare_qty(a, b) {\n      // a should come before b in the sorted order\n      if (a.lengthIndex < b.lengthIndex) {\n        return -1; // a should come after b in the sorted order\n      } else if (a.lengthIndex > b.lengthIndex) {\n        return 1; // a and b are the same\n      } else {\n        return 0;\n      }\n    };\n\n    object.sort(compare_qty);\n    var sortData = object.map(function (v, index) {\n      return _objectSpread(_objectSpread({}, v), {}, {\n        index: index + 1,\n        lengthIndex: index + 1\n      });\n    });\n    setPauseBasicRow(_toConsumableArray(sortData));\n  };\n\n  useEffect(function () {\n    LoadBasic();\n  }, []);\n  useEffect(function () {\n    if (state) {\n      sortObject(pauseBasicRow);\n      setState(false);\n    }\n  }, [pauseBasicRow]);\n  return __jsx(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 9\n    }\n  }, __jsx(MenuNavigation, {\n    pageType: 'BASIC',\n    subType: 3,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 13\n    }\n  }, __jsx(ProfileHeader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 17\n    }\n  }, __jsx(PageHeader, {\n    title: \"공정별 불량유형 등록\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 21\n    }\n  }), __jsx(ExcelTable, {\n    editable: true,\n    headerList: _toConsumableArray(processColumn),\n    row: processBasicRow,\n    setRow: setProcessBasicRow,\n    setSelectRow: setSelectRow,\n    width: 1576,\n    height: 300,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 21\n    }\n  }), __jsx(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      margin: \"15px 0\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 21\n    }\n  }, __jsx(\"span\", {\n    style: {\n      color: \"white\",\n      fontSize: 22,\n      fontWeight: \"bold\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 25\n    }\n  }, processBasicRow[selectRow] && processBasicRow[selectRow].name), __jsx(ButtonGroup, {\n    buttons: [\"엑셀로 업로드\", \"엑셀로 받기\", \"행 추가\", \"저장하기\", \"삭제\"],\n    buttonsOnclick: buttonEvents,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 25\n    }\n  })), __jsx(ExcelTable, {\n    editable: true,\n    headerList: [SelectColumn].concat(_toConsumableArray(pauseColumn)),\n    row: pauseBasicRow,\n    setRow: function setRow(e) {\n      var tmp = selectList;\n      e.map(function (v) {\n        if (v.isChange) tmp.add(v.id);\n      });\n      setSelectList(tmp);\n      setState(true);\n      setPauseBasicRow(e);\n    },\n    width: 1570,\n    height: 440 // setSelectList={changeSetSelectList}\n    //@ts-ignore\n    ,\n    setSelectList: setSelectList,\n    selectList: selectList,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 21\n    }\n  }))), __jsx(ExcelUploadModal, {\n    isOpen: excelUploadOpen,\n    setIsOpen: setExcelUploadOpen,\n    tab: 'ROLE_BASE_03',\n    cleanUpBasicData: cleanUpBasicData,\n    parent: processId,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 13\n    }\n  }));\n};\n\n_s(RegisterBasicContainer, \"YESWgUF20loMlzhOJmLKaTUb6+0=\", false, function () {\n  return [useRouter];\n});\n\n_c = RegisterBasicContainer;\nexport default RegisterBasicContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterBasicContainer\");","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/basic/register/defect.tsx"],"names":["React","useEffect","useState","MenuNavigation","ProfileHeader","RequestMethod","PageHeader","ExcelTable","ButtonGroup","SelectColumn","columnlist","Notiflix","excelDownload","useRouter","ExcelUploadModal","RegisterBasicContainer","processBasicRow","setProcessBasicRow","processColumn","setProcessColumn","excelUploadOpen","setExcelUploadOpen","pauseBasicRow","setPauseBasicRow","pauseColumn","setPauseColumn","selectRow","setSelectRow","processId","setProcessId","state","setState","Set","selectList","setSelectList","router","length","LoadPauseList","process_id","cleanUpBasicData","res","tmpRow","data","results","info_list","map","column","index","menuData","width","random_id","Math","random","id","value","path","page","renderItem","status","tmpColumn","key","name","Loading","remove","LoadBasic","standard","menus","menu","colName","title","row","Report","failure","back","downloadExcel","tmpSelectList","push","has","buttonEvents","dataRow","warning","savePauseBasicRow","reason","undefined","reasons","then","success","Confirm","show","idList","spliceArray","v","i","pdr_id","tmpPauseBasicRow","reverse","splice","filter","sortObject","object","compare_qty","a","b","lengthIndex","sort","sortData","display","justifyContent","margin","color","fontSize","fontWeight","e","tmp","isChange","add"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AAEA,OAAOC,cAAP,MAA2B,8CAA3B;AACA,OAAOC,aAAP,MAA0B,6CAA1B;AACA,SAAQC,aAAR,QAA4B,qCAA5B;AACA,OAAOC,UAAP,MAAuB,qCAAvB;AACA,OAAOC,UAAP,MAAuB,wCAAvB;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AAGA;AACA,SAAQC,YAAR,QAA2B,iBAA3B;AACA,SAAQC,UAAR,QAAyB,+BAAzB,C,CACA;;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAAQC,aAAR,QAA4B,0CAA5B;AACA,SAAQC,SAAR,QAAwB,aAAxB;AACA,OAAOC,gBAAP,MAA6B,8CAA7B;;AAEA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AAAA;;AAAA,kBAEab,QAAQ,CAAQ,EAAR,CAFrB;AAAA,MAE1Bc,eAF0B;AAAA,MAETC,kBAFS;;AAAA,mBAGSf,QAAQ,CAA0BQ,UAAU,SAApC,CAHjB;AAAA,MAG1BQ,aAH0B;AAAA,MAGXC,gBAHW;;AAAA,mBAKajB,QAAQ,CAAU,KAAV,CALrB;AAAA,MAK1BkB,eAL0B;AAAA,MAKTC,kBALS;;AAAA,mBAQSnB,QAAQ,CAAQ,EAAR,CARjB;AAAA,MAQ1BoB,aAR0B;AAAA,MAQXC,gBARW;;AAAA,mBASKrB,QAAQ,CAA0BQ,UAAU,gBAApC,CATb;AAAA,MAS1Bc,WAT0B;AAAA,MASbC,cATa;;AAAA,mBAUCvB,QAAQ,CAAM,CAAN,CAVT;AAAA,MAU1BwB,SAV0B;AAAA,MAUfC,YAVe;;AAAA,mBAYCzB,QAAQ,CAAS,CAAT,CAZT;AAAA,MAY1B0B,SAZ0B;AAAA,MAYfC,YAZe;;AAAA,mBAcP3B,QAAQ,CAAU,KAAV,CAdD;AAAA,MAc1B4B,KAd0B;AAAA,MAcnBC,QAdmB;;AAAA,mBAgBG7B,QAAQ,CAAW,IAAI8B,GAAJ,EAAX,CAhBX;AAAA,MAgB1BC,UAhB0B;AAAA,MAgBdC,aAhBc;;AAkBjC,MAAMC,MAAM,GAAGtB,SAAS,EAAxB;AAEAZ,EAAAA,SAAS,CAAC,YAAI;AACV,QAAGe,eAAe,CAACoB,MAAhB,GAAyB,CAA5B,EAA8B;AAC1BC,MAAAA,aAAa,CAACrB,eAAe,CAACU,SAAD,CAAf,CAA2BY,UAA5B,CAAb;AACH;AACJ,GAJQ,EAIP,CAACZ,SAAD,CAJO,CAAT;;AAMA,MAAMa,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,GAAD,EAAa;AAClC,QAAIC,MAAM,GAAG,EAAb;AACAA,IAAAA,MAAM,GAAGD,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiBC,SAAjB,CAA2BC,GAA3B,CAA+B,UAACC,MAAD,EAAaC,KAAb,EAA8B;AAClE,UAAIC,QAAgB,GAAG,EAAvB;AAEAA,MAAAA,QAAQ,GAAG;AACPD,QAAAA,KAAK,EAACA,KAAK,GAAC,CADL;AAEPE,QAAAA,KAAK,EAAEH,MAAM,CAACG,KAFP,CAGP;AACA;AACA;;AALO,OAAX;AAOA,UAAIC,SAAS,GAAGC,IAAI,CAACC,MAAL,KAAc,IAA9B;AACA;AACIC,QAAAA,EAAE,EAAEH;AADR,SAEOJ,MAFP,GAGOE,QAHP;AAKH,KAhBQ,CAAT;AAiBAzB,IAAAA,gBAAgB,oBAAKkB,MAAL,EAAhB;AACH,GApBD;;AAqBA,MAAMJ,aAAa;AAAA,wEAAG,iBAAOiB,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACAjD,aAAa,CAAC,KAAD,sBAA2B;AACtDkD,gBAAAA,IAAI,EAAE;AACFC,kBAAAA,IAAI,EAAC,CADH;AAEFC,kBAAAA,UAAU,EAAC,EAFT;AAGFnB,kBAAAA,UAAU,EAACgB;AAHT;AADgD,eAA3B,CADb;;AAAA;AACZd,cAAAA,GADY;;AASlB,kBAAGA,GAAG,IAAIA,GAAG,CAACkB,MAAJ,KAAe,GAAzB,EAA6B;AACrBC,gBAAAA,SADqB,GACTjD,UAAU,gBADD;AAEzBiD,gBAAAA,SAAS,GAAGA,SAAS,CAACd,GAAV,CAAc,UAACS,KAAD,EAAWP,KAAX,EAA4B;AAClD,yDAAWO,KAAX;AAAkBM,oBAAAA,GAAG,EAACN,KAAK,CAACM,GAA5B;AAAiCC,oBAAAA,IAAI,EAACP,KAAK,CAACO,IAA5C;AAAkDZ,oBAAAA,KAAK,EAACK,KAAK,CAACL;AAA9D;AACH,iBAFW,CAAZ;AAGAxB,gBAAAA,cAAc,CAACkC,SAAD,CAAd,CALyB,CAMzB;;AACIlB,gBAAAA,MAPqB,GAOZ,EAPY;AAQzBA,gBAAAA,MAAM,GAAGD,GAAG,CAACG,OAAJ,CAAYC,SAAZ,CAAsBC,GAAtB,CAA0B,UAACC,MAAD,EAAaC,KAAb,EAA8B;AAC7D,sBAAIC,QAAgB,GAAG,EAAvB;AAEAA,kBAAAA,QAAQ,GAAG;AACPD,oBAAAA,KAAK,EAACA,KAAK,GAAC,CADL;AAEPE,oBAAAA,KAAK,EAAEH,MAAM,CAACG,KAFP,CAGP;AACA;AACA;;AALO,mBAAX;AAOA,sBAAIC,SAAS,GAAGC,IAAI,CAACC,MAAL,KAAc,IAA9B;AACA;AACIC,oBAAAA,EAAE,EAAEH;AADR,qBAEOJ,MAFP,GAGOE,QAHP;AAKH,iBAhBQ,CAAT;AAiBAzB,gBAAAA,gBAAgB,oBAAKkB,MAAL,EAAhB;AACA9B,gBAAAA,QAAQ,CAACmD,OAAT,CAAiBC,MAAjB,CAAwB,GAAxB;AACH,eA3BD,MA2BK;AACDpD,gBAAAA,QAAQ,CAACmD,OAAT,CAAiBC,MAAjB,CAAwB,GAAxB;AACH;;AAtCiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAb1B,aAAa;AAAA;AAAA;AAAA,KAAnB;;AAyCA,MAAM2B,SAAS;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACdrD,cAAAA,QAAQ,CAACmD,OAAT,CAAiBG,QAAjB;AADc;AAAA,qBAEI5D,aAAa,CAAC,KAAD,iBAAsB;AACjDkD,gBAAAA,IAAI,EAAE;AACFC,kBAAAA,IAAI,EAAE,CADJ;AAEFC,kBAAAA,UAAU,EAAE;AAFV;AAD2C,eAAtB,CAFjB;;AAAA;AAERjB,cAAAA,GAFQ;;AAQd,kBAAGA,GAAG,IAAIA,GAAG,CAACkB,MAAJ,KAAe,GAAzB,EAA6B;AACzB,oBAAGlB,GAAG,CAACG,OAAJ,CAAYC,SAAZ,CAAsBR,MAAtB,GAA+B,CAAlC,EAAoC;AAChCP,kBAAAA,YAAY,CAACW,GAAG,CAACG,OAAJ,CAAYC,SAAZ,CAAsBlB,SAAtB,EAAiCY,UAAlC,CAAZ;AACH;;AACGqB,gBAAAA,SAJqB,GAITjD,UAAU,SAJD;AAKrB+B,gBAAAA,MALqB,GAKZ,EALY;AAMzBkB,gBAAAA,SAAS,GAAGA,SAAS,CAACd,GAAV,CAAc,UAACC,MAAD,EAAiB;AACvC,sBAAIE,QAAgB,GAAG,EAAvB;AAEAR,kBAAAA,GAAG,CAACG,OAAJ,CAAYuB,KAAZ,CAAkBrB,GAAlB,CAAsB,UAACsB,IAAD,EAAe;AACjC,wBAAGA,IAAI,CAACC,OAAL,KAAiBtB,MAAM,CAACc,GAA3B,EAA+B;AAC3BZ,sBAAAA,QAAQ,GAAG;AACPK,wBAAAA,EAAE,EAAEc,IAAI,CAACd,EADF;AAEPQ,wBAAAA,IAAI,EAAEM,IAAI,CAACE,KAFJ;AAGPpB,wBAAAA,KAAK,EAAE;AAHA,uBAAX;AAKH;AACJ,mBARD;AAUA,yDACOH,MADP,GAEOE,QAFP;AAIH,iBAjBW,CAAZ;AAkBAP,gBAAAA,MAAM,GAAGD,GAAG,CAACG,OAAJ,CAAYC,SAArB;;AACA,oBAAGJ,GAAG,CAACG,OAAJ,CAAYC,SAAZ,CAAsBR,MAAtB,GAA+B,CAAlC,EAAoC;AAChCC,kBAAAA,aAAa,CAACG,GAAG,CAACG,OAAJ,CAAYC,SAAZ,CAAsBlB,SAAtB,EAAiCY,UAAlC,CAAb;AACH,iBAFD,MAEK;AACD3B,kBAAAA,QAAQ,CAACmD,OAAT,CAAiBC,MAAjB,CAAwB,GAAxB;AACH;;AACD5C,gBAAAA,gBAAgB,CAACwC,SAAD,CAAhB;AACA1C,gBAAAA,kBAAkB,oBAAKwB,MAAM,CAACI,GAAP,CAAW,UAACyB,GAAD,EAAc;AAC5C,2CACOA,GADP;AAGH,iBAJsB,CAAL,EAAlB;AAKH,eApCD,MAoCM,IAAI9B,GAAG,CAACV,KAAJ,KAAc,GAAlB,EAAuB;AACzBnB,gBAAAA,QAAQ,CAAC4D,MAAT,CAAgBC,OAAhB,CAAwB,aAAxB,EAAuC,WAAvC,EAAoD,IAApD,EAA0D,YAAM;AAC5DrC,kBAAAA,MAAM,CAACsC,IAAP;AACH,iBAFD;AAGH;;AAhDa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATT,SAAS;AAAA;AAAA;AAAA,KAAf;;AAmDA,MAAMU,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACxB,QAAIC,aAAwB,GAAG,EAA/B;AACArD,IAAAA,aAAa,CAACuB,GAAd,CAAkB,UAAAyB,GAAG,EAAI;AACrBK,MAAAA,aAAa,CAACC,IAAd,CAAmB3C,UAAU,CAAC4C,GAAX,CAAeP,GAAG,CAACjB,EAAnB,CAAnB;AACH,KAFD;AAGAzC,IAAAA,aAAa,CAACY,WAAD,EAAcF,aAAd,8DAA4C,aAA5C,EAA2DqD,aAA3D,CAAb;AACH,GAND;;AASA,MAAMG,YAAY;AAAA,yEAAG,kBAAM/B,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACTA,KADS;AAAA,gDAER,CAFQ,wBAKR,CALQ,wBAQR,CARQ,wBA6BR,CA7BQ,yBAuDR,CAvDQ;AAAA;;AAAA;AAGT1B,cAAAA,kBAAkB,CAAC,IAAD,CAAlB;AAHS;;AAAA;AAMTqD,cAAAA,aAAa;AANJ;;AAAA;AASLK,cAAAA,OATK,GASS,EATT;AAWTrE,cAAAA,UAAU,gBAAV,CAA2BmC,GAA3B,CAA+B,UAACe,GAAD,EAASb,KAAT,EAAwB;AACnD,oBAAGa,GAAG,CAACA,GAAJ,KAAY,OAAf,EAAuB;AACnBmB,kBAAAA,OAAO,CAACnB,GAAG,CAACA,GAAL,CAAP,GAAmBtC,aAAa,CAACc,MAAd,GAAqB,CAAxC;AACA2C,kBAAAA,OAAO,CAAC1B,EAAR,GAAaF,IAAI,CAACC,MAAL,KAAc,GAA3B;AACH,iBAHD,MAGK;AACD2B,kBAAAA,OAAO,CAACnB,GAAG,CAACA,GAAL,CAAP,GAAmB,EAAnB;AACH;AACJ,eAPD;;AASA,kBAAGhC,SAAS,KAAK,CAAjB,EAAmB;AACfN,gBAAAA,aAAa,CAACsD,IAAd,mBAAuBG,OAAvB;AACAxD,gBAAAA,gBAAgB,oBAAKD,aAAL,EAAhB;AACH,eAHD,MAGK;AACDX,gBAAAA,QAAQ,CAAC4D,MAAT,CAAgBS,OAAhB,CAAwB,eAAxB,EAAwC,EAAxC,EAA2C,IAA3C;AACH,eAzBQ,CA0BT;AACA;;;AA3BS;;AAAA;AA8BT;AACArE,cAAAA,QAAQ,CAACmD,OAAT,CAAiBG,QAAjB;AACIgB,cAAAA,iBAhCK,GAgCqB,EAhCrB;AAiCT3D,cAAAA,aAAa,CAACuB,GAAd,CAAkB,UAACS,KAAD,EAAS;AACvB,oBAAGA,KAAK,CAAC4B,MAAN,KAAiB,EAAjB,IAAuB5B,KAAK,CAAC4B,MAAN,KAAiBC,SAA3C,EAAqD,CACjD;AACH,iBAFD,MAEK;AACDF,kBAAAA,iBAAiB,CAACL,IAAlB,CAAuBtB,KAAvB;AACH;AACJ,eAND;;AAOA,kBAAGhC,aAAa,CAACc,MAAd,GAAuB,CAA1B,EAA6B;AACzB/B,gBAAAA,aAAa,CAAC,MAAD,gBAAuB;AAChCiC,kBAAAA,UAAU,EAACtB,eAAe,CAACU,SAAD,CAAf,CAA2BY,UADN;AAEhC8C,kBAAAA,OAAO,EAACH;AAFwB,iBAAvB,CAAb,CAGGI,IAHH,CAGQ,YAAI;AACR1E,kBAAAA,QAAQ,CAACmD,OAAT,CAAiBC,MAAjB,CAAwB,GAAxB;AACApD,kBAAAA,QAAQ,CAAC4D,MAAT,CAAgBe,OAAhB,CAAwB,UAAxB,EAAmC,EAAnC,EAAsC,IAAtC;AACAtB,kBAAAA,SAAS;AACZ,iBAPD;AAQH,eATD,MASK;AACDrD,gBAAAA,QAAQ,CAACmD,OAAT,CAAiBC,MAAjB,CAAwB,GAAxB;AACApD,gBAAAA,QAAQ,CAAC4D,MAAT,CAAgBS,OAAhB,CAAwB,eAAxB,EAAyC,EAAzC,EAA6C,IAA7C;AACH;;AApDQ;;AAAA;AAwDTrE,cAAAA,QAAQ,CAAC4E,OAAT,CAAiBC,IAAjB,CAAsB,IAAtB,EAA2B,WAA3B,EAAuC,IAAvC,EAA4C,IAA5C,wEACI;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,wBAAAA,MADV,GAC4B,EAD5B;AAEUC,wBAAAA,WAFV,GAEiC,EAFjC;AAIIpE,wBAAAA,aAAa,CAACuB,GAAd,CAAkB,UAAC8C,CAAD,EAAGC,CAAH,EAAQ;AACtB,8BAAG3D,UAAU,CAAC4C,GAAX,CAAec,CAAC,CAACtC,EAAjB,CAAH,EAAwB;AACpBqC,4BAAAA,WAAW,CAACd,IAAZ,CAAiBgB,CAAjB;AACAH,4BAAAA,MAAM,CAACb,IAAP,CAAYe,CAAC,CAACE,MAAd;AACH;AACJ,yBALD;AAOMC,wBAAAA,gBAXV,sBAWiCxE,aAXjC;AAYIoE,wBAAAA,WAAW,CAACK,OAAZ;AACAL,wBAAAA,WAAW,CAAC7C,GAAZ,CAAgB,UAACS,KAAD,EAAQP,KAAR,EAAgB;AAC5B+C,0BAAAA,gBAAgB,CAACE,MAAjB,CAAwB1C,KAAxB,EAA+B,CAA/B;AACH,yBAFD;AAbJ;AAAA,+BAiBsBjD,aAAa,CAAC,QAAD,kBAA2B;AAAC+E,0BAAAA,OAAO,EAACK,MAAM,CAACQ,MAAP,CAAc,UAAAN,CAAC;AAAA,mCAAIA,CAAJ;AAAA,2BAAf;AAAT,yBAA3B,CAjBnC;;AAAA;AAiBUnD,wBAAAA,GAjBV;;AAmBI,4BAAGA,GAAG,IAAIA,GAAG,CAACkB,MAAJ,KAAe,GAAzB,EAA6B;AACzB/C,0BAAAA,QAAQ,CAAC4D,MAAT,CAAgBe,OAAhB,CAAwB,UAAxB,EAAmC,EAAnC,EAAsC,IAAtC;AACAY,0BAAAA,UAAU,CAACJ,gBAAD,CAAV,CAFyB,CAGzB;AACH;;AAvBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,IA0BI,YAAI,CAAE,CA1BV;;AAxDS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZhB,YAAY;AAAA;AAAA;AAAA,KAAlB;;AAyFA,MAAMoB,UAAU,GAAG,SAAbA,UAAa,CAACC,MAAD,EAAgB;AAC/B,QAAOC,WAAW,GAAG,SAAdA,WAAc,CAACC,CAAD,EAAQC,CAAR,EAAkB;AACnC;AACA,UAAGD,CAAC,CAACE,WAAF,GAAgBD,CAAC,CAACC,WAArB,EAAiC;AAC7B,eAAO,CAAC,CAAR,CAD6B,CAE7B;AACH,OAHD,MAGM,IAAGF,CAAC,CAACE,WAAF,GAAgBD,CAAC,CAACC,WAArB,EAAiC;AACnC,eAAO,CAAP,CADmC,CAEnC;AACH,OAHK,MAGD;AACD,eAAO,CAAP;AACH;AACJ,KAXD;;AAaAJ,IAAAA,MAAM,CAACK,IAAP,CAAYJ,WAAZ;AACA,QAAIK,QAAQ,GAAGN,MAAM,CAACtD,GAAP,CAAW,UAAC8C,CAAD,EAAW5C,KAAX,EAA0B;AAChD,6CAAW4C,CAAX;AAAc5C,QAAAA,KAAK,EAACA,KAAK,GAAC,CAA1B;AAA6BwD,QAAAA,WAAW,EAACxD,KAAK,GAAC;AAA/C;AACH,KAFc,CAAf;AAGAxB,IAAAA,gBAAgB,oBAAKkF,QAAL,EAAhB;AAEH,GApBD;;AAsBAxG,EAAAA,SAAS,CAAC,YAAI;AAEV+D,IAAAA,SAAS;AACZ,GAHQ,EAGP,EAHO,CAAT;AAKA/D,EAAAA,SAAS,CAAC,YAAI;AACV,QAAG6B,KAAH,EAAS;AACLoE,MAAAA,UAAU,CAAC5E,aAAD,CAAV;AACAS,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACH;AACJ,GALQ,EAKP,CAACT,aAAD,CALO,CAAT;AAOA,SACI;AAAK,IAAA,KAAK,EAAE;AAACoF,MAAAA,OAAO,EAAC;AAAT,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,cAAD;AAAgB,IAAA,QAAQ,EAAE,OAA1B;AAAmC,IAAA,OAAO,EAAE,CAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,UAAD;AAAY,IAAA,KAAK,EAAE,aAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,UAAD;AACI,IAAA,QAAQ,MADZ;AAEI,IAAA,UAAU,qBACHxF,aADG,CAFd;AAKI,IAAA,GAAG,EAAEF,eALT;AAMI,IAAA,MAAM,EAAEC,kBANZ;AAOI,IAAA,YAAY,EAAEU,YAPlB;AAQI,IAAA,KAAK,EAAE,IARX;AASI,IAAA,MAAM,EAAE,GATZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAaI;AAAK,IAAA,KAAK,EAAE;AAAC+E,MAAAA,OAAO,EAAC,MAAT;AAAiBC,MAAAA,cAAc,EAAC,eAAhC;AAAiDC,MAAAA,MAAM,EAAC;AAAxD,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAM,IAAA,KAAK,EAAE;AAACC,MAAAA,KAAK,EAAC,OAAP;AAAgBC,MAAAA,QAAQ,EAAC,EAAzB;AAA6BC,MAAAA,UAAU,EAAC;AAAxC,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK/F,eAAe,CAACU,SAAD,CAAf,IAA8BV,eAAe,CAACU,SAAD,CAAf,CAA2BmC,IAD9D,CADJ,EAII,MAAC,WAAD;AAAa,IAAA,OAAO,EAAE,CAAE,SAAF,EAAa,QAAb,EAAuB,MAAvB,EAA+B,MAA/B,EAAuC,IAAvC,CAAtB;AAAoE,IAAA,cAAc,EAAEiB,YAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CAbJ,EAmBI,MAAC,UAAD;AACI,IAAA,QAAQ,MADZ;AAEI,IAAA,UAAU,GACNrE,YADM,4BAEHe,WAFG,EAFd;AAMI,IAAA,GAAG,EAAEF,aANT;AAOI,IAAA,MAAM,EAAE,gBAAC0F,CAAD,EAAO;AACX,UAAIC,GAAa,GAAGhF,UAApB;AACA+E,MAAAA,CAAC,CAACnE,GAAF,CAAM,UAAA8C,CAAC,EAAI;AACP,YAAGA,CAAC,CAACuB,QAAL,EAAeD,GAAG,CAACE,GAAJ,CAAQxB,CAAC,CAACtC,EAAV;AAClB,OAFD;AAGAnB,MAAAA,aAAa,CAAC+E,GAAD,CAAb;AACAlF,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAR,MAAAA,gBAAgB,CAACyF,CAAD,CAAhB;AACH,KAfL;AAgBI,IAAA,KAAK,EAAE,IAhBX;AAiBI,IAAA,MAAM,EAAE,GAjBZ,CAkBI;AACA;AAnBJ;AAoBI,IAAA,aAAa,EAAE9E,aApBnB;AAqBI,IAAA,UAAU,EAAED,UArBhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBJ,CAHJ,CAFJ,EAiDI,MAAC,gBAAD;AAAkB,IAAA,MAAM,EAAEb,eAA1B;AAA2C,IAAA,SAAS,EAAEC,kBAAtD;AAA0E,IAAA,GAAG,EAAE,cAA/E;AAA+F,IAAA,gBAAgB,EAAEkB,gBAAjH;AAAmI,IAAA,MAAM,EAAEX,SAA3I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjDJ,CADJ;AAqDH,CApUD;;GAAMb,sB;UAkBaF,S;;;KAlBbE,sB;AAsUN,eAAeA,sBAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport styled from \"styled-components\";\nimport MenuNavigation from \"../../../../component/MenuNav/MenuNavigation\";\nimport ProfileHeader from \"../../../../component/Profile/ProfileHeader\";\nimport {RequestMethod} from \"../../../../common/RequestFunctions\";\nimport PageHeader from \"../../../../component/Header/Header\";\nimport ExcelTable from \"../../../../component/Excel/ExcelTable\";\nimport ButtonGroup from \"../../../../component/ButtonGroup\";\n\nimport {IExcelHeaderType} from \"../../../../common/@types/type\";\n//@ts-ignore\nimport {SelectColumn} from \"react-data-grid\";\nimport {columnlist} from \"../../../../common/columnInit\";\n//@ts-ignore\nimport Notiflix from \"notiflix\";\nimport {excelDownload} from \"../../../../common/excelDownloadFunction\";\nimport {useRouter} from 'next/router'\nimport ExcelUploadModal from \"../../../../component/Modal/ExcelUploadModal\";\n\nconst RegisterBasicContainer = () => {\n\n    const [processBasicRow, setProcessBasicRow] = useState<any[]>([]);\n    const [processColumn, setProcessColumn] = useState<Array<IExcelHeaderType>>(columnlist[`pause`] );\n\n    const [excelUploadOpen, setExcelUploadOpen] = useState<boolean>(false);\n\n\n    const [pauseBasicRow, setPauseBasicRow] = useState<any[]>([]);\n    const [pauseColumn, setPauseColumn] = useState<Array<IExcelHeaderType>>(columnlist[`defectReason`]);\n    const [selectRow, setSelectRow] = useState<any>(0);\n\n    const [processId, setProcessId] = useState<number>(0);\n\n    const [state, setState] = useState<boolean>(false);\n\n    const [selectList, setSelectList] = useState<Set<any>>(new Set());\n\n    const router = useRouter()\n\n    useEffect(()=>{\n        if(processBasicRow.length > 0){\n            LoadPauseList(processBasicRow[selectRow].process_id);\n        }\n    },[selectRow])\n\n    const cleanUpBasicData = (res:any) => {\n        let tmpRow = [];\n        tmpRow = res.data.results.info_list.map((column: any,index:number) => {\n            let menuData: object = {};\n\n            menuData = {\n                index:index+1,\n                width: column.width,\n                // id:Math.random()*100\n                // id: info.ppr_id,\n                // name: info.reason,\n            }\n            let random_id = Math.random()*1000;\n            return {\n                id: random_id,\n                ...column,\n                ...menuData\n            }\n        })\n        setPauseBasicRow([...tmpRow]);\n    }\n    const LoadPauseList = async (value:string) => {\n        const res = await RequestMethod(\"get\", `defectReasonList`,{\n            path: {\n                page:1,\n                renderItem:51,\n                process_id:value\n            }\n        })\n\n        if(res && res.status === 200){\n            let tmpColumn = columnlist[`defectReason`];\n            tmpColumn = tmpColumn.map((value:any,index:number) => {\n                return {...value, key:value.key, name:value.name, width:value.width}\n            })\n            setPauseColumn(tmpColumn);\n            // tmpColumn.push({key:})\n            let tmpRow = [];\n            tmpRow = res.results.info_list.map((column: any,index:number) => {\n                let menuData: object = {};\n\n                menuData = {\n                    index:index+1,\n                    width: column.width,\n                    // id:Math.random()*100\n                    // id: info.ppr_id,\n                    // name: info.reason,\n                }\n                let random_id = Math.random()*1000;\n                return {\n                    id: random_id,\n                    ...column,\n                    ...menuData\n                }\n            })\n            setPauseBasicRow([...tmpRow]);\n            Notiflix.Loading.remove(300);\n        }else{\n            Notiflix.Loading.remove(300);\n        }\n    }\n\n    const LoadBasic = async () => {\n        Notiflix.Loading.standard();\n        const res = await RequestMethod('get', `processList`,{\n            path: {\n                page: 1,\n                renderItem: 51,\n            }\n        })\n        if(res && res.status === 200){\n            if(res.results.info_list.length > 0){\n                setProcessId(res.results.info_list[selectRow].process_id)\n            }\n            let tmpColumn = columnlist[`pause`];\n            let tmpRow = []\n            tmpColumn = tmpColumn.map((column: any) => {\n                let menuData: object = {};\n\n                res.results.menus.map((menu: any) => {\n                    if(menu.colName === column.key){\n                        menuData = {\n                            id: menu.id,\n                            name: menu.title,\n                            width: 1560\n                        }\n                    }\n                })\n\n                return {\n                    ...column,\n                    ...menuData\n                }\n            })\n            tmpRow = res.results.info_list\n            if(res.results.info_list.length > 0){\n                LoadPauseList(res.results.info_list[selectRow].process_id);\n            }else{\n                Notiflix.Loading.remove(300);\n            }\n            setProcessColumn(tmpColumn);\n            setProcessBasicRow([...tmpRow.map((row: any) => {\n                return {\n                    ...row,\n                }\n            })])\n        }else if (res.state === 401) {\n            Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n                router.back()\n            })\n        }\n    }\n\n    const downloadExcel = () => {\n        let tmpSelectList: boolean[] = []\n        pauseBasicRow.map(row => {\n            tmpSelectList.push(selectList.has(row.id))\n        })\n        excelDownload(pauseColumn, pauseBasicRow, `공정별 불량유형 등록`, '공정별 불량유형 등록', tmpSelectList)\n    }\n\n\n    const buttonEvents = async(index:number) => {\n        switch (index) {\n            case 0 :\n                setExcelUploadOpen(true)\n                return\n            case 1 :\n                downloadExcel();\n                return\n            case 2 :\n                let dataRow:any = {};\n\n                columnlist[`defectReason`].map((key:any,index:number)=>{\n                    if(key.key === \"index\"){\n                        dataRow[key.key] = pauseBasicRow.length+1;\n                        dataRow.id = Math.random()*100;\n                    }else{\n                        dataRow[key.key] = \"\";\n                    }\n                })\n\n                if(processId !== 0){\n                    pauseBasicRow.push({...dataRow})\n                    setPauseBasicRow([...pauseBasicRow])\n                }else{\n                    Notiflix.Report.warning(\"선택된 공정이 없습니다.\",\"\",\"확인\");\n                }\n                // pauseBasicRow.push({...dataRow})\n                // setPauseBasicRow([...pauseBasicRow])\n                return\n            case 3 :\n                // let validation = true;\n                Notiflix.Loading.standard();\n                let savePauseBasicRow:any[] = [];\n                pauseBasicRow.map((value)=>{\n                    if(value.reason === \"\" || value.reason === undefined){\n                        // validation = false;\n                    }else{\n                        savePauseBasicRow.push(value);\n                    }\n                })\n                if(pauseBasicRow.length > 0 ){\n                    RequestMethod(\"post\", `defectSave`, {\n                        process_id:processBasicRow[selectRow].process_id,\n                        reasons:savePauseBasicRow\n                    }).then(()=>{\n                        Notiflix.Loading.remove(300);\n                        Notiflix.Report.success(\"저장되었습니다.\",\"\",\"확인\");\n                        LoadBasic();\n                    })\n                }else{\n                    Notiflix.Loading.remove(300);\n                    Notiflix.Report.warning(\"저장할 데이터가 없습니다\", \"\", \"확인\");\n                }\n                return\n\n            case 4 :\n                Notiflix.Confirm.show(\"경고\",\"삭제하시겠습니까?\",\"확인\",\"취소\",\n                    async()=>{\n                        const idList:number[] = [];\n                        const spliceArray:number[] = [];\n\n                        pauseBasicRow.map((v,i)=> {\n                            if(selectList.has(v.id)){\n                                spliceArray.push(i);\n                                idList.push(v.pdr_id)\n                            }\n                        })\n\n                        const tmpPauseBasicRow = [...pauseBasicRow];\n                        spliceArray.reverse();\n                        spliceArray.map((value, index)=>{\n                            tmpPauseBasicRow.splice(value, 1);\n                        })\n\n                        const res = await RequestMethod(\"delete\", `defectDelete`, {reasons:idList.filter(v => v) } );\n\n                        if(res && res.status === 200){\n                            Notiflix.Report.success(\"삭제되었습니다.\",\"\",\"확인\");\n                            sortObject(tmpPauseBasicRow);\n                            // LoadPauseList(processBasicRow[selectRow].process_id);\n                        }\n                    },\n                    ()=>{}\n                );\n\n\n        }\n    }\n\n    const sortObject = (object:any) => {\n        const  compare_qty = (a:any, b:any) => {\n            // a should come before b in the sorted order\n            if(a.lengthIndex < b.lengthIndex){\n                return -1;\n                // a should come after b in the sorted order\n            }else if(a.lengthIndex > b.lengthIndex){\n                return 1;\n                // a and b are the same\n            }else{\n                return 0;\n            }\n        }\n\n        object.sort(compare_qty)\n        let sortData = object.map((v:object, index:number)=>{\n            return {...v, index:index+1, lengthIndex:index+1}\n        });\n        setPauseBasicRow([...sortData]);\n\n    }\n\n    useEffect(()=>{\n\n        LoadBasic();\n    },[])\n\n    useEffect(()=>{\n        if(state){\n            sortObject(pauseBasicRow);\n            setState(false);\n        }\n    },[pauseBasicRow])\n\n    return (\n        <div style={{display:\"flex\"}}>\n            <MenuNavigation pageType={'BASIC'} subType={3}/>\n            <div>\n                <ProfileHeader/>\n\n                <div>\n                    <PageHeader title={\"공정별 불량유형 등록\"} />\n                    <ExcelTable\n                        editable\n                        headerList={[\n                            ...processColumn\n                        ]}\n                        row={processBasicRow}\n                        setRow={setProcessBasicRow}\n                        setSelectRow={setSelectRow}\n                        width={1576}\n                        height={300}\n                    />\n                    <div style={{display:\"flex\", justifyContent:\"space-between\", margin:\"15px 0\"}}>\n                        <span style={{color:\"white\", fontSize:22, fontWeight:\"bold\"}}>\n                            {processBasicRow[selectRow] && processBasicRow[selectRow].name}\n                        </span>\n                        <ButtonGroup buttons={[ \"엑셀로 업로드\", \"엑셀로 받기\", \"행 추가\", \"저장하기\", \"삭제\"]} buttonsOnclick={buttonEvents}/>\n                    </div>\n                    <ExcelTable\n                        editable\n                        headerList={[\n                            SelectColumn,\n                            ...pauseColumn\n                        ]}\n                        row={pauseBasicRow}\n                        setRow={(e) => {\n                            let tmp: Set<any> = selectList\n                            e.map(v => {\n                                if(v.isChange) tmp.add(v.id)\n                            })\n                            setSelectList(tmp)\n                            setState(true)\n                            setPauseBasicRow(e)\n                        }}\n                        width={1570}\n                        height={440}\n                        // setSelectList={changeSetSelectList}\n                        //@ts-ignore\n                        setSelectList={setSelectList}\n                        selectList={selectList}\n                    />\n                </div>\n            </div>\n            <ExcelUploadModal isOpen={excelUploadOpen} setIsOpen={setExcelUploadOpen} tab={'ROLE_BASE_03'} cleanUpBasicData={cleanUpBasicData} parent={processId} />\n        </div>\n    )\n}\n\nexport default RegisterBasicContainer;\n"]},"metadata":{},"sourceType":"module"}