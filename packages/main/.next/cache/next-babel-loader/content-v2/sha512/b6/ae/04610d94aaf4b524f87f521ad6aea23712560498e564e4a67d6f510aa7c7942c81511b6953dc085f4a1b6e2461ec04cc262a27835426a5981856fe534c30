{"ast":null,"code":"import _toConsumableArray from \"/Users/user/Desktop/sizl/mono_pop/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/user/Desktop/sizl/mono_pop/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/user/Desktop/sizl/mono_pop/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/user/Desktop/sizl/mono_pop/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/stock/productlist.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport MenuNavigation from \"../../../component/MenuNav/MenuNavigation\";\nimport ProfileHeader from \"../../../component/Profile/ProfileHeader\";\nimport PageHeader from \"../../../component/Header/Header\";\nimport ExcelTable from \"../../../component/Excel/ExcelTable\";\nimport { RequestMethod } from \"../../../common/RequestFunctions\";\nimport { columnlist } from \"../../../common/columnInit\";\n//@ts-ignore\nimport { SelectColumn } from \"react-data-grid\"; //@ts-ignore\n\nimport Notiflix from \"notiflix\";\nimport { ScrollSync, ScrollSyncPane } from \"react-scroll-sync\";\nimport ProductTitleFomatter from \"../../../component/Formatter/ProductTitleFomatter\";\nimport moment from \"moment\";\nimport UnitContainer from \"../../../component/Unit/UnitContainer\";\nimport { excelDownload } from \"../../../common/excelDownloadFunction\";\nimport { useRouter } from \"next/router\";\n\nvar Productlist = function Productlist(_ref) {\n  _s();\n\n  var page = _ref.page,\n      keyword = _ref.keyword,\n      option = _ref.option;\n  var router = useRouter();\n\n  var _useState = useState([]),\n      rowData = _useState[0],\n      setRowData = _useState[1];\n\n  var _useState2 = useState([]),\n      dateData = _useState2[0],\n      setDateData = _useState2[1];\n\n  var _useState3 = useState(columnlist.stockProduct),\n      column = _useState3[0],\n      setColumn = _useState3[1];\n\n  var _useState4 = useState(columnlist.stockDate),\n      dateColumn = _useState4[0],\n      setDateColumn = _useState4[1];\n\n  var _useState5 = useState(new Set()),\n      selectList = _useState5[0],\n      setSelectList = _useState5[1]; // const [keyword, setKeyword] = useState<string>(\"\");\n  // const [option, setOption] = useState<number>(0)\n\n\n  var _useState6 = useState(option),\n      optionIndex = _useState6[0],\n      setOptionIndex = _useState6[1];\n\n  var _useState7 = useState(moment(new Date()).startOf(\"month\").format('YYYY-MM')),\n      selectMonth = _useState7[0],\n      setSelectMonth = _useState7[1];\n\n  var changeSelectMonth = function changeSelectMonth(value) {\n    setSelectMonth(value);\n  };\n\n  var _useState8 = useState(),\n      modalResult = _useState8[0],\n      setModalResult = _useState8[1];\n\n  var _useState9 = useState({\n    model: 0,\n    data: 0\n  }),\n      excelTableWidths = _useState9[0],\n      setExcelTableWidths = _useState9[1];\n\n  var _useState10 = useState({\n    from: moment(new Date()).startOf(\"month\").format('YYYY-MM-DD'),\n    to: moment(new Date()).endOf(\"month\").format('YYYY-MM-DD')\n  }),\n      selectDate = _useState10[0],\n      setSelectDate = _useState10[1];\n\n  useEffect(function () {\n    setOptionIndex(option); // if(keyword){\n    //     SearchBasic(keyword, option, page).then(() => {\n    //         Notiflix.Loading.remove()\n    //     })\n    // }else{\n\n    LoadData().then(function () {\n      Notiflix.Loading.remove();\n    }).then(function () {\n      Notiflix.Loading.remove();\n    }); // }\n  }, [page, keyword, option]);\n\n  var changeSelectDate = function changeSelectDate(from, to) {\n    setSelectDate({\n      from: from,\n      to: to\n    });\n  };\n\n  var LoadData = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              Notiflix.Loading.standard();\n              _context.next = 3;\n              return RequestMethod('get', 'stockProductList', {\n                path: {\n                  tab: \"ROLE_STK_03\"\n                },\n                params: {\n                  keyword: keyword,\n                  opt: option,\n                  from: selectDate.from,\n                  to: selectDate.to\n                }\n              });\n\n            case 3:\n              res = _context.sent;\n\n              if (res && res.status === 200) {\n                // if(res.results.summaries.length > 0){\n                cleanUpData(res, \"model\");\n                cleanUpData(res, \"date\"); // }\n\n                Notiflix.Loading.remove(300);\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function LoadData() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var cleanUpData = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(res, version) {\n      var tmpColumn, tmpRow, tmpRow_date, result, totalWidth, tmpBasicRow_model;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              tmpColumn = columnlist.stockProduct;\n              tmpRow = [];\n              tmpRow_date = [];\n              result = [];\n              totalWidth = 0;\n              _context2.t0 = version;\n              _context2.next = _context2.t0 === \"model\" ? 8 : _context2.t0 === \"date\" ? 14 : 17;\n              break;\n\n            case 8:\n              tmpColumn = columnlist.stockProduct.map(function (column, index) {\n                var menuData;\n                res.results.menus && res.results.menus.map(function (menu) {\n                  if (menu.colName === column.key) {\n                    menuData = {\n                      id: menu.id,\n                      name: menu.title,\n                      width: menu.width,\n                      tab: menu.tab,\n                      unit: menu.unit\n                    };\n                  } else if (menu.colName === 'id' && column.key === 'tmpId') {\n                    menuData = {\n                      id: menu.id,\n                      name: menu.title,\n                      width: menu.width,\n                      tab: menu.tab,\n                      unit: menu.unit\n                    };\n                  }\n                });\n\n                if (menuData) {\n                  return _objectSpread(_objectSpread({}, column), menuData);\n                }\n              }).filter(function (v) {\n                return v;\n              });\n              tmpColumn.map(function (v) {\n                totalWidth += v.width;\n              });\n              setExcelTableWidths({\n                data: 1576 - totalWidth,\n                model: totalWidth\n              });\n              setColumn(_toConsumableArray(tmpColumn));\n              return _context2.abrupt(\"break\", 19);\n\n            case 14:\n              if (res.results.summaries.length > 0) {\n                tmpColumn = res.results.summaries[0].statistics.logs.map(function (col) {\n                  result.push({\n                    key: col.date,\n                    name: col.date,\n                    formatter: UnitContainer,\n                    unitData: 'EA',\n                    width: 100\n                  });\n                });\n                setDateColumn([{\n                  key: \"title\",\n                  name: \"생산/납품\",\n                  formatter: ProductTitleFomatter,\n                  width: 100,\n                  frozen: true\n                }, {\n                  key: \"carryforward\",\n                  name: \"전월 이월\",\n                  formatter: UnitContainer,\n                  unitData: \"EA\",\n                  frozen: true\n                }, {\n                  key: \"total\",\n                  name: \"합계\",\n                  formatter: UnitContainer,\n                  unitData: 'EA',\n                  width: 100,\n                  frozen: true\n                }].concat(_toConsumableArray(result)));\n                result = [];\n              } else {\n                result = [];\n              }\n\n              return _context2.abrupt(\"break\", 19);\n\n            case 17:\n              return _context2.abrupt(\"break\", 19);\n\n            case 19:\n              tmpRow = res.results.summaries;\n              tmpBasicRow_model = tmpRow.map(function (row, index) {\n                var random_id = Math.random() * 1000;\n                return _objectSpread(_objectSpread({}, row), {}, {\n                  customer_id: row.product.raw_material.model.customer.name,\n                  cm_id: row.product.raw_material.model.model,\n                  model: row.product.raw_material.model.model,\n                  code: row.product.raw_material.code,\n                  name: row.product.raw_material.name,\n                  id: \"product_\".concat(random_id)\n                });\n              });\n              tmpRow.map(function (row, index) {\n                var random = Math.random() * 1000;\n                var tmp_row_produced = {};\n                var tmp_row_shipped = {};\n                row.statistics.logs.map(function (log) {\n                  tmp_row_produced[log.date] = log.produced;\n                  tmp_row_shipped[log.date] = log.shipped;\n                });\n                tmp_row_produced[\"carryforward\"] = row.statistics.carryforward;\n                tmp_row_produced[\"total\"] = row.statistics.total_produced + row.statistics.carryforward;\n                tmp_row_shipped[\"total\"] = row.statistics.total_shipped;\n                tmpRow_date.push(_objectSpread({\n                  title: \"생산\",\n                  id: \"product_\".concat(random)\n                }, tmp_row_produced));\n                tmpRow_date.push(_objectSpread({\n                  title: \"납품\",\n                  id: \"product_\".concat(random + 1)\n                }, tmp_row_shipped));\n              });\n\n              if (version === \"model\") {\n                setRowData(_toConsumableArray(tmpBasicRow_model));\n              } else if (version === \"date\") {\n                setDateData([].concat(tmpRow_date));\n              }\n\n            case 23:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function cleanUpData(_x, _x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var downloadExcel = function downloadExcel() {\n    var tmpSelectList = [];\n    var tmpSelectListData = [];\n    rowData.map(function (row) {\n      tmpSelectList.push(selectList.has(row.id));\n      tmpSelectList.push(selectList.has(row.id)); // if(selectList.has(row.id)){\n\n      var sumProducedObject = {};\n      var sumShippedObject = {};\n      Object.keys(row).map(function (value) {\n        if (value === \"statistics\") {\n          row[value].logs.map(function (data) {\n            sumProducedObject[data.date] = data.produced;\n            sumShippedObject[data.date] = data.shipped;\n          });\n        } else {\n          sumProducedObject[value] = row[value];\n        }\n      });\n      sumProducedObject[\"title\"] = \"생산\";\n      sumProducedObject[\"carryforward\"] = row.statistics.carryforward;\n      sumProducedObject[\"total\"] = row.statistics.total_produced;\n      sumShippedObject[\"title\"] = \"납품\"; // sumShippedObject[\"carryforward\"] = row.statistics.carryforward;\n\n      sumShippedObject[\"total\"] = row.statistics.total_shipped;\n      tmpSelectListData.push(sumProducedObject);\n      tmpSelectListData.push(sumShippedObject); // }\n    });\n    excelDownload([].concat(_toConsumableArray(column), _toConsumableArray(dateColumn)), tmpSelectListData, \"\".concat(selectDate.from, \" ~ \").concat(selectDate.to, \" \\uC0DD\\uC0B0/\\uB0A9\\uD488 \\uD604\\uD669\"), \"\".concat(selectDate.from, \" ~ \").concat(selectDate.to), tmpSelectList);\n  };\n\n  var buttonClickEvents = function buttonClickEvents(number) {\n    switch (number) {\n      case 0:\n        downloadExcel();\n        return;\n\n      default:\n        return;\n    }\n  };\n\n  useEffect(function () {\n    LoadData();\n  }, [selectDate, keyword]);\n  useEffect(function () {\n    var modelWidth = 0;\n    column.map(function (v) {\n      modelWidth += v.width;\n    });\n    modelWidth += 36;\n    setExcelTableWidths(_objectSpread(_objectSpread({}, excelTableWidths), {}, {\n      data: 1576 - modelWidth,\n      model: modelWidth\n    }));\n  }, [column]);\n  return __jsx(ScrollSync, {\n    horizontal: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 13\n    }\n  }, __jsx(MenuNavigation, {\n    pageType: 'MES',\n    subType: 3,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    style: {\n      width: 1576\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 17\n    }\n  }, __jsx(ProfileHeader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 21\n    }\n  }), __jsx(PageHeader, {\n    title: \"생산/납품 현황\",\n    buttons: [\"엑셀로 받기\"],\n    buttonsOnclick: buttonClickEvents,\n    isSearch: true,\n    searchOptionList: [\"거래처\", \"모델\", \"CODE\", \"품명\"],\n    onChangeSearchOption: function onChangeSearchOption(option) {\n      setOptionIndex(option);\n    },\n    isCalendar: true,\n    searchKeyword: keyword,\n    onChangeSearchKeyword: function onChangeSearchKeyword(keyword) {\n      if (keyword) {\n        router.push(\"/mes/stock/productlist?page=1&keyword=\".concat(keyword, \"&opt=\").concat(optionIndex));\n      } else {\n        router.push(\"/mes/stock/productlist?page=1&keyword=\");\n      }\n    },\n    calendarType: \"month\",\n    onChangeSelectDate: changeSelectDate,\n    selectDate: selectMonth,\n    setSelectDate: changeSelectMonth,\n    optionIndex: optionIndex,\n    dataLimit: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 21\n    }\n  }), __jsx(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 21\n    }\n  }, __jsx(ScrollSyncPane, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 25\n    }\n  }, __jsx(ExcelTable, {\n    headerList: [SelectColumn].concat(_toConsumableArray(column)),\n    setHeaderList: function setHeaderList(value) {\n      // value.splice(0,1);\n      value.map(function (v, i) {\n        if (v.name === \"\") {\n          value.splice(i, 1);\n        }\n      });\n      setColumn(_toConsumableArray(value));\n    },\n    selectList: selectList,\n    setSelectList: setSelectList,\n    row: rowData,\n    setRow: setRowData,\n    width: excelTableWidths.model,\n    rowHeight: 80,\n    overflow: \"hidden\",\n    resizable: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 29\n    }\n  })), __jsx(ScrollSyncPane, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 25\n    }\n  }, __jsx(ExcelTable, {\n    headerList: dateColumn,\n    row: dateData,\n    setRow: setRowData,\n    maxWidth: excelTableWidths.data,\n    rowHeight: 40,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 29\n    }\n  }))))));\n};\n\n_s(Productlist, \"1Xk5UnTUJzxx9pkrqyFOuufW9hs=\", false, function () {\n  return [useRouter];\n});\n\n_c = Productlist;\n// Productlist.getInitialProps = async ({ query }) => {\n//     let { page, keyword, opt } = query\n//     if (typeof page === 'string')\n//         page = parseInt(page);\n//     if (typeof opt === 'string')\n//         opt = parseInt(opt);\n//     return { page, keyword, option: opt };\n// }\nexport var __N_SSP = true;\nexport default Productlist;\n\nvar _c;\n\n$RefreshReg$(_c, \"Productlist\");","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/stock/productlist.tsx"],"names":["React","useEffect","useState","MenuNavigation","ProfileHeader","PageHeader","ExcelTable","RequestMethod","columnlist","SelectColumn","Notiflix","ScrollSync","ScrollSyncPane","ProductTitleFomatter","moment","UnitContainer","excelDownload","useRouter","Productlist","page","keyword","option","router","rowData","setRowData","dateData","setDateData","stockProduct","column","setColumn","stockDate","dateColumn","setDateColumn","Set","selectList","setSelectList","optionIndex","setOptionIndex","Date","startOf","format","selectMonth","setSelectMonth","changeSelectMonth","value","modalResult","setModalResult","model","data","excelTableWidths","setExcelTableWidths","from","to","endOf","selectDate","setSelectDate","LoadData","then","Loading","remove","changeSelectDate","standard","path","tab","params","opt","res","status","cleanUpData","version","tmpColumn","tmpRow","tmpRow_date","result","totalWidth","map","index","menuData","results","menus","menu","colName","key","id","name","title","width","unit","filter","v","summaries","length","statistics","logs","col","push","date","formatter","unitData","frozen","tmpBasicRow_model","row","random_id","Math","random","customer_id","product","raw_material","customer","cm_id","code","tmp_row_produced","tmp_row_shipped","log","produced","shipped","carryforward","total_produced","total_shipped","downloadExcel","tmpSelectList","tmpSelectListData","has","sumProducedObject","sumShippedObject","Object","keys","buttonClickEvents","number","modelWidth","display","justifyContent","i","splice"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport MenuNavigation from \"../../../component/MenuNav/MenuNavigation\";\nimport ProfileHeader from \"../../../component/Profile/ProfileHeader\";\nimport PageHeader from \"../../../component/Header/Header\";\nimport ExcelTable from \"../../../component/Excel/ExcelTable\";\nimport {RequestMethod} from \"../../../common/RequestFunctions\";\nimport {columnlist} from \"../../../common/columnInit\";\nimport {IExcelHeaderType} from \"../../../common/@types/type\";\n//@ts-ignore\nimport {SelectColumn} from \"react-data-grid\";\n//@ts-ignore\nimport Notiflix from \"notiflix\";\nimport {ScrollSync, ScrollSyncPane} from \"react-scroll-sync\";\nimport ProductTitleFomatter from \"../../../component/Formatter/ProductTitleFomatter\";\nimport moment from \"moment\";\nimport UnitContainer from \"../../../component/Unit/UnitContainer\";\nimport {excelDownload} from \"../../../common/excelDownloadFunction\";\nimport {NextPageContext} from \"next\";\nimport {useRouter} from \"next/router\";\nimport BasicContainer from '../basic/customer'\n\n\ninterface IProps {\n    children?: any\n    page?: number\n    keyword?: string\n    option?: number\n}\n\n\nconst Productlist = ({page, keyword, option}: IProps) => {\n\n    const router = useRouter();\n\n    const [rowData, setRowData] = useState<any[]>([]);\n    const [dateData, setDateData] = useState<any[]>([]);\n    const [column, setColumn] = useState<Array<IExcelHeaderType>>(columnlist.stockProduct);\n    const [dateColumn, setDateColumn] = useState<Array<IExcelHeaderType>>(columnlist.stockDate);\n\n    const [selectList, setSelectList] = useState<ReadonlySet<number>>(new Set());\n\n    // const [keyword, setKeyword] = useState<string>(\"\");\n    // const [option, setOption] = useState<number>(0)\n    const [optionIndex, setOptionIndex] = useState<number>(option)\n\n    const [selectMonth, setSelectMonth] = useState<string>(moment(new Date()).startOf(\"month\").format('YYYY-MM'))\n\n    const changeSelectMonth = (value:string) => {\n        setSelectMonth(value);\n    }\n    const [modalResult, setModalResult] = useState<any>();\n\n    const [excelTableWidths, setExcelTableWidths] = useState<{model:number, data:number}>({model:0, data:0});\n\n    const [selectDate, setSelectDate] = useState<{from:string, to:string}>({\n        from: moment(new Date()).startOf(\"month\").format('YYYY-MM-DD'),\n        to: moment(new Date()).endOf(\"month\").format('YYYY-MM-DD')\n    });\n\n    useEffect(() => {\n        setOptionIndex(option)\n        // if(keyword){\n        //     SearchBasic(keyword, option, page).then(() => {\n        //         Notiflix.Loading.remove()\n        //     })\n        // }else{\n            LoadData().then(() => {\n                Notiflix.Loading.remove()\n            }).then(() => {\n                Notiflix.Loading.remove()\n            })\n        // }\n    }, [page, keyword, option])\n\n    const changeSelectDate = (from:string, to:string) => {\n        setSelectDate({from:from, to:to});\n    }\n\n    const LoadData = async() => {\n        Notiflix.Loading.standard();\n        const res = await RequestMethod('get', 'stockProductList', {\n            path:{\n                tab:\"ROLE_STK_03\"\n            },\n            params:{\n                keyword:keyword,\n                opt:option,\n                from:selectDate.from,\n                to:selectDate.to\n            }\n        });\n\n        if(res && res.status === 200 ){\n            // if(res.results.summaries.length > 0){\n                cleanUpData(res, \"model\");\n                cleanUpData(res, \"date\");\n            // }\n            Notiflix.Loading.remove(300);\n        }\n    }\n\n    const cleanUpData = async(res: any, version:string) => {\n        let tmpColumn = columnlist.stockProduct;\n        let tmpRow = [];\n        let tmpRow_date = [];\n        let result = [];\n        let totalWidth = 0;\n        switch (version){\n            case \"model\":\n                tmpColumn = columnlist.stockProduct.map((column: any, index) => {\n                    let menuData: object | undefined;\n                    res.results.menus && res.results.menus.map((menu: any) => {\n                        if(menu.colName === column.key){\n                            menuData = {\n                                id: menu.id,\n                                name: menu.title,\n                                width: menu.width,\n                                tab:menu.tab,\n                                unit:menu.unit,\n                            }\n                        } else if(menu.colName === 'id' && column.key === 'tmpId'){\n                            menuData = {\n                                id: menu.id,\n                                name: menu.title,\n                                width: menu.width,\n                                tab:menu.tab,\n                                unit:menu.unit\n                            }\n                        }\n                    })\n\n                    if(menuData){\n                        return {\n                            ...column,\n                            ...menuData\n                        }\n                    }\n                }).filter((v:any) => v)\n\n                tmpColumn.map((v)=>{\n                    totalWidth +=v.width\n                })\n\n                setExcelTableWidths({data:1576-totalWidth, model:totalWidth})\n                setColumn([...tmpColumn]);\n\n                break;\n                return\n            case \"date\":\n                if(res.results.summaries.length > 0){\n                    tmpColumn = res.results.summaries[0].statistics.logs.map((col)=>{\n                            result.push(\n                                {key:col.date, name:col.date, formatter: UnitContainer, unitData: 'EA', width:100},\n                                );\n                        })\n                    setDateColumn([\n                        {key:\"title\", name:\"생산/납품\",formatter:ProductTitleFomatter, width:100, frozen:true},\n                        {key:\"carryforward\", name:\"전월 이월\", formatter: UnitContainer, unitData:\"EA\",frozen:true},\n                        {key:\"total\", name:\"합계\", formatter: UnitContainer, unitData: 'EA',width:100, frozen:true},\n                        ...result,\n                    ]);\n                    result = [];\n                }else{\n                    result = [];\n\n                }\n                break;\n                return\n            default :\n                break;\n                return\n        }\n\n        tmpRow = res.results.summaries\n\n\n        let tmpBasicRow_model = tmpRow.map((row: any, index: number) => {\n            let random_id = Math.random()*1000;\n                return {\n                    ...row,\n                    customer_id: row.product.raw_material.model.customer.name,\n                    cm_id:row.product.raw_material.model.model,\n                    model:row.product.raw_material.model.model,\n                    code:row.product.raw_material.code,\n                    name: row.product.raw_material.name,\n                    id: `product_${random_id}`,\n                }\n        })\n       tmpRow.map((row: any, index: number) => {\n                let random = Math.random()*1000;\n                let tmp_row_produced = {};\n                let tmp_row_shipped = {};\n                row.statistics.logs.map((log)=>{\n                    tmp_row_produced[log.date] = log.produced;\n                    tmp_row_shipped[log.date] = log.shipped;\n                })\n                tmp_row_produced[\"carryforward\"] = row.statistics.carryforward;\n                tmp_row_produced[\"total\"] = row.statistics.total_produced + row.statistics.carryforward;\n                tmp_row_shipped[\"total\"] = row.statistics.total_shipped;\n\n                tmpRow_date.push({\n                    title:\"생산\",\n                    id: `product_${random}`,\n                    ...tmp_row_produced\n                })\n\n                tmpRow_date.push({\n                    title:\"납품\",\n                    id: `product_${random+1}`,\n                    ...tmp_row_shipped\n                })\n        })\n\n\n        if(version === \"model\"){\n            setRowData([...tmpBasicRow_model])\n        }else if(version === \"date\"){\n            setDateData([...tmpRow_date]);\n        }\n    }\n\n    const downloadExcel = () => {\n        let tmpSelectList: boolean[] = []\n        let tmpSelectListData:any[] = []\n        rowData.map(row => {\n            tmpSelectList.push(selectList.has(row.id))\n            tmpSelectList.push(selectList.has(row.id))\n            // if(selectList.has(row.id)){\n            let sumProducedObject:any = {};\n            let sumShippedObject:any = {};\n            Object.keys(row).map((value)=>{\n                if(value === \"statistics\"){\n                    row[value].logs.map((data)=>{\n                        sumProducedObject[data.date] =  data.produced;\n                        sumShippedObject[data.date] = data.shipped;\n                    })\n                }else{\n                    sumProducedObject[value] = row[value];\n                }\n            })\n\n            sumProducedObject[\"title\"] = \"생산\";\n            sumProducedObject[\"carryforward\"] = row.statistics.carryforward;\n            sumProducedObject[\"total\"] = row.statistics.total_produced;\n\n            sumShippedObject[\"title\"] = \"납품\";\n            // sumShippedObject[\"carryforward\"] = row.statistics.carryforward;\n            sumShippedObject[\"total\"] = row.statistics.total_shipped;\n\n            tmpSelectListData.push(sumProducedObject);\n            tmpSelectListData.push(sumShippedObject);\n            // }\n        })\n        excelDownload([...column, ...dateColumn], tmpSelectListData, `${selectDate.from} ~ ${selectDate.to} 생산/납품 현황`, `${selectDate.from} ~ ${selectDate.to}`, tmpSelectList)\n    }\n    const buttonClickEvents = (number:number) => {\n        switch (number){\n            case 0:\n                downloadExcel()\n                return\n            default:\n                return\n        }\n    }\n\n    useEffect(()=>{\n        LoadData();\n    },[selectDate, keyword])\n\n    useEffect(()=>{\n        let modelWidth = 0;\n        column.map((v)=>{\n            modelWidth += v.width;\n        })\n        modelWidth += 36;\n        setExcelTableWidths({...excelTableWidths,data:1576-modelWidth, model:modelWidth})\n\n    },[column])\n    return(\n        <ScrollSync horizontal={false}>\n            <div style={{display:\"flex\"}}>\n                <MenuNavigation pageType={'MES'} subType={3}/>\n                <div style={{width:1576}}>\n                    <ProfileHeader/>\n                    <PageHeader\n                        title={\"생산/납품 현황\"}\n                        buttons={[\"엑셀로 받기\"]}\n                        buttonsOnclick={buttonClickEvents}\n                        isSearch={true}\n                        searchOptionList={[\"거래처\", \"모델\", \"CODE\", \"품명\"]}\n                        onChangeSearchOption={(option) => {\n\n                            setOptionIndex(option)\n                        }}\n                        isCalendar={true}\n                        searchKeyword={keyword}\n                        onChangeSearchKeyword={(keyword) => {\n                            if(keyword){\n                                router.push(`/mes/stock/productlist?page=1&keyword=${keyword}&opt=${optionIndex}`)\n                            }else{\n                                router.push(`/mes/stock/productlist?page=1&keyword=`)\n                            }\n                        }}\n                        calendarType={\"month\"}\n                        onChangeSelectDate={changeSelectDate}\n                        selectDate={selectMonth}\n                        setSelectDate={changeSelectMonth}\n                        optionIndex={optionIndex}\n                        dataLimit={true}\n                    />\n                    <div style={{display:\"flex\",justifyContent:\"center\"}}>\n                        <ScrollSyncPane>\n                            <ExcelTable headerList={[\n                                            SelectColumn,\n                                            ...column\n                                        ]}\n                                        setHeaderList={(value) => {\n                                            // value.splice(0,1);\n                                            value.map((v,i)=>{\n                                                if(v.name === \"\"){\n                                                    value.splice(i, 1);\n                                                }\n                                            })\n                                            setColumn([...value])\n                                        }}\n                                        selectList={selectList}\n                                        setSelectList={setSelectList}\n                                        row={rowData} setRow={setRowData} width={excelTableWidths.model} rowHeight={80} overflow={\"hidden\"}\n                                        resizable\n                            />\n                        </ScrollSyncPane>\n                        <ScrollSyncPane>\n                            <ExcelTable headerList={dateColumn} row={dateData} setRow={setRowData} maxWidth={excelTableWidths.data} rowHeight={40}   />\n                        </ScrollSyncPane>\n                    </div>\n                </div>\n            </div>\n        </ScrollSync>\n    );\n}\n\nexport const getServerSideProps = (ctx: NextPageContext) => {\n    return {\n        props: {\n            page: ctx.query.page ?? 1,\n            keyword: ctx.query.keyword ?? \"\",\n            option: ctx.query.opt ?? 0,\n        }\n    }\n}\n\n// Productlist.getInitialProps = async ({ query }) => {\n//     let { page, keyword, opt } = query\n//     if (typeof page === 'string')\n//         page = parseInt(page);\n//     if (typeof opt === 'string')\n//         opt = parseInt(opt);\n//     return { page, keyword, option: opt };\n// }\n\nexport default Productlist;\n"]},"metadata":{},"sourceType":"module"}