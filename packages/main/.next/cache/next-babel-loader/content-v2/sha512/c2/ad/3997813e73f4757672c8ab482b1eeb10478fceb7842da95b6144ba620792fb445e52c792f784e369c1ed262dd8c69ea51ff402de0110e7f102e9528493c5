{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/shared/src/components/InputBox/ExcelBasicInputBox.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Notiflix from 'notiflix';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { insert_machine_list } from \"../../reducer/machineSelect\";\n\nconst autoFocusAndSelect = input => {\n  input === null || input === void 0 ? void 0 : input.focus();\n  input === null || input === void 0 ? void 0 : input.select();\n};\n\nconst TextEditor = ({\n  row,\n  column,\n  onRowChange,\n  onClose\n}) => {\n  const dispatch = useDispatch();\n  const selector = useSelector(state => state.MachineSelectReducer);\n  return __jsx(\"input\", {\n    style: {\n      textAlign: 'center',\n      color: column.textType ? 'black' : 'white'\n    },\n    className: 'editCell',\n    ref: autoFocusAndSelect,\n    value: row[column.key],\n    onFocus: () => {\n      if (column.searchType === 'record' && row.osd_id) {\n        onClose(true);\n        Notiflix.Report.warning('수정할 수 없습니다.', '작업지시 고유 번호가 있으면 수정할 수 없습니다.', '확인');\n      }\n    },\n    onChange: event => {\n      if (column.key === 'mold_name') {\n        onRowChange(_objectSpread(_objectSpread({}, row), {}, {\n          [column.key]: event.target.value,\n          wip_name: event.target.value ? event.target.value + '-1' : undefined,\n          isChange: true\n        }));\n      } else if (column.key === \"goal\") {\n        onRowChange(_objectSpread(_objectSpread({}, row), {}, {\n          [column.key]: event.target.value,\n          isChange: true\n        }));\n\n        if (selector.selectRow === 1) {\n          selector.machineList.map((v, i) => {\n            if (i !== 0) {\n              v.goal = Number(event.target.value);\n            }\n          });\n        } else {\n          selector.machineList[selector.selectRow].goal = Number(event.target.value);\n        }\n\n        dispatch(insert_machine_list(_objectSpread({}, selector)));\n      } else {\n        onRowChange(_objectSpread(_objectSpread({}, row), {}, {\n          [column.key]: event.target.value,\n          isChange: true\n        }));\n      }\n    },\n    onBlur: () => onClose(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  });\n};\n\nexport { TextEditor };","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/shared/src/components/InputBox/ExcelBasicInputBox.tsx"],"names":["React","Notiflix","useDispatch","useSelector","insert_machine_list","autoFocusAndSelect","input","focus","select","TextEditor","row","column","onRowChange","onClose","dispatch","selector","state","MachineSelectReducer","textAlign","color","textType","key","searchType","osd_id","Report","warning","event","target","value","wip_name","undefined","isChange","selectRow","machineList","map","v","i","goal","Number"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react'\nimport {IExcelHeaderType} from '../../common/@types/type'\nimport Notiflix from 'notiflix'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootState} from \"../../reducer\";\nimport {insert_machine_list} from \"../../reducer/machineSelect\";\n\ninterface IProps {\n  row: any\n  column: IExcelHeaderType\n  onRowChange: (e: any) => void\n  onClose: (state: boolean) => void\n}\n\nconst autoFocusAndSelect = (input: HTMLInputElement | null) => {\n  input?.focus()\n  input?.select()\n}\n\nconst TextEditor = ({ row, column, onRowChange, onClose }: IProps) => {\n  const dispatch = useDispatch();\n  const selector = useSelector((state:RootState) => state.MachineSelectReducer);\n\n  return (\n    <input\n      style={{textAlign: 'center', color: column.textType ? 'black' : 'white' }}\n      className={'editCell'}\n      ref={autoFocusAndSelect}\n      value={row[column.key]}\n      onFocus={() => {\n        if(column.searchType === 'record' && row.osd_id){\n          onClose(true)\n          Notiflix.Report.warning('수정할 수 없습니다.', '작업지시 고유 번호가 있으면 수정할 수 없습니다.', '확인', )\n        }\n      }}\n      onChange={(event) => {\n        if(column.key === 'mold_name') {\n          onRowChange({\n            ...row,\n            [column.key]: event.target.value,\n            wip_name: event.target.value ? event.target.value+'-1' : undefined,\n            isChange: true\n          })\n        }else if(column.key === \"goal\"){\n          onRowChange({ ...row, [column.key]: event.target.value, isChange: true })\n          if(selector.selectRow === 1){\n            selector.machineList.map((v,i)=>{\n              if(i !== 0){\n                v.goal = Number(event.target.value)\n              }\n            })\n          }else{\n            selector.machineList[selector.selectRow].goal = Number(event.target.value);\n          }\n          dispatch(insert_machine_list({...selector}))\n        }else{\n          onRowChange({ ...row, [column.key]: event.target.value, isChange: true })\n        }\n      }}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n\nexport {TextEditor};\n"]},"metadata":{},"sourceType":"module"}