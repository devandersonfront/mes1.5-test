{"ast":null,"code":"import _toConsumableArray from \"/Users/user/Desktop/sizl/mono_pop/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/user/Desktop/sizl/mono_pop/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/user/Desktop/sizl/mono_pop/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/user/Desktop/sizl/mono_pop/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/mes/src/container/Operation/MesOperationRegister.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { ExcelTable, Header as PageHeader, RequestMethod, columnlist, excelDownload, PaginationComponent, ExcelDownloadModal } from 'shared'; // @ts-ignore\n\nimport { SelectColumn } from 'react-data-grid';\nimport Notiflix from \"notiflix\";\nimport { useRouter } from 'next/router';\nimport moment from 'moment';\n\nvar MesOperationRegister = function MesOperationRegister(_ref) {\n  _s();\n\n  var page = _ref.page,\n      keyword = _ref.keyword,\n      option = _ref.option;\n  var router = useRouter();\n\n  var _useState = useState(false),\n      excelOpen = _useState[0],\n      setExcelOpen = _useState[1];\n\n  var _useState2 = useState([{\n    name: \"\",\n    id: \"\",\n    start_date: moment().format('YYYY-MM-DD'),\n    limit_date: moment().format('YYYY-MM-DD')\n  }]),\n      basicRow = _useState2[0],\n      setBasicRow = _useState2[1];\n\n  var _useState3 = useState(columnlist[\"operationRegisterV2\"]),\n      column = _useState3[0],\n      setColumn = _useState3[1];\n\n  var _useState4 = useState(new Set()),\n      selectList = _useState4[0],\n      setSelectList = _useState4[1];\n\n  var _useState5 = useState(['고객사명', '모델명', 'CODE', '품명', '금형명']),\n      optionList = _useState5[0],\n      setOptionList = _useState5[1];\n\n  var _useState6 = useState(0),\n      optionIndex = _useState6[0],\n      setOptionIndex = _useState6[1];\n\n  var _useState7 = useState({\n    page: 1,\n    total: 1\n  }),\n      pageInfo = _useState7[0],\n      setPageInfo = _useState7[1]; // useEffect(() => {\n  //   setOptionIndex(option)\n  //   if(keyword){\n  //     SearchBasic(keyword, option, page).then(() => {\n  //       Notiflix.Loading.remove()\n  //     })\n  //   }else{\n  //     LoadBasic(page).then(() => {\n  //       Notiflix.Loading.remove()\n  //     })\n  //   }\n  // }, [page, keyword, option])\n\n\n  var loadAllSelectItems = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(column) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function loadAllSelectItems(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var SaveBasic = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function SaveBasic() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var LoadBasic = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(page) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              Notiflix.Loading.circle(); // const res = await RequestMethod('get', `moldList`,{\n              //   path: {\n              //     page: (page || page !== 0) ? page : 1,\n              //     renderItem: 18,\n              //   }\n              // })\n              //\n              // if(res && res.status === 200){\n              //   setPageInfo({\n              //     ...pageInfo,\n              //     page: res.results.page,\n              //     total: res.results.totalPages\n              //   })\n              //   cleanUpData(res)\n              // }else if (res.state === 401) {\n              //   Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n              //     router.back()\n              //   })\n              // }\n\n              Notiflix.Loading.remove();\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function LoadBasic(_x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var SearchBasic = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(keyword, option, isPaging) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              Notiflix.Loading.circle();\n\n              if (!isPaging) {\n                setOptionIndex(option);\n              }\n\n              _context4.next = 4;\n              return RequestMethod('get', \"moldSearch\", {\n                path: {\n                  page: isPaging !== null && isPaging !== void 0 ? isPaging : 1,\n                  renderItem: 18\n                },\n                params: {\n                  keyword: keyword !== null && keyword !== void 0 ? keyword : '',\n                  opt: option !== null && option !== void 0 ? option : 0\n                }\n              });\n\n            case 4:\n              res = _context4.sent;\n\n              if (res && res.status === 200) {\n                setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n                  page: res.results.page,\n                  total: res.results.totalPages\n                }));\n                cleanUpData(res);\n              }\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function SearchBasic(_x3, _x4, _x5) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var cleanUpData = function cleanUpData(res) {// let tmpColumn = columnlist[\"mold\"];\n    // let tmpRow = []\n    // tmpColumn = tmpColumn.map((column: any) => {\n    //   let menuData: object | undefined;\n    //   res.results.menus && res.results.menus.map((menu: any) => {\n    //     if(menu.colName === column.key){\n    //       menuData = {\n    //         id: menu.id,\n    //         name: menu.title,\n    //         width: menu.width,\n    //         tab:menu.tab,\n    //         unit:menu.unit\n    //       }\n    //     } else if(menu.colName === 'id' && column.key === 'tmpId'){\n    //       menuData = {\n    //         id: menu.id,\n    //         name: menu.title,\n    //         width: menu.width,\n    //         tab:menu.tab,\n    //         unit:menu.unit\n    //       }\n    //     }\n    //   })\n    //\n    //   if(menuData){\n    //     return {\n    //       ...column,\n    //       ...menuData\n    //     }\n    //   }\n    // }).filter((v:any) => v)\n    //\n    // let additionalMenus = res.results.menus ? res.results.menus.map((menu:any) => {\n    //   if(menu.colName === null){\n    //     return {\n    //       id: menu.id,\n    //       name: menu.title,\n    //       width: menu.width,\n    //       key: menu.title,\n    //       editor: TextEditor,\n    //       type: 'additional',\n    //       unit: menu.unit\n    //     }\n    //   }\n    // }).filter((v: any) => v) : []\n    //\n    //\n    // tmpRow = res.results.info_list\n    //\n    //\n    // loadAllSelectItems( [\n    //   ...tmpColumn,\n    //   ...additionalMenus\n    // ] )\n    //\n    //\n    // let selectKey = \"\"\n    // let additionalData: any[] = []\n    // tmpColumn.map((v: any) => {\n    //   if(v.selectList){\n    //     selectKey = v.key\n    //   }\n    // })\n    //\n    // additionalMenus.map((v: any) => {\n    //   if(v.type === 'additional'){\n    //     additionalData.push(v.key)\n    //   }\n    // })\n    //\n    // let pk = \"\";\n    // Object.keys(tmpRow).map((v) => {\n    //   if(v.indexOf('_id') !== -1){\n    //     pk = v\n    //   }\n    // })\n    //\n    // let tmpBasicRow = tmpRow.map((row: any, index: number) => {\n    //\n    //   let appendAdditional: any = {}\n    //\n    //   row.additional && row.additional.map((v: any) => {\n    //     appendAdditional = {\n    //       ...appendAdditional,\n    //       [v.title]: v.value\n    //     }\n    //   })\n    //\n    //   let random_id = Math.random()*1000;\n    //   return {\n    //     cm_id:(index === 0 || row.ppd.seq === 1) ? row.product.raw_material.model.model : undefined,\n    //     cm_idPK:row.product.raw_material.model.cm_id,\n    //     mold_id:row.mold_id,\n    //     mold_name:row.ppd.mold_name,\n    //     limit:row.limit,\n    //     inspect:row.inspect,\n    //     current:row.current,\n    //     customer_id: (index === 0 || row.ppd.seq === 1) ? row.product.raw_material.model.customer.name : undefined,\n    //     customer_idPK: row.product.raw_material.model.customer.customer_id,\n    //     code: (index === 0 || row.ppd.seq === 1) ? row.product.raw_material.code : undefined,\n    //     name: (index === 0 || row.ppd.seq === 1) ? row.product.raw_material.name : undefined,\n    //     seq: row.ppd.seq,\n    //     cavity: row.ppd.cavity,\n    //     spm: row.spm,\n    //     slideHeight: row.slideHeight,\n    //     process_id: row.ppd.process.name,\n    //     ...appendAdditional,\n    //     id: `mold_${random_id}`,\n    //   }\n    // })\n    //\n    // setBasicRow([...tmpBasicRow])\n  };\n\n  var downloadExcel = function downloadExcel() {\n    var tmpSelectList = [];\n    basicRow.map(function (row) {\n      tmpSelectList.push(selectList.has(row.id));\n    });\n    excelDownload(column, basicRow, \"mold\", \"mold\", tmpSelectList);\n  };\n\n  var onClickHeaderButton = function onClickHeaderButton(index) {\n    switch (index) {\n      case 0:\n        setExcelOpen(true);\n        break;\n\n      case 1:\n        router.push(\"/mes/item/manage/mold\");\n        break;\n\n      case 2:\n        SaveBasic();\n        break;\n    }\n  };\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 5\n    }\n  }, __jsx(PageHeader, {\n    title: \"작업지시서 등록\",\n    buttons: ['엑셀로 받기', '행추가', '저장하기', '삭제'],\n    buttonsOnclick: function buttonsOnclick() {} // onClickHeaderButton\n    ,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }\n  }), __jsx(ExcelTable, {\n    editable: true,\n    resizable: true,\n    headerList: [SelectColumn].concat(_toConsumableArray(column)),\n    row: basicRow // setRow={setBasicRow}\n    ,\n    setRow: function setRow(e) {\n      var tmp = selectList;\n      e.map(function (v) {\n        if (v.isChange) tmp.add(v.id);\n      });\n      setSelectList(tmp);\n      setBasicRow(e);\n    },\n    selectList: selectList //@ts-ignore\n    ,\n    setSelectList: setSelectList,\n    height: basicRow.length * 40 >= 40 * 18 + 56 ? 40 * 19 : basicRow.length * 40 + 56,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 7\n    }\n  }), __jsx(PaginationComponent, {\n    currentPage: pageInfo.page,\n    totalPage: pageInfo.total,\n    setPage: function setPage(page) {\n      if (keyword) {\n        router.push(\"/mes/basic/mold?page=\".concat(page, \"&keyword=\").concat(keyword, \"&opt=\").concat(option));\n      } else {\n        router.push(\"/mes/basic/mold?page=\".concat(page));\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }\n  }), __jsx(ExcelDownloadModal, {\n    isOpen: excelOpen,\n    column: column,\n    basicRow: basicRow,\n    filename: \"\\uAE08\\uD615\\uAE30\\uBCF8\\uC815\\uBCF4\",\n    sheetname: \"\\uAE08\\uD615\\uAE30\\uBCF8\\uC815\\uBCF4\",\n    selectList: selectList,\n    tab: 'ROLE_BASE_07',\n    setIsOpen: setExcelOpen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(MesOperationRegister, \"WeEC26uXKV0KpfCySGI2cIkPAK0=\", false, function () {\n  return [useRouter];\n});\n\n_c = MesOperationRegister;\nexport var getServerSideProps = function getServerSideProps(ctx) {\n  var _ctx$query$page, _ctx$query$keyword, _ctx$query$opt;\n\n  return {\n    props: {\n      page: (_ctx$query$page = ctx.query.page) !== null && _ctx$query$page !== void 0 ? _ctx$query$page : 1,\n      keyword: (_ctx$query$keyword = ctx.query.keyword) !== null && _ctx$query$keyword !== void 0 ? _ctx$query$keyword : \"\",\n      option: (_ctx$query$opt = ctx.query.opt) !== null && _ctx$query$opt !== void 0 ? _ctx$query$opt : 0\n    }\n  };\n};\nexport { MesOperationRegister };\n\nvar _c;\n\n$RefreshReg$(_c, \"MesOperationRegister\");","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/mes/src/container/Operation/MesOperationRegister.tsx"],"names":["React","useState","ExcelTable","Header","PageHeader","RequestMethod","columnlist","excelDownload","PaginationComponent","ExcelDownloadModal","SelectColumn","Notiflix","useRouter","moment","MesOperationRegister","page","keyword","option","router","excelOpen","setExcelOpen","name","id","start_date","format","limit_date","basicRow","setBasicRow","column","setColumn","Set","selectList","setSelectList","optionList","setOptionList","optionIndex","setOptionIndex","total","pageInfo","setPageInfo","loadAllSelectItems","SaveBasic","LoadBasic","Loading","circle","remove","SearchBasic","isPaging","path","renderItem","params","opt","res","status","results","totalPages","cleanUpData","downloadExcel","tmpSelectList","map","row","push","has","onClickHeaderButton","index","e","tmp","v","isChange","add","length","getServerSideProps","ctx","props","query"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {\n  ExcelTable,\n  Header as PageHeader,\n  RequestMethod,\n  columnlist,\n  MAX_VALUE,\n  DropDownEditor,\n  TextEditor,\n  excelDownload,\n  PaginationComponent,\n  ExcelDownloadModal,\n  IExcelHeaderType, IItemMenuType\n} from 'shared'\n// @ts-ignore\nimport {SelectColumn} from 'react-data-grid'\nimport Notiflix from \"notiflix\";\nimport {useRouter} from 'next/router'\nimport {loadAll} from 'react-cookies'\nimport {NextPageContext} from 'next'\nimport moment from 'moment'\n\ninterface IProps {\n  children?: any\n  page?: number\n  keyword?: string\n  option?: number\n}\n\nconst MesOperationRegister = ({page, keyword, option}: IProps) => {\n  const router = useRouter()\n\n  const [excelOpen, setExcelOpen] = useState<boolean>(false)\n\n  const [basicRow, setBasicRow] = useState<Array<any>>([{\n    name: \"\", id: \"\", start_date: moment().format('YYYY-MM-DD'),\n    limit_date: moment().format('YYYY-MM-DD')\n  }])\n  const [column, setColumn] = useState<Array<IExcelHeaderType>>( columnlist[\"operationRegisterV2\"])\n  const [selectList, setSelectList] = useState<Set<number>>(new Set())\n  const [optionList, setOptionList] = useState<string[]>(['고객사명','모델명', 'CODE', '품명', '금형명'])\n  const [optionIndex, setOptionIndex] = useState<number>(0)\n\n  const [pageInfo, setPageInfo] = useState<{page: number, total: number}>({\n    page: 1,\n    total: 1\n  })\n\n  // useEffect(() => {\n  //   setOptionIndex(option)\n  //   if(keyword){\n  //     SearchBasic(keyword, option, page).then(() => {\n  //       Notiflix.Loading.remove()\n  //     })\n  //   }else{\n  //     LoadBasic(page).then(() => {\n  //       Notiflix.Loading.remove()\n  //     })\n  //   }\n  // }, [page, keyword, option])\n\n\n  const loadAllSelectItems = async (column: IExcelHeaderType[]) => {\n    // let tmpColumn = column.map(async (v: any) => {\n    //   if(v.selectList && v.selectList.length === 0){\n    //     let tmpKey = v.key\n    //\n    //\n    //     let res: any\n    //     res = await RequestMethod('get', `${tmpKey}List`,{\n    //       path: {\n    //         page: 1,\n    //         renderItem: MAX_VALUE,\n    //       }\n    //     })\n    //\n    //\n    //     let pk = \"\";\n    //\n    //     res.results.info_list && res.results.info_list.length && Object.keys(res.results.info_list[0]).map((v) => {\n    //       if(v.indexOf('_id') !== -1){\n    //         pk = v\n    //       }\n    //     })\n    //     return {\n    //       ...v,\n    //       selectList: [...res.results.info_list.map((value: any) => {\n    //         return {\n    //           ...value,\n    //           name: tmpKey === 'model' ? value.model : value.name,\n    //           pk: value[pk]\n    //         }\n    //       })]\n    //     }\n    //\n    //   }else{\n    //     if(v.selectList){\n    //       return {\n    //         ...v,\n    //         pk: v.unit_id\n    //       }\n    //     }else{\n    //       return v\n    //     }\n    //   }\n    // })\n    //\n    // // if(type !== 'productprocess'){\n    // Promise.all(tmpColumn).then(res => {\n    //   setColumn([...res])\n    // })\n    // // }\n  }\n\n  const SaveBasic = async () => {\n    // let res: any\n    // res = await RequestMethod('post', `moldSave`,\n    //   {\n    //     ['molds']: basicRow.map((row, i) => {\n    //       if(selectList.has(row.id)){\n    //         let selectKey: string[] = []\n    //         let additional:any[] = []\n    //         column.map((v) => {\n    //           if(v.selectList){\n    //             selectKey.push(v.key)\n    //           }\n    //\n    //           if(v.type === 'additional'){\n    //             additional.push(v)\n    //           }\n    //         })\n    //\n    //         let selectData: any = {}\n    //\n    //         Object.keys(row).map(v => {\n    //           if(v.indexOf('PK') !== -1) {\n    //             selectData = {\n    //               ...selectData,\n    //               [v.split('PK')[0]]: row[v]\n    //             }\n    //           }\n    //\n    //           if(v === 'unitWeight') {\n    //             selectData = {\n    //               ...selectData,\n    //               unitWeight: Number(row['unitWeight'])\n    //             }\n    //           }\n    //\n    //           if(v === 'tmpId') {\n    //             selectData = {\n    //               ...selectData,\n    //               id: row['tmpId']\n    //             }\n    //           }\n    //         })\n    //\n    //         return {\n    //           ...row,\n    //           ...selectData,\n    //           additional: [\n    //             ...additional.map(v => {\n    //               if(row[v.name]) {\n    //                 return {\n    //                   id: v.id,\n    //                   title: v.name,\n    //                   value: row[v.name],\n    //                   unit: v.unit\n    //                 }\n    //               }\n    //             }).filter((v) => v)\n    //           ]\n    //         }\n    //\n    //       }\n    //     }).filter((v) => v)\n    //   })\n    //\n    //\n    // if(res){\n    //   if(res.status === 200){\n    //     Notiflix.Report.success('저장되었습니다.','','확인');\n    //     if(keyword){\n    //       SearchBasic(keyword, option, page).then(() => {\n    //         Notiflix.Loading.remove()\n    //       })\n    //     }else{\n    //       LoadBasic(page).then(() => {\n    //         Notiflix.Loading.remove()\n    //       })\n    //     }\n    //   }\n    // }\n  }\n\n\n  const LoadBasic = async (page?: number) => {\n    Notiflix.Loading.circle()\n    // const res = await RequestMethod('get', `moldList`,{\n    //   path: {\n    //     page: (page || page !== 0) ? page : 1,\n    //     renderItem: 18,\n    //   }\n    // })\n    //\n    // if(res && res.status === 200){\n    //   setPageInfo({\n    //     ...pageInfo,\n    //     page: res.results.page,\n    //     total: res.results.totalPages\n    //   })\n    //   cleanUpData(res)\n    // }else if (res.state === 401) {\n    //   Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n    //     router.back()\n    //   })\n    // }\n    Notiflix.Loading.remove()\n  }\n\n  const SearchBasic = async (keyword: any, option: number, isPaging?: number) => {\n    Notiflix.Loading.circle()\n    if(!isPaging){\n      setOptionIndex(option)\n    }\n    const res = await RequestMethod('get', `moldSearch`,{\n      path: {\n        page: isPaging ?? 1,\n        renderItem: 18,\n      },\n      params: {\n        keyword: keyword ?? '',\n        opt: option ?? 0\n      }\n    })\n\n    if(res && res.status === 200){\n      setPageInfo({\n        ...pageInfo,\n        page: res.results.page,\n        total: res.results.totalPages\n      })\n      cleanUpData(res)\n    }\n  }\n\n  const cleanUpData = (res: any) => {\n    // let tmpColumn = columnlist[\"mold\"];\n    // let tmpRow = []\n    // tmpColumn = tmpColumn.map((column: any) => {\n    //   let menuData: object | undefined;\n    //   res.results.menus && res.results.menus.map((menu: any) => {\n    //     if(menu.colName === column.key){\n    //       menuData = {\n    //         id: menu.id,\n    //         name: menu.title,\n    //         width: menu.width,\n    //         tab:menu.tab,\n    //         unit:menu.unit\n    //       }\n    //     } else if(menu.colName === 'id' && column.key === 'tmpId'){\n    //       menuData = {\n    //         id: menu.id,\n    //         name: menu.title,\n    //         width: menu.width,\n    //         tab:menu.tab,\n    //         unit:menu.unit\n    //       }\n    //     }\n    //   })\n    //\n    //   if(menuData){\n    //     return {\n    //       ...column,\n    //       ...menuData\n    //     }\n    //   }\n    // }).filter((v:any) => v)\n    //\n    // let additionalMenus = res.results.menus ? res.results.menus.map((menu:any) => {\n    //   if(menu.colName === null){\n    //     return {\n    //       id: menu.id,\n    //       name: menu.title,\n    //       width: menu.width,\n    //       key: menu.title,\n    //       editor: TextEditor,\n    //       type: 'additional',\n    //       unit: menu.unit\n    //     }\n    //   }\n    // }).filter((v: any) => v) : []\n    //\n    //\n    // tmpRow = res.results.info_list\n    //\n    //\n    // loadAllSelectItems( [\n    //   ...tmpColumn,\n    //   ...additionalMenus\n    // ] )\n    //\n    //\n    // let selectKey = \"\"\n    // let additionalData: any[] = []\n    // tmpColumn.map((v: any) => {\n    //   if(v.selectList){\n    //     selectKey = v.key\n    //   }\n    // })\n    //\n    // additionalMenus.map((v: any) => {\n    //   if(v.type === 'additional'){\n    //     additionalData.push(v.key)\n    //   }\n    // })\n    //\n    // let pk = \"\";\n    // Object.keys(tmpRow).map((v) => {\n    //   if(v.indexOf('_id') !== -1){\n    //     pk = v\n    //   }\n    // })\n    //\n    // let tmpBasicRow = tmpRow.map((row: any, index: number) => {\n    //\n    //   let appendAdditional: any = {}\n    //\n    //   row.additional && row.additional.map((v: any) => {\n    //     appendAdditional = {\n    //       ...appendAdditional,\n    //       [v.title]: v.value\n    //     }\n    //   })\n    //\n    //   let random_id = Math.random()*1000;\n    //   return {\n    //     cm_id:(index === 0 || row.ppd.seq === 1) ? row.product.raw_material.model.model : undefined,\n    //     cm_idPK:row.product.raw_material.model.cm_id,\n    //     mold_id:row.mold_id,\n    //     mold_name:row.ppd.mold_name,\n    //     limit:row.limit,\n    //     inspect:row.inspect,\n    //     current:row.current,\n    //     customer_id: (index === 0 || row.ppd.seq === 1) ? row.product.raw_material.model.customer.name : undefined,\n    //     customer_idPK: row.product.raw_material.model.customer.customer_id,\n    //     code: (index === 0 || row.ppd.seq === 1) ? row.product.raw_material.code : undefined,\n    //     name: (index === 0 || row.ppd.seq === 1) ? row.product.raw_material.name : undefined,\n    //     seq: row.ppd.seq,\n    //     cavity: row.ppd.cavity,\n    //     spm: row.spm,\n    //     slideHeight: row.slideHeight,\n    //     process_id: row.ppd.process.name,\n    //     ...appendAdditional,\n    //     id: `mold_${random_id}`,\n    //   }\n    // })\n    //\n    // setBasicRow([...tmpBasicRow])\n  }\n\n  const downloadExcel = () => {\n    let tmpSelectList: boolean[] = []\n    basicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id))\n    })\n    excelDownload(column, basicRow, `mold`, \"mold\", tmpSelectList)\n  }\n\n  const onClickHeaderButton = (index: number) => {\n    switch(index){\n      case 0:\n        setExcelOpen(true)\n        break;\n      case 1:\n\n        router.push(`/mes/item/manage/mold`)\n\n        break;\n      case 2:\n        SaveBasic()\n        break;\n    }\n  }\n\n  return (\n    <div>\n      <PageHeader\n        title={\"작업지시서 등록\"}\n        buttons={\n          ['엑셀로 받기', '행추가', '저장하기', '삭제']\n        }\n        buttonsOnclick={\n          () => {}\n          // onClickHeaderButton\n        }\n      />\n      <ExcelTable\n        editable\n        resizable\n        headerList={[\n          SelectColumn,\n          ...column\n        ]}\n        row={basicRow}\n        // setRow={setBasicRow}\n        setRow={(e) => {\n          let tmp: Set<any> = selectList\n          e.map(v => {\n            if(v.isChange) tmp.add(v.id)\n          })\n          setSelectList(tmp)\n          setBasicRow(e)\n        }}\n        selectList={selectList}\n        //@ts-ignore\n        setSelectList={setSelectList}\n        height={basicRow.length * 40 >= 40*18+56 ? 40*19 : basicRow.length * 40 + 56}\n      />\n      <PaginationComponent\n        currentPage={pageInfo.page}\n        totalPage={pageInfo.total}\n        setPage={(page) => {\n          if(keyword){\n            router.push(`/mes/basic/mold?page=${page}&keyword=${keyword}&opt=${option}`)\n          }else{\n            router.push(`/mes/basic/mold?page=${page}`)\n          }\n        }}\n      />\n      <ExcelDownloadModal\n        isOpen={excelOpen}\n        column={column}\n        basicRow={basicRow}\n        filename={`금형기본정보`}\n        sheetname={`금형기본정보`}\n        selectList={selectList}\n        tab={'ROLE_BASE_07'}\n        setIsOpen={setExcelOpen}\n      />\n    </div>\n  );\n}\n\nexport const getServerSideProps = (ctx: NextPageContext) => {\n  return {\n    props: {\n      page: ctx.query.page ?? 1,\n      keyword: ctx.query.keyword ?? \"\",\n      option: ctx.query.opt ?? 0,\n    }\n  }\n}\n\nexport {MesOperationRegister};\n"]},"metadata":{},"sourceType":"module"}