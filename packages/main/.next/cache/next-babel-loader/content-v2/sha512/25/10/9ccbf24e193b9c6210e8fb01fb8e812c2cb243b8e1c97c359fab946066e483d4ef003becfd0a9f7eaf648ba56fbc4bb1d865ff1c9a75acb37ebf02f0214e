{"ast":null,"code":"import _regeneratorRuntime from \"/Users/user/Desktop/sizl/mono_pop/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/user/Desktop/sizl/mono_pop/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/user/Desktop/sizl/mono_pop/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/user/Desktop/sizl/mono_pop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/basic/customer/index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport ExcelTable from '../../../../component/Excel/ExcelTable';\nimport MenuNavigation from '../../../../component/MenuNav/MenuNavigation';\nimport ProfileHeader from '../../../../component/Profile/ProfileHeader';\nimport PageHeader from '../../../../component/Header/Header'; // @ts-ignore\n\nimport { SelectColumn } from 'react-data-grid';\nimport { RequestMethod } from '../../../../common/RequestFunctions';\nimport { columnlist } from \"../../../../common/columnInit\";\nimport Notiflix from \"notiflix\";\nimport { useRouter } from 'next/router';\nimport TextEditor from '../../../../component/InputBox/ExcelBasicInputBox';\nimport { excelDownload } from '../../../../common/excelDownloadFunction';\nimport PaginationComponent from '../../../../component/Pagination/PaginationComponent';\nimport ExcelDownloadModal from '../../../../component/Modal/ExcelDownloadMoadal';\nimport ExcelUploadModal from \"../../../../component/Modal/ExcelUploadModal\";\n\nvar BasicContainer = function BasicContainer(_ref) {\n  _s();\n\n  var page = _ref.page,\n      keyword = _ref.keyword,\n      option = _ref.option;\n  var router = useRouter();\n\n  var _useState = useState(false),\n      excelOpen = _useState[0],\n      setExcelOpen = _useState[1];\n\n  var _useState2 = useState(false),\n      excelUploadOpen = _useState2[0],\n      setExcelUploadOpen = _useState2[1];\n\n  var _useState3 = useState([{\n    name: \"\",\n    id: \"\"\n  }]),\n      basicRow = _useState3[0],\n      setBasicRow = _useState3[1];\n\n  var _useState4 = useState(columnlist[\"customer\"]),\n      column = _useState4[0],\n      setColumn = _useState4[1];\n\n  var _useState5 = useState(new Set()),\n      selectList = _useState5[0],\n      setSelectList = _useState5[1];\n\n  var _useState6 = useState(['고객사명', '대표자명', '담당자명', '전화 번호', '휴대폰 번호', '팩스 번호', '주소', '사업자 번호']),\n      optionList = _useState6[0],\n      setOptionList = _useState6[1];\n\n  var _useState7 = useState(option),\n      optionIndex = _useState7[0],\n      setOptionIndex = _useState7[1];\n\n  var _useState8 = useState({\n    page: 1,\n    total: 1\n  }),\n      pageInfo = _useState8[0],\n      setPageInfo = _useState8[1];\n\n  useEffect(function () {\n    if (keyword) {\n      SearchBasic(keyword, option, page).then(function () {\n        Notiflix.Loading.remove();\n      });\n    } else {\n      LoadBasic(page).then(function () {\n        Notiflix.Loading.remove();\n      }).then(function () {\n        Notiflix.Loading.remove();\n      });\n    }\n  }, [page, keyword, option]);\n\n  var SaveBasic = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return RequestMethod('post', \"customerSave\", _defineProperty({}, 'customers', basicRow.map(function (row, i) {\n                if (selectList.has(row.id)) {\n                  var selectKey = [];\n                  var additional = [];\n                  column.map(function (v) {\n                    if (v.selectList) {\n                      selectKey.push(v.key);\n                    }\n\n                    if (v.type === 'additional') {\n                      additional.push(v);\n                    }\n                  });\n                  var selectData = {};\n                  Object.keys(row).map(function (v) {\n                    if (v.indexOf('PK') !== -1) {\n                      selectData = _objectSpread(_objectSpread({}, selectData), {}, _defineProperty({}, v.split('PK')[0], row[v]));\n                    }\n\n                    if (v === 'unitWeight') {\n                      selectData = _objectSpread(_objectSpread({}, selectData), {}, {\n                        unitWeight: Number(row['unitWeight'])\n                      });\n                    }\n\n                    if (v === 'tmpId') {\n                      selectData = _objectSpread(_objectSpread({}, selectData), {}, {\n                        id: row['tmpId']\n                      });\n                    }\n                  });\n                  return _objectSpread(_objectSpread(_objectSpread({}, row), selectData), {}, {\n                    additional: _toConsumableArray(additional.map(function (v) {\n                      if (row[v.name]) {\n                        return {\n                          id: v.id,\n                          title: v.name,\n                          value: row[v.name],\n                          unit: v.unit\n                        };\n                      }\n                    }).filter(function (v) {\n                      return v;\n                    }))\n                  });\n                }\n              }).filter(function (v) {\n                return v;\n              })));\n\n            case 2:\n              res = _context.sent;\n\n              if (res) {\n                if (res.status === 200) {\n                  Notiflix.Report.success('저장되었습니다.', '', '확인');\n\n                  if (keyword) {\n                    SearchBasic(keyword, option, page).then(function () {\n                      Notiflix.Loading.remove();\n                    });\n                  } else {\n                    LoadBasic(page).then(function () {\n                      Notiflix.Loading.remove();\n                    });\n                  }\n                }\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function SaveBasic() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var DeleteBasic = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return RequestMethod('delete', \"customerDelete\", _defineProperty({}, 'customers', basicRow.map(function (row, i) {\n                if (selectList.has(row.id)) {\n                  var pk = \"\";\n                  Object.keys(row).map(function (v) {\n                    if (v.indexOf(\"_id\") !== -1) {\n                      pk = v;\n                    }\n                  });\n                  return row[pk];\n                }\n              }).filter(function (v) {\n                return v;\n              })));\n\n            case 2:\n              res = _context2.sent;\n\n              if (res) {\n                if (res.status === 200) {\n                  Notiflix.Report.success('삭제 성공!', '', '확인', function () {\n                    if (Number(page) === 1) {\n                      LoadBasic(1).then(function () {\n                        Notiflix.Loading.remove();\n                      });\n                    } else {\n                      if (keyword) {\n                        router.push(\"/mes/basic/customer?page=1&keyword=\".concat(keyword, \"&opt=\").concat(option));\n                      } else {\n                        router.push(\"/mes/basic/customer?page=1\");\n                      }\n                    }\n                  });\n                }\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function DeleteBasic() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var LoadBasic = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(page) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              Notiflix.Loading.circle();\n              _context3.next = 3;\n              return RequestMethod('get', \"customerList\", {\n                path: {\n                  page: page || page !== 0 ? page : 1,\n                  renderItem: 18\n                }\n              });\n\n            case 3:\n              res = _context3.sent;\n\n              if (res && res.status === 200) {\n                if (res.results.totalPages < page) {\n                  LoadBasic(page - 1);\n                } else {\n                  setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n                    page: res.results.page,\n                    total: res.results.totalPages\n                  }));\n                  cleanUpData(res);\n                }\n              } else if (res.state === 401) {\n                Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', function () {\n                  router.back();\n                });\n              }\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function LoadBasic(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var SearchBasic = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(keyword, option, isPaging) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              Notiflix.Loading.circle();\n\n              if (!isPaging) {\n                setOptionIndex(option);\n              }\n\n              _context4.next = 4;\n              return RequestMethod('get', \"customerSearch\", {\n                path: {\n                  page: isPaging !== null && isPaging !== void 0 ? isPaging : 1,\n                  renderItem: 18\n                },\n                params: {\n                  keyword: keyword !== null && keyword !== void 0 ? keyword : '',\n                  opt: option !== null && option !== void 0 ? option : 0\n                }\n              });\n\n            case 4:\n              res = _context4.sent;\n\n              if (res && res.status === 200) {\n                setPageInfo(_objectSpread(_objectSpread({}, pageInfo), {}, {\n                  page: res.results.page,\n                  total: res.results.totalPages\n                }));\n                cleanUpData(res);\n              }\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function SearchBasic(_x2, _x3, _x4) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var cleanUpBasicData = function cleanUpBasicData(res) {\n    var tmpRow = res.data.results.info_list;\n    var tmpBasicRow = tmpRow.map(function (row, index) {\n      var appendAdditional = {};\n      row.additional && row.additional.map(function (v) {\n        appendAdditional = _objectSpread(_objectSpread({}, appendAdditional), {}, _defineProperty({}, v.title, v.value));\n      });\n      var random_id = Math.random() * 1000;\n      return _objectSpread(_objectSpread(_objectSpread({}, row), {}, {\n        customer_id: row.customer_id,\n        name: row.name,\n        rep: row.rep,\n        telephone: row.telephone,\n        manager: row.manager,\n        cellphone: row.cellphone,\n        fax: row.fax,\n        photo: row.photo,\n        crn: row.crn,\n        address: row.address,\n        password: '-'\n      }, appendAdditional), {}, {\n        id: \"customer_\".concat(random_id)\n      });\n    });\n    setBasicRow(_toConsumableArray(tmpBasicRow));\n  };\n\n  var cleanUpData = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(res) {\n      var tmpColumn, tmpRow, additionalMenus, selectKey, additionalData, pk, tmpBasicRow;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              tmpColumn = columnlist[\"customer\"];\n              tmpRow = [];\n              tmpColumn = tmpColumn.map(function (column) {\n                var menuData;\n                res.results.menus && res.results.menus.map(function (menu) {\n                  if (menu.colName === column.key) {\n                    menuData = {\n                      id: menu.id,\n                      name: menu.title,\n                      width: menu.width,\n                      tab: menu.tab,\n                      unit: menu.unit,\n                      moddable: !menu.moddable\n                    };\n                  } else if (menu.colName === 'id' && column.key === 'tmpId') {\n                    menuData = {\n                      id: menu.id,\n                      name: menu.title,\n                      width: menu.width,\n                      tab: menu.tab,\n                      unit: menu.unit,\n                      moddable: !menu.moddable\n                    };\n                  }\n                });\n\n                if (menuData) {\n                  return _objectSpread(_objectSpread({}, column), menuData);\n                }\n              }).filter(function (v) {\n                return v;\n              });\n              additionalMenus = res.results.menus ? res.results.menus.map(function (menu) {\n                if (menu.colName === null) {\n                  return {\n                    id: menu.id,\n                    name: menu.title,\n                    width: menu.width,\n                    key: menu.title,\n                    editor: TextEditor,\n                    type: 'additional',\n                    unit: menu.unit\n                  };\n                }\n              }).filter(function (v) {\n                return v;\n              }) : [];\n              tmpRow = res.results.info_list;\n              selectKey = \"\";\n              additionalData = [];\n              tmpColumn.map(function (v) {\n                if (v.selectList) {\n                  selectKey = v.key;\n                }\n              });\n              additionalMenus.map(function (v) {\n                if (v.type === 'additional') {\n                  additionalData.push(v.key);\n                }\n              });\n              setColumn([].concat(_toConsumableArray(tmpColumn.map(function (v) {\n                return _objectSpread(_objectSpread({}, v), {}, {\n                  name: v.moddable ? v.name + '(필수)' : v.name\n                });\n              })), _toConsumableArray(additionalMenus)));\n              pk = \"\";\n              Object.keys(tmpRow).map(function (v) {\n                if (v.indexOf('_id') !== -1) {\n                  pk = v;\n                }\n              });\n              tmpBasicRow = tmpRow.map(function (row, index) {\n                var appendAdditional = {};\n                row.additional && row.additional.map(function (v) {\n                  appendAdditional = _objectSpread(_objectSpread({}, appendAdditional), {}, _defineProperty({}, v.title, v.value));\n                });\n                var random_id = Math.random() * 1000;\n                return _objectSpread(_objectSpread(_objectSpread({}, row), {}, {\n                  customer_id: row.customer_id,\n                  name: row.name,\n                  rep: row.rep,\n                  telephone: row.telephone,\n                  manager: row.manager,\n                  cellphone: row.cellphone,\n                  fax: row.fax,\n                  photo: row.photo,\n                  crn: row.crn,\n                  address: row.address,\n                  password: '-'\n                }, appendAdditional), {}, {\n                  id: \"customer_\".concat(random_id)\n                });\n              });\n              setBasicRow(_toConsumableArray(tmpBasicRow));\n\n            case 14:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function cleanUpData(_x5) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  var downloadExcel = function downloadExcel() {\n    var tmpSelectList = [];\n    basicRow.map(function (row) {\n      tmpSelectList.push(selectList.has(row.id));\n    });\n    excelDownload(column, basicRow, \"customer\", \"customer\", tmpSelectList);\n  };\n\n  var onClickHeaderButton = function onClickHeaderButton(index) {\n    switch (index) {\n      case 0:\n        setExcelUploadOpen(true);\n        break;\n\n      case 1:\n        setExcelOpen(true);\n        break;\n\n      case 2:\n        router.push(\"/mes/item/manage/customer\");\n        break;\n\n      case 3:\n        var items = {};\n        var random_id = Math.random() * 1000;\n        column.map(function (value) {\n          if (value.selectList && value.selectList.length) {\n            var _objectSpread5;\n\n            items = _objectSpread(_objectSpread({}, value.selectList[0]), {}, (_objectSpread5 = {}, _defineProperty(_objectSpread5, value.key, value.selectList[0].name), _defineProperty(_objectSpread5, value.key + 'PK', value.selectList[0].pk), _objectSpread5), items);\n          }\n        });\n        setBasicRow([_objectSpread(_objectSpread({}, items), {}, {\n          id: \"customer_\".concat(random_id),\n          name: null,\n          additional: []\n        })].concat(_toConsumableArray(basicRow)));\n        break;\n\n      case 4:\n        SaveBasic();\n        break;\n\n      case 5:\n        Notiflix.Confirm.show(\"경고\", \"삭제하시겠습니까?\", \"확인\", \"취소\", function () {\n          DeleteBasic();\n        }, function () {});\n        break;\n    }\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 9\n    }\n  }, __jsx(MenuNavigation, {\n    pageType: 'BASIC',\n    subType: 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    style: {\n      paddingBottom: 40\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 13\n    }\n  }, __jsx(ProfileHeader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 17\n    }\n  }), __jsx(PageHeader, {\n    isSearch: true,\n    searchKeyword: keyword,\n    onChangeSearchKeyword: function onChangeSearchKeyword(keyword) {\n      if (keyword) {\n        router.push(\"/mes/basic/customer?page=1&keyword=\".concat(keyword, \"&opt=\").concat(optionIndex));\n      } else {\n        router.push(\"/mes/basic/customer?page=1&keyword=\");\n      }\n    },\n    searchOptionList: optionList,\n    onChangeSearchOption: function onChangeSearchOption(option) {\n      setOptionIndex(option);\n    },\n    optionIndex: optionIndex,\n    title: \"고객사 정보 관리\",\n    buttons: [\"엑셀로 등록\", '엑셀로 받기', '항목관리', '행 추가', '저장하기', '삭제'],\n    buttonsOnclick: onClickHeaderButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 17\n    }\n  }), __jsx(ExcelTable, {\n    editable: true,\n    resizable: true,\n    headerList: [SelectColumn].concat(_toConsumableArray(column)),\n    row: basicRow // setRow={setBasicRow}\n    ,\n    setRow: function setRow(e) {\n      var tmp = selectList;\n      e.map(function (v) {\n        if (v.isChange) tmp.add(v.id);\n      });\n      setSelectList(tmp);\n      setBasicRow(e);\n    },\n    selectList: selectList //@ts-ignore\n    ,\n    setSelectList: setSelectList,\n    height: basicRow.length * 40 >= 40 * 18 + 56 ? 40 * 19 : basicRow.length * 40 + 56,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 17\n    }\n  }), __jsx(PaginationComponent, {\n    currentPage: pageInfo.page,\n    totalPage: pageInfo.total,\n    setPage: function setPage(page) {\n      if (keyword) {\n        router.push(\"/mes/basic/customer?page=\".concat(page, \"&keyword=\").concat(keyword, \"&opt=\").concat(option));\n      } else {\n        router.push(\"/mes/basic/customer?page=\".concat(page));\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 17\n    }\n  })), __jsx(ExcelDownloadModal, {\n    isOpen: excelOpen,\n    column: column,\n    basicRow: basicRow,\n    filename: \"\\uACE0\\uAC1D\\uC0AC\\uC815\\uBCF4\\uAD00\\uB9AC\",\n    sheetname: \"\\uACE0\\uAC1D\\uC0AC\\uC815\\uBCF4\\uAD00\\uB9AC\",\n    selectList: selectList,\n    tab: 'ROLE_BASE_01',\n    setIsOpen: setExcelOpen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 13\n    }\n  }), __jsx(ExcelUploadModal, {\n    isOpen: excelUploadOpen,\n    setIsOpen: setExcelUploadOpen,\n    tab: 'ROLE_BASE_01',\n    cleanUpBasicData: cleanUpBasicData,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 13\n    }\n  }));\n};\n\n_s(BasicContainer, \"fJu6zwoekK90R4yKP9+37FS9D8A=\", false, function () {\n  return [useRouter];\n});\n\n_c = BasicContainer;\n// BasicContainer.getInitialProps = async ({ query }) => {\n//     let { page, keyword, opt } = query\n//     if (typeof page === 'string')\n//         page = parseInt(page);\n//     if (typeof opt === 'string')\n//         opt = parseInt(opt);\n//     return { page, keyword, option: opt };\n// }\nexport var __N_SSP = true;\nexport default BasicContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"BasicContainer\");","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/basic/customer/index.tsx"],"names":["React","useEffect","useState","ExcelTable","MenuNavigation","ProfileHeader","PageHeader","SelectColumn","RequestMethod","columnlist","Notiflix","useRouter","TextEditor","excelDownload","PaginationComponent","ExcelDownloadModal","ExcelUploadModal","BasicContainer","page","keyword","option","router","excelOpen","setExcelOpen","excelUploadOpen","setExcelUploadOpen","name","id","basicRow","setBasicRow","column","setColumn","Set","selectList","setSelectList","optionList","setOptionList","optionIndex","setOptionIndex","total","pageInfo","setPageInfo","SearchBasic","then","Loading","remove","LoadBasic","SaveBasic","map","row","i","has","selectKey","additional","v","push","key","type","selectData","Object","keys","indexOf","split","unitWeight","Number","title","value","unit","filter","res","status","Report","success","DeleteBasic","pk","circle","path","renderItem","results","totalPages","cleanUpData","state","failure","back","isPaging","params","opt","cleanUpBasicData","tmpRow","data","info_list","tmpBasicRow","index","appendAdditional","random_id","Math","random","customer_id","rep","telephone","manager","cellphone","fax","photo","crn","address","password","tmpColumn","menuData","menus","menu","colName","width","tab","moddable","additionalMenus","editor","additionalData","downloadExcel","tmpSelectList","onClickHeaderButton","items","length","Confirm","show","display","paddingBottom","e","tmp","isChange","add"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,UAAP,MAAuB,wCAAvB;AACA,OAAOC,cAAP,MAA2B,8CAA3B;AACA,OAAOC,aAAP,MAA0B,6CAA1B;AACA,OAAOC,UAAP,MAAuB,qCAAvB,C,CACA;;AACA,SAAQC,YAAR,QAA2B,iBAA3B;AACA,SAAQC,aAAR,QAA4B,qCAA5B;AACA,SAAQC,UAAR,QAAyB,+BAAzB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAAQC,SAAR,QAAwB,aAAxB;AAGA,OAAOC,UAAP,MAAuB,mDAAvB;AACA,SAAQC,aAAR,QAA4B,0CAA5B;AAGA,OAAOC,mBAAP,MAAgC,sDAAhC;AAEA,OAAOC,kBAAP,MAA+B,iDAA/B;AACA,OAAOC,gBAAP,MAA6B,8CAA7B;;AAUA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,OAAqC;AAAA;;AAAA,MAAnCC,IAAmC,QAAnCA,IAAmC;AAAA,MAA7BC,OAA6B,QAA7BA,OAA6B;AAAA,MAApBC,MAAoB,QAApBA,MAAoB;AACxD,MAAMC,MAAM,GAAGV,SAAS,EAAxB;;AADwD,kBAGtBT,QAAQ,CAAU,KAAV,CAHc;AAAA,MAGjDoB,SAHiD;AAAA,MAGtCC,YAHsC;;AAAA,mBAIVrB,QAAQ,CAAU,KAAV,CAJE;AAAA,MAIjDsB,eAJiD;AAAA,MAIhCC,kBAJgC;;AAAA,mBAKxBvB,QAAQ,CAAa,CAAC;AAClDwB,IAAAA,IAAI,EAAE,EAD4C;AACxCC,IAAAA,EAAE,EAAE;AADoC,GAAD,CAAb,CALgB;AAAA,MAKjDC,QALiD;AAAA,MAKvCC,WALuC;;AAAA,mBAQ5B3B,QAAQ,CAA0BO,UAAU,CAAC,UAAD,CAApC,CARoB;AAAA,MAQjDqB,MARiD;AAAA,MAQzCC,SARyC;;AAAA,mBASpB7B,QAAQ,CAAc,IAAI8B,GAAJ,EAAd,CATY;AAAA,MASjDC,UATiD;AAAA,MASrCC,aATqC;;AAAA,mBAUpBhC,QAAQ,CAAW,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,OAAzB,EAAiC,QAAjC,EAA2C,OAA3C,EAAoD,IAApD,EAA0D,QAA1D,CAAX,CAVY;AAAA,MAUjDiC,UAViD;AAAA,MAUrCC,aAVqC;;AAAA,mBAWlBlC,QAAQ,CAASkB,MAAT,CAXU;AAAA,MAWjDiB,WAXiD;AAAA,MAWpCC,cAXoC;;AAAA,mBAaxBpC,QAAQ,CAAgC;AACpEgB,IAAAA,IAAI,EAAE,CAD8D;AAEpEqB,IAAAA,KAAK,EAAE;AAF6D,GAAhC,CAbgB;AAAA,MAajDC,QAbiD;AAAA,MAavCC,WAbuC;;AAkBxDxC,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAGkB,OAAH,EAAW;AACPuB,MAAAA,WAAW,CAACvB,OAAD,EAAUC,MAAV,EAAkBF,IAAlB,CAAX,CAAmCyB,IAAnC,CAAwC,YAAM;AAC1CjC,QAAAA,QAAQ,CAACkC,OAAT,CAAiBC,MAAjB;AACH,OAFD;AAGH,KAJD,MAIK;AACDC,MAAAA,SAAS,CAAC5B,IAAD,CAAT,CAAgByB,IAAhB,CAAqB,YAAM;AACvBjC,QAAAA,QAAQ,CAACkC,OAAT,CAAiBC,MAAjB;AACH,OAFD,EAEGF,IAFH,CAEQ,YAAM;AACVjC,QAAAA,QAAQ,CAACkC,OAAT,CAAiBC,MAAjB;AACH,OAJD;AAKH;AACJ,GAZQ,EAYN,CAAC3B,IAAD,EAAOC,OAAP,EAAgBC,MAAhB,CAZM,CAAT;;AAcA,MAAM2B,SAAS;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEEvC,aAAa,CAAC,MAAD,sCAEf,WAFe,EAEDoB,QAAQ,CAACoB,GAAT,CAAa,UAACC,GAAD,EAAMC,CAAN,EAAY;AACrC,oBAAGjB,UAAU,CAACkB,GAAX,CAAeF,GAAG,CAACtB,EAAnB,CAAH,EAA0B;AACtB,sBAAIyB,SAAmB,GAAG,EAA1B;AACA,sBAAIC,UAAgB,GAAG,EAAvB;AACAvB,kBAAAA,MAAM,CAACkB,GAAP,CAAW,UAACM,CAAD,EAAO;AACd,wBAAGA,CAAC,CAACrB,UAAL,EAAgB;AACZmB,sBAAAA,SAAS,CAACG,IAAV,CAAeD,CAAC,CAACE,GAAjB;AACH;;AAED,wBAAGF,CAAC,CAACG,IAAF,KAAW,YAAd,EAA2B;AACvBJ,sBAAAA,UAAU,CAACE,IAAX,CAAgBD,CAAhB;AACH;AACJ,mBARD;AAUA,sBAAII,UAAe,GAAG,EAAtB;AAEAC,kBAAAA,MAAM,CAACC,IAAP,CAAYX,GAAZ,EAAiBD,GAAjB,CAAqB,UAAAM,CAAC,EAAI;AACtB,wBAAGA,CAAC,CAACO,OAAF,CAAU,IAAV,MAAoB,CAAC,CAAxB,EAA2B;AACvBH,sBAAAA,UAAU,mCACHA,UADG,2BAELJ,CAAC,CAACQ,KAAF,CAAQ,IAAR,EAAc,CAAd,CAFK,EAEcb,GAAG,CAACK,CAAD,CAFjB,EAAV;AAIH;;AAED,wBAAGA,CAAC,KAAK,YAAT,EAAuB;AACnBI,sBAAAA,UAAU,mCACHA,UADG;AAENK,wBAAAA,UAAU,EAAEC,MAAM,CAACf,GAAG,CAAC,YAAD,CAAJ;AAFZ,wBAAV;AAIH;;AAED,wBAAGK,CAAC,KAAK,OAAT,EAAkB;AACdI,sBAAAA,UAAU,mCACHA,UADG;AAEN/B,wBAAAA,EAAE,EAAEsB,GAAG,CAAC,OAAD;AAFD,wBAAV;AAIH;AACJ,mBArBD;AAuBA,uEACOA,GADP,GAEOS,UAFP;AAGIL,oBAAAA,UAAU,qBACHA,UAAU,CAACL,GAAX,CAAe,UAAAM,CAAC,EAAI;AACnB,0BAAGL,GAAG,CAACK,CAAC,CAAC5B,IAAH,CAAN,EAAgB;AACZ,+BAAO;AACHC,0BAAAA,EAAE,EAAE2B,CAAC,CAAC3B,EADH;AAEHsC,0BAAAA,KAAK,EAAEX,CAAC,CAAC5B,IAFN;AAGHwC,0BAAAA,KAAK,EAAEjB,GAAG,CAACK,CAAC,CAAC5B,IAAH,CAHP;AAIHyC,0BAAAA,IAAI,EAAEb,CAAC,CAACa;AAJL,yBAAP;AAMH;AACJ,qBATE,EASAC,MATA,CASO,UAACd,CAAD;AAAA,6BAAOA,CAAP;AAAA,qBATP,CADG;AAHd;AAiBH;AACJ,eAzDe,EAyDbc,MAzDa,CAyDN,UAACd,CAAD;AAAA,uBAAOA,CAAP;AAAA,eAzDM,CAFC,EAFf;;AAAA;AAEVe,cAAAA,GAFU;;AAiEd,kBAAGA,GAAH,EAAO;AACH,oBAAGA,GAAG,CAACC,MAAJ,KAAe,GAAlB,EAAsB;AAClB5D,kBAAAA,QAAQ,CAAC6D,MAAT,CAAgBC,OAAhB,CAAwB,UAAxB,EAAmC,EAAnC,EAAsC,IAAtC;;AACA,sBAAGrD,OAAH,EAAW;AACPuB,oBAAAA,WAAW,CAACvB,OAAD,EAAUC,MAAV,EAAkBF,IAAlB,CAAX,CAAmCyB,IAAnC,CAAwC,YAAM;AAC1CjC,sBAAAA,QAAQ,CAACkC,OAAT,CAAiBC,MAAjB;AACH,qBAFD;AAGH,mBAJD,MAIK;AACDC,oBAAAA,SAAS,CAAC5B,IAAD,CAAT,CAAgByB,IAAhB,CAAqB,YAAM;AACvBjC,sBAAAA,QAAQ,CAACkC,OAAT,CAAiBC,MAAjB;AACH,qBAFD;AAGH;AACJ;AACJ;;AA9Ea;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATE,SAAS;AAAA;AAAA;AAAA,KAAf;;AAiFA,MAAM0B,WAAW;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACEjE,aAAa,CAAC,QAAD,wCAErB,WAFqB,EAEPoB,QAAQ,CAACoB,GAAT,CAAa,UAACC,GAAD,EAAMC,CAAN,EAAY;AACrC,oBAAGjB,UAAU,CAACkB,GAAX,CAAeF,GAAG,CAACtB,EAAnB,CAAH,EAA0B;AAClB,sBAAI+C,EAAE,GAAG,EAAT;AACAf,kBAAAA,MAAM,CAACC,IAAP,CAAYX,GAAZ,EAAiBD,GAAjB,CAAqB,UAACM,CAAD,EAAc;AAC/B,wBAAGA,CAAC,CAACO,OAAF,CAAU,KAAV,MAAqB,CAAC,CAAzB,EAA2B;AACvBa,sBAAAA,EAAE,GAAGpB,CAAL;AACH;AACJ,mBAJD;AAKA,yBAAOL,GAAG,CAACyB,EAAD,CAAV;AACP;AACJ,eAVe,EAUbN,MAVa,CAUN,UAACd,CAAD;AAAA,uBAAOA,CAAP;AAAA,eAVM,CAFO,EADf;;AAAA;AACVe,cAAAA,GADU;;AAgBhB,kBAAGA,GAAH,EAAQ;AACJ,oBAAGA,GAAG,CAACC,MAAJ,KAAe,GAAlB,EAAsB;AAClB5D,kBAAAA,QAAQ,CAAC6D,MAAT,CAAgBC,OAAhB,CAAwB,QAAxB,EAAkC,EAAlC,EAAsC,IAAtC,EAA4C,YAAM;AAC9C,wBAAGR,MAAM,CAAC9C,IAAD,CAAN,KAAiB,CAApB,EAAsB;AAClB4B,sBAAAA,SAAS,CAAC,CAAD,CAAT,CAAaH,IAAb,CAAkB,YAAM;AACpBjC,wBAAAA,QAAQ,CAACkC,OAAT,CAAiBC,MAAjB;AACH,uBAFD;AAGH,qBAJD,MAIK;AACD,0BAAG1B,OAAH,EAAW;AACPE,wBAAAA,MAAM,CAACkC,IAAP,8CAAkDpC,OAAlD,kBAAiEC,MAAjE;AACH,uBAFD,MAEK;AACDC,wBAAAA,MAAM,CAACkC,IAAP;AACH;AACJ;AACJ,mBAZD;AAaH;AACJ;;AAhCe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAXkB,WAAW;AAAA;AAAA;AAAA,KAAjB;;AAmCA,MAAM3B,SAAS;AAAA,yEAAG,kBAAO5B,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACdR,cAAAA,QAAQ,CAACkC,OAAT,CAAiB+B,MAAjB;AADc;AAAA,qBAEInE,aAAa,CAAC,KAAD,kBAAwB;AACnDoE,gBAAAA,IAAI,EAAE;AACF1D,kBAAAA,IAAI,EAAGA,IAAI,IAAIA,IAAI,KAAK,CAAlB,GAAuBA,IAAvB,GAA8B,CADlC;AAEF2D,kBAAAA,UAAU,EAAE;AAFV;AAD6C,eAAxB,CAFjB;;AAAA;AAERR,cAAAA,GAFQ;;AASd,kBAAGA,GAAG,IAAIA,GAAG,CAACC,MAAJ,KAAe,GAAzB,EAA6B;AACzB,oBAAGD,GAAG,CAACS,OAAJ,CAAYC,UAAZ,GAAyB7D,IAA5B,EAAiC;AAC7B4B,kBAAAA,SAAS,CAAC5B,IAAI,GAAG,CAAR,CAAT;AACH,iBAFD,MAEK;AACDuB,kBAAAA,WAAW,iCACJD,QADI;AAEPtB,oBAAAA,IAAI,EAAEmD,GAAG,CAACS,OAAJ,CAAY5D,IAFX;AAGPqB,oBAAAA,KAAK,EAAE8B,GAAG,CAACS,OAAJ,CAAYC;AAHZ,qBAAX;AAKAC,kBAAAA,WAAW,CAACX,GAAD,CAAX;AACH;AACJ,eAXD,MAWM,IAAIA,GAAG,CAACY,KAAJ,KAAc,GAAlB,EAAuB;AACzBvE,gBAAAA,QAAQ,CAAC6D,MAAT,CAAgBW,OAAhB,CAAwB,aAAxB,EAAuC,WAAvC,EAAoD,IAApD,EAA0D,YAAM;AAC5D7D,kBAAAA,MAAM,CAAC8D,IAAP;AACH,iBAFD;AAGH;;AAxBa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATrC,SAAS;AAAA;AAAA;AAAA,KAAf;;AA4BA,MAAMJ,WAAW;AAAA,yEAAG,kBAAOvB,OAAP,EAAqBC,MAArB,EAAqCgE,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAChB1E,cAAAA,QAAQ,CAACkC,OAAT,CAAiB+B,MAAjB;;AACA,kBAAG,CAACS,QAAJ,EAAa;AACT9C,gBAAAA,cAAc,CAAClB,MAAD,CAAd;AACH;;AAJe;AAAA,qBAMEZ,aAAa,CAAC,KAAD,oBAAyB;AACpDoE,gBAAAA,IAAI,EAAE;AACF1D,kBAAAA,IAAI,EAAEkE,QAAF,aAAEA,QAAF,cAAEA,QAAF,GAAc,CADhB;AAEFP,kBAAAA,UAAU,EAAE;AAFV,iBAD8C;AAKpDQ,gBAAAA,MAAM,EAAE;AACJlE,kBAAAA,OAAO,EAAEA,OAAF,aAAEA,OAAF,cAAEA,OAAF,GAAa,EADhB;AAEJmE,kBAAAA,GAAG,EAAElE,MAAF,aAAEA,MAAF,cAAEA,MAAF,GAAY;AAFX;AAL4C,eAAzB,CANf;;AAAA;AAMViD,cAAAA,GANU;;AAiBhB,kBAAGA,GAAG,IAAIA,GAAG,CAACC,MAAJ,KAAe,GAAzB,EAA6B;AACzB7B,gBAAAA,WAAW,iCACJD,QADI;AAEPtB,kBAAAA,IAAI,EAAEmD,GAAG,CAACS,OAAJ,CAAY5D,IAFX;AAGPqB,kBAAAA,KAAK,EAAE8B,GAAG,CAACS,OAAJ,CAAYC;AAHZ,mBAAX;AAKAC,gBAAAA,WAAW,CAACX,GAAD,CAAX;AACH;;AAxBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAX3B,WAAW;AAAA;AAAA;AAAA,KAAjB;;AA0BA,MAAM6C,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAClB,GAAD,EAAa;AAClC,QAAImB,MAAM,GAAGnB,GAAG,CAACoB,IAAJ,CAASX,OAAT,CAAiBY,SAA9B;AAEA,QAAIC,WAAW,GAAGH,MAAM,CAACxC,GAAP,CAAW,UAACC,GAAD,EAAW2C,KAAX,EAA6B;AAEtD,UAAIC,gBAAqB,GAAG,EAA5B;AAEA5C,MAAAA,GAAG,CAACI,UAAJ,IAAkBJ,GAAG,CAACI,UAAJ,CAAeL,GAAf,CAAmB,UAACM,CAAD,EAAY;AAC7CuC,QAAAA,gBAAgB,mCACTA,gBADS,2BAEXvC,CAAC,CAACW,KAFS,EAEDX,CAAC,CAACY,KAFD,EAAhB;AAIH,OALiB,CAAlB;AAMA,UAAI4B,SAAS,GAAGC,IAAI,CAACC,MAAL,KAAc,IAA9B;AACA,2DACO/C,GADP;AAEIgD,QAAAA,WAAW,EAAEhD,GAAG,CAACgD,WAFrB;AAGIvE,QAAAA,IAAI,EAAEuB,GAAG,CAACvB,IAHd;AAIIwE,QAAAA,GAAG,EAAEjD,GAAG,CAACiD,GAJb;AAKIC,QAAAA,SAAS,EAAElD,GAAG,CAACkD,SALnB;AAMIC,QAAAA,OAAO,EAAEnD,GAAG,CAACmD,OANjB;AAOIC,QAAAA,SAAS,EAAEpD,GAAG,CAACoD,SAPnB;AAQIC,QAAAA,GAAG,EAAErD,GAAG,CAACqD,GARb;AASIC,QAAAA,KAAK,EAAEtD,GAAG,CAACsD,KATf;AAUIC,QAAAA,GAAG,EAAEvD,GAAG,CAACuD,GAVb;AAWIC,QAAAA,OAAO,EAAExD,GAAG,CAACwD,OAXjB;AAYIC,QAAAA,QAAQ,EAAE;AAZd,SAaOb,gBAbP;AAcIlE,QAAAA,EAAE,qBAAcmE,SAAd;AAdN;AAgBH,KA3BiB,CAAlB;AA4BAjE,IAAAA,WAAW,oBAAK8D,WAAL,EAAX;AACH,GAhCD;;AAiCA,MAAMX,WAAW;AAAA,yEAAG,kBAAMX,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAEZsC,cAAAA,SAFY,GAEAlG,UAAU,CAAC,UAAD,CAFV;AAGZ+E,cAAAA,MAHY,GAGH,EAHG;AAIhBmB,cAAAA,SAAS,GAAGA,SAAS,CAAC3D,GAAV,CAAc,UAAClB,MAAD,EAAiB;AACvC,oBAAI8E,QAAJ;AACAvC,gBAAAA,GAAG,CAACS,OAAJ,CAAY+B,KAAZ,IAAqBxC,GAAG,CAACS,OAAJ,CAAY+B,KAAZ,CAAkB7D,GAAlB,CAAsB,UAAC8D,IAAD,EAAe;AACtD,sBAAGA,IAAI,CAACC,OAAL,KAAiBjF,MAAM,CAAC0B,GAA3B,EAA+B;AAC3BoD,oBAAAA,QAAQ,GAAG;AACPjF,sBAAAA,EAAE,EAAEmF,IAAI,CAACnF,EADF;AAEPD,sBAAAA,IAAI,EAAEoF,IAAI,CAAC7C,KAFJ;AAGP+C,sBAAAA,KAAK,EAAEF,IAAI,CAACE,KAHL;AAIPC,sBAAAA,GAAG,EAACH,IAAI,CAACG,GAJF;AAKP9C,sBAAAA,IAAI,EAAC2C,IAAI,CAAC3C,IALH;AAMP+C,sBAAAA,QAAQ,EAAE,CAACJ,IAAI,CAACI;AANT,qBAAX;AAQH,mBATD,MASO,IAAGJ,IAAI,CAACC,OAAL,KAAiB,IAAjB,IAAyBjF,MAAM,CAAC0B,GAAP,KAAe,OAA3C,EAAmD;AACtDoD,oBAAAA,QAAQ,GAAG;AACPjF,sBAAAA,EAAE,EAAEmF,IAAI,CAACnF,EADF;AAEPD,sBAAAA,IAAI,EAAEoF,IAAI,CAAC7C,KAFJ;AAGP+C,sBAAAA,KAAK,EAAEF,IAAI,CAACE,KAHL;AAIPC,sBAAAA,GAAG,EAACH,IAAI,CAACG,GAJF;AAKP9C,sBAAAA,IAAI,EAAC2C,IAAI,CAAC3C,IALH;AAMP+C,sBAAAA,QAAQ,EAAE,CAACJ,IAAI,CAACI;AANT,qBAAX;AAQH;AACJ,iBApBoB,CAArB;;AAsBA,oBAAGN,QAAH,EAAY;AACR,yDACO9E,MADP,GAEO8E,QAFP;AAIH;AACJ,eA9BW,EA8BTxC,MA9BS,CA8BF,UAACd,CAAD;AAAA,uBAAWA,CAAX;AAAA,eA9BE,CAAZ;AAgCI6D,cAAAA,eApCY,GAoCM9C,GAAG,CAACS,OAAJ,CAAY+B,KAAZ,GAAoBxC,GAAG,CAACS,OAAJ,CAAY+B,KAAZ,CAAkB7D,GAAlB,CAAsB,UAAC8D,IAAD,EAAc;AAC1E,oBAAGA,IAAI,CAACC,OAAL,KAAiB,IAApB,EAAyB;AACrB,yBAAO;AACHpF,oBAAAA,EAAE,EAAEmF,IAAI,CAACnF,EADN;AAEHD,oBAAAA,IAAI,EAAEoF,IAAI,CAAC7C,KAFR;AAGH+C,oBAAAA,KAAK,EAAEF,IAAI,CAACE,KAHT;AAIHxD,oBAAAA,GAAG,EAAEsD,IAAI,CAAC7C,KAJP;AAKHmD,oBAAAA,MAAM,EAAExG,UALL;AAMH6C,oBAAAA,IAAI,EAAE,YANH;AAOHU,oBAAAA,IAAI,EAAE2C,IAAI,CAAC3C;AAPR,mBAAP;AASH;AACJ,eAZyC,EAYvCC,MAZuC,CAYhC,UAACd,CAAD;AAAA,uBAAYA,CAAZ;AAAA,eAZgC,CAApB,GAYK,EAhDX;AAmDhBkC,cAAAA,MAAM,GAAGnB,GAAG,CAACS,OAAJ,CAAYY,SAArB;AAEItC,cAAAA,SArDY,GAqDA,EArDA;AAsDZiE,cAAAA,cAtDY,GAsDY,EAtDZ;AAuDhBV,cAAAA,SAAS,CAAC3D,GAAV,CAAc,UAACM,CAAD,EAAY;AACtB,oBAAGA,CAAC,CAACrB,UAAL,EAAgB;AACZmB,kBAAAA,SAAS,GAAGE,CAAC,CAACE,GAAd;AACH;AACJ,eAJD;AAMA2D,cAAAA,eAAe,CAACnE,GAAhB,CAAoB,UAACM,CAAD,EAAY;AAC5B,oBAAGA,CAAC,CAACG,IAAF,KAAW,YAAd,EAA2B;AACvB4D,kBAAAA,cAAc,CAAC9D,IAAf,CAAoBD,CAAC,CAACE,GAAtB;AACH;AACJ,eAJD;AAMAzB,cAAAA,SAAS,8BAAK4E,SAAS,CAAC3D,GAAV,CAAc,UAAAM,CAAC,EAAG;AAC5B,uDACOA,CADP;AAEI5B,kBAAAA,IAAI,EAAE4B,CAAC,CAAC4D,QAAF,GAAa5D,CAAC,CAAC5B,IAAF,GAAO,MAApB,GAA6B4B,CAAC,CAAC5B;AAFzC;AAIH,eALa,CAAL,sBAKFyF,eALE,GAAT;AAOIzC,cAAAA,EA1EY,GA0EP,EA1EO;AA2EhBf,cAAAA,MAAM,CAACC,IAAP,CAAY4B,MAAZ,EAAoBxC,GAApB,CAAwB,UAACM,CAAD,EAAO;AAC3B,oBAAGA,CAAC,CAACO,OAAF,CAAU,KAAV,MAAqB,CAAC,CAAzB,EAA2B;AACvBa,kBAAAA,EAAE,GAAGpB,CAAL;AACH;AACJ,eAJD;AAMIqC,cAAAA,WAjFY,GAiFEH,MAAM,CAACxC,GAAP,CAAW,UAACC,GAAD,EAAW2C,KAAX,EAA6B;AAEtD,oBAAIC,gBAAqB,GAAG,EAA5B;AAEA5C,gBAAAA,GAAG,CAACI,UAAJ,IAAkBJ,GAAG,CAACI,UAAJ,CAAeL,GAAf,CAAmB,UAACM,CAAD,EAAY;AAC7CuC,kBAAAA,gBAAgB,mCACTA,gBADS,2BAEXvC,CAAC,CAACW,KAFS,EAEDX,CAAC,CAACY,KAFD,EAAhB;AAIH,iBALiB,CAAlB;AAMA,oBAAI4B,SAAS,GAAGC,IAAI,CAACC,MAAL,KAAc,IAA9B;AACA,qEACO/C,GADP;AAEIgD,kBAAAA,WAAW,EAAEhD,GAAG,CAACgD,WAFrB;AAGIvE,kBAAAA,IAAI,EAAEuB,GAAG,CAACvB,IAHd;AAIIwE,kBAAAA,GAAG,EAAEjD,GAAG,CAACiD,GAJb;AAKIC,kBAAAA,SAAS,EAAElD,GAAG,CAACkD,SALnB;AAMIC,kBAAAA,OAAO,EAAEnD,GAAG,CAACmD,OANjB;AAOIC,kBAAAA,SAAS,EAAEpD,GAAG,CAACoD,SAPnB;AAQIC,kBAAAA,GAAG,EAAErD,GAAG,CAACqD,GARb;AASIC,kBAAAA,KAAK,EAAEtD,GAAG,CAACsD,KATf;AAUIC,kBAAAA,GAAG,EAAEvD,GAAG,CAACuD,GAVb;AAWIC,kBAAAA,OAAO,EAAExD,GAAG,CAACwD,OAXjB;AAYIC,kBAAAA,QAAQ,EAAE;AAZd,mBAaOb,gBAbP;AAcIlE,kBAAAA,EAAE,qBAAcmE,SAAd;AAdN;AAgBH,eA3BiB,CAjFF;AA+GhBjE,cAAAA,WAAW,oBAAK8D,WAAL,EAAX;;AA/GgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAXX,WAAW;AAAA;AAAA;AAAA,KAAjB;;AAkHA,MAAMsC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACxB,QAAIC,aAAwB,GAAG,EAA/B;AACA3F,IAAAA,QAAQ,CAACoB,GAAT,CAAa,UAAAC,GAAG,EAAI;AAChBsE,MAAAA,aAAa,CAAChE,IAAd,CAAmBtB,UAAU,CAACkB,GAAX,CAAeF,GAAG,CAACtB,EAAnB,CAAnB;AACH,KAFD;AAGAd,IAAAA,aAAa,CAACiB,MAAD,EAASF,QAAT,EAAsB,UAAtB,EAAoC,UAApC,EAAgD2F,aAAhD,CAAb;AACH,GAND;;AAQA,MAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAC5B,KAAD,EAAmB;AAC3C,YAAQA,KAAR;AACI,WAAK,CAAL;AACInE,QAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACA;;AACJ,WAAK,CAAL;AACIF,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACA;;AACJ,WAAK,CAAL;AAEIF,QAAAA,MAAM,CAACkC,IAAP;AAEA;;AACJ,WAAK,CAAL;AACI,YAAIkE,KAAK,GAAG,EAAZ;AACA,YAAI3B,SAAS,GAAGC,IAAI,CAACC,MAAL,KAAc,IAA9B;AACAlE,QAAAA,MAAM,CAACkB,GAAP,CAAW,UAACkB,KAAD,EAAW;AAClB,cAAIA,KAAK,CAACjC,UAAN,IAAoBiC,KAAK,CAACjC,UAAN,CAAiByF,MAAzC,EAAiD;AAAA;;AAC7CD,YAAAA,KAAK,mCACEvD,KAAK,CAACjC,UAAN,CAAiB,CAAjB,CADF,6DAEAiC,KAAK,CAACV,GAFN,EAEYU,KAAK,CAACjC,UAAN,CAAiB,CAAjB,EAAoBP,IAFhC,mCAGAwC,KAAK,CAACV,GAAN,GAAY,IAHZ,EAGmBU,KAAK,CAACjC,UAAN,CAAiB,CAAjB,EAAoByC,EAHvC,oBAIE+C,KAJF,CAAL;AAMH;AACJ,SATD;AAWA5F,QAAAA,WAAW,kCAEA4F,KAFA;AAGH9F,UAAAA,EAAE,qBAAcmE,SAAd,CAHC;AAIHpE,UAAAA,IAAI,EAAE,IAJH;AAKH2B,UAAAA,UAAU,EAAE;AALT,sCAOJzB,QAPI,GAAX;AAUA;;AAEJ,WAAK,CAAL;AACImB,QAAAA,SAAS;AAET;;AACJ,WAAK,CAAL;AACIrC,QAAAA,QAAQ,CAACiH,OAAT,CAAiBC,IAAjB,CAAsB,IAAtB,EAA2B,WAA3B,EAAuC,IAAvC,EAA4C,IAA5C,EACI,YAAI;AAACnD,UAAAA,WAAW;AAAG,SADvB,EAEK,YAAI,CAAE,CAFX;AAIA;AA/CR;AAkDH,GAnDD;;AAqDA,SACI;AAAK,IAAA,KAAK,EAAE;AAACoD,MAAAA,OAAO,EAAE;AAAV,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,cAAD;AAAgB,IAAA,QAAQ,EAAE,OAA1B;AAAmC,IAAA,OAAO,EAAE,CAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAK,IAAA,KAAK,EAAE;AAACC,MAAAA,aAAa,EAAE;AAAhB,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,UAAD;AACI,IAAA,QAAQ,MADZ;AAEI,IAAA,aAAa,EAAE3G,OAFnB;AAGI,IAAA,qBAAqB,EAAE,+BAACA,OAAD,EAAa;AAChC,UAAGA,OAAH,EAAW;AACPE,QAAAA,MAAM,CAACkC,IAAP,8CAAkDpC,OAAlD,kBAAiEkB,WAAjE;AACH,OAFD,MAEK;AACDhB,QAAAA,MAAM,CAACkC,IAAP;AACH;AACJ,KATL;AAUI,IAAA,gBAAgB,EAAEpB,UAVtB;AAWI,IAAA,oBAAoB,EAAE,8BAACf,MAAD,EAAY;AAC9BkB,MAAAA,cAAc,CAAClB,MAAD,CAAd;AACH,KAbL;AAcI,IAAA,WAAW,EAAEiB,WAdjB;AAeI,IAAA,KAAK,EAAE,WAfX;AAgBI,IAAA,OAAO,EACH,CAAC,QAAD,EAAU,QAAV,EAAoB,MAApB,EAA4B,MAA5B,EAAoC,MAApC,EAA4C,IAA5C,CAjBR;AAmBI,IAAA,cAAc,EAAEmF,mBAnBpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAuBI,MAAC,UAAD;AACI,IAAA,QAAQ,MADZ;AAEI,IAAA,SAAS,MAFb;AAGI,IAAA,UAAU,GACNjH,YADM,4BAEHuB,MAFG,EAHd;AAOI,IAAA,GAAG,EAAEF,QAPT,CAQI;AARJ;AASI,IAAA,MAAM,EAAE,gBAACmG,CAAD,EAAO;AACX,UAAIC,GAAa,GAAG/F,UAApB;AACA8F,MAAAA,CAAC,CAAC/E,GAAF,CAAM,UAAAM,CAAC,EAAI;AACP,YAAGA,CAAC,CAAC2E,QAAL,EAAeD,GAAG,CAACE,GAAJ,CAAQ5E,CAAC,CAAC3B,EAAV;AAClB,OAFD;AAGAO,MAAAA,aAAa,CAAC8F,GAAD,CAAb;AACAnG,MAAAA,WAAW,CAACkG,CAAD,CAAX;AACH,KAhBL;AAiBI,IAAA,UAAU,EAAE9F,UAjBhB,CAkBI;AAlBJ;AAmBI,IAAA,aAAa,EAAEC,aAnBnB;AAoBI,IAAA,MAAM,EAAEN,QAAQ,CAAC8F,MAAT,GAAkB,EAAlB,IAAwB,KAAG,EAAH,GAAM,EAA9B,GAAmC,KAAG,EAAtC,GAA2C9F,QAAQ,CAAC8F,MAAT,GAAkB,EAAlB,GAAuB,EApB9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvBJ,EA6CI,MAAC,mBAAD;AACE,IAAA,WAAW,EAAElF,QAAQ,CAACtB,IADxB;AAEE,IAAA,SAAS,EAAEsB,QAAQ,CAACD,KAFtB;AAGE,IAAA,OAAO,EAAE,iBAACrB,IAAD,EAAU;AACf,UAAGC,OAAH,EAAW;AACPE,QAAAA,MAAM,CAACkC,IAAP,oCAAwCrC,IAAxC,sBAAwDC,OAAxD,kBAAuEC,MAAvE;AACH,OAFD,MAEK;AACDC,QAAAA,MAAM,CAACkC,IAAP,oCAAwCrC,IAAxC;AACH;AACJ,KATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7CJ,CAFJ,EA2DI,MAAC,kBAAD;AACE,IAAA,MAAM,EAAEI,SADV;AAEE,IAAA,MAAM,EAAEQ,MAFV;AAGE,IAAA,QAAQ,EAAEF,QAHZ;AAIE,IAAA,QAAQ,8CAJV;AAKE,IAAA,SAAS,8CALX;AAME,IAAA,UAAU,EAAEK,UANd;AAOE,IAAA,GAAG,EAAE,cAPP;AAQE,IAAA,SAAS,EAAEV,YARb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA3DJ,EAqEI,MAAC,gBAAD;AAAkB,IAAA,MAAM,EAAEC,eAA1B;AAA2C,IAAA,SAAS,EAAEC,kBAAtD;AAA0E,IAAA,GAAG,EAAE,cAA/E;AAA+F,IAAA,gBAAgB,EAAE8D,gBAAjH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArEJ,CADJ;AAyEH,CAneD;;GAAMtE,c;UACaN,S;;;KADbM,c;AA+eN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeA,cAAf","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport ExcelTable from '../../../../component/Excel/ExcelTable'\nimport MenuNavigation from '../../../../component/MenuNav/MenuNavigation'\nimport ProfileHeader from '../../../../component/Profile/ProfileHeader'\nimport PageHeader from '../../../../component/Header/Header'\n// @ts-ignore\nimport {SelectColumn} from 'react-data-grid'\nimport {RequestMethod} from '../../../../common/RequestFunctions'\nimport {columnlist} from \"../../../../common/columnInit\";\nimport Notiflix from \"notiflix\";\nimport {useRouter} from 'next/router'\nimport {MAX_VALUE} from '../../../../common/configset'\nimport DropDownEditor from '../../../../component/Dropdown/ExcelBasicDropdown'\nimport TextEditor from '../../../../component/InputBox/ExcelBasicInputBox'\nimport {excelDownload} from '../../../../common/excelDownloadFunction'\nimport {loadAll} from 'react-cookies'\nimport {IExcelHeaderType} from \"../../../../common/@types/type\";\nimport PaginationComponent from '../../../../component/Pagination/PaginationComponent'\nimport {NextPageContext} from 'next'\nimport ExcelDownloadModal from '../../../../component/Modal/ExcelDownloadMoadal'\nimport ExcelUploadModal from \"../../../../component/Modal/ExcelUploadModal\";\n\ninterface IProps {\n    children?: any\n    page?: number\n    keyword?: string\n    option?: number\n}\n\n\nconst BasicContainer = ({page, keyword, option}: IProps) => {\n    const router = useRouter()\n\n    const [excelOpen, setExcelOpen] = useState<boolean>(false)\n    const [excelUploadOpen, setExcelUploadOpen] = useState<boolean>(false);\n    const [basicRow, setBasicRow] = useState<Array<any>>([{\n        name: \"\", id: \"\"\n    }])\n    const [column, setColumn] = useState<Array<IExcelHeaderType>>(columnlist[\"customer\"]);\n    const [selectList, setSelectList] = useState<Set<number>>(new Set())\n    const [optionList, setOptionList] = useState<string[]>(['고객사명', '대표자명', '담당자명', '전화 번호','휴대폰 번호', '팩스 번호', '주소', '사업자 번호'])\n    const [optionIndex, setOptionIndex] = useState<number>(option)\n\n    const [pageInfo, setPageInfo] = useState<{page: number, total: number}>({\n        page: 1,\n        total: 1\n    })\n\n    useEffect(() => {\n        if(keyword){\n            SearchBasic(keyword, option, page).then(() => {\n                Notiflix.Loading.remove()\n            })\n        }else{\n            LoadBasic(page).then(() => {\n                Notiflix.Loading.remove()\n            }).then(() => {\n                Notiflix.Loading.remove()\n            })\n        }\n    }, [page, keyword, option])\n\n    const SaveBasic = async () => {\n        let res: any\n            res = await RequestMethod('post', `customerSave`,\n                {\n                    [ 'customers']: basicRow.map((row, i) => {\n                        if(selectList.has(row.id)){\n                            let selectKey: string[] = []\n                            let additional:any[] = []\n                            column.map((v) => {\n                                if(v.selectList){\n                                    selectKey.push(v.key)\n                                }\n\n                                if(v.type === 'additional'){\n                                    additional.push(v)\n                                }\n                            })\n\n                            let selectData: any = {}\n\n                            Object.keys(row).map(v => {\n                                if(v.indexOf('PK') !== -1) {\n                                    selectData = {\n                                        ...selectData,\n                                        [v.split('PK')[0]]: row[v]\n                                    }\n                                }\n\n                                if(v === 'unitWeight') {\n                                    selectData = {\n                                        ...selectData,\n                                        unitWeight: Number(row['unitWeight'])\n                                    }\n                                }\n\n                                if(v === 'tmpId') {\n                                    selectData = {\n                                        ...selectData,\n                                        id: row['tmpId']\n                                    }\n                                }\n                            })\n\n                            return {\n                                ...row,\n                                ...selectData,\n                                additional: [\n                                    ...additional.map(v => {\n                                        if(row[v.name]) {\n                                            return {\n                                                id: v.id,\n                                                title: v.name,\n                                                value: row[v.name],\n                                                unit: v.unit\n                                            }\n                                        }\n                                    }).filter((v) => v)\n                                ]\n                            }\n\n                        }\n                    }).filter((v) => v)\n                })\n\n\n        if(res){\n            if(res.status === 200){\n                Notiflix.Report.success('저장되었습니다.','','확인');\n                if(keyword){\n                    SearchBasic(keyword, option, page).then(() => {\n                        Notiflix.Loading.remove()\n                    })\n                }else{\n                    LoadBasic(page).then(() => {\n                        Notiflix.Loading.remove()\n                    })\n                }\n            }\n        }\n    }\n\n    const DeleteBasic = async () => {\n        const res = await RequestMethod('delete', `customerDelete`,\n            {\n                [ 'customers']: basicRow.map((row, i) => {\n                    if(selectList.has(row.id)){\n                            let pk = \"\"\n                            Object.keys(row).map((v:string) => {\n                                if(v.indexOf(\"_id\") !== -1){\n                                    pk = v\n                                }\n                            })\n                            return row[pk]\n                    }\n                }).filter((v) => v)\n            })\n\n        if(res) {\n            if(res.status === 200){\n                Notiflix.Report.success('삭제 성공!', '', '확인', () => {\n                    if(Number(page) === 1){\n                        LoadBasic(1).then(() => {\n                            Notiflix.Loading.remove()\n                        })\n                    }else{\n                        if(keyword){\n                            router.push(`/mes/basic/customer?page=1&keyword=${keyword}&opt=${option}`)\n                        }else{\n                            router.push(`/mes/basic/customer?page=1`)\n                        }\n                    }\n                })\n            }\n        }\n    }\n\n    const LoadBasic = async (page?: number) => {\n        Notiflix.Loading.circle()\n        const res = await RequestMethod('get', `customerList`, {\n            path: {\n                page: (page || page !== 0) ? page : 1,\n                renderItem: 18,\n            }\n        })\n\n        if(res && res.status === 200){\n            if(res.results.totalPages < page){\n                LoadBasic(page - 1)\n            }else{\n                setPageInfo({\n                    ...pageInfo,\n                    page: res.results.page,\n                    total: res.results.totalPages\n                })\n                cleanUpData(res)\n            }\n        }else if (res.state === 401) {\n            Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n                router.back()\n            })\n        }\n    }\n\n\n    const SearchBasic = async (keyword: any, option: number, isPaging?: number) => {\n        Notiflix.Loading.circle()\n        if(!isPaging){\n            setOptionIndex(option)\n        }\n\n        const res = await RequestMethod('get', `customerSearch`,{\n            path: {\n                page: isPaging ?? 1,\n                renderItem: 18,\n            },\n            params: {\n                keyword: keyword ?? '',\n                opt: option ?? 0\n            }\n        })\n\n        if(res && res.status === 200){\n            setPageInfo({\n                ...pageInfo,\n                page: res.results.page,\n                total: res.results.totalPages\n            })\n            cleanUpData(res)\n        }\n    }\n    const cleanUpBasicData = (res:any) => {\n        let tmpRow = res.data.results.info_list;\n\n        let tmpBasicRow = tmpRow.map((row: any, index: number) => {\n\n            let appendAdditional: any = {}\n\n            row.additional && row.additional.map((v: any) => {\n                appendAdditional = {\n                    ...appendAdditional,\n                    [v.title]: v.value\n                }\n            })\n            let random_id = Math.random()*1000;\n            return {\n                ...row,\n                customer_id: row.customer_id,\n                name: row.name,\n                rep: row.rep,\n                telephone: row.telephone,\n                manager: row.manager,\n                cellphone: row.cellphone,\n                fax: row.fax,\n                photo: row.photo,\n                crn: row.crn,\n                address: row.address,\n                password: '-',\n                ...appendAdditional,\n                id: `customer_${random_id}`,\n            }\n        })\n        setBasicRow([...tmpBasicRow])\n    }\n    const cleanUpData = async(res: any) => {\n\n        let tmpColumn = columnlist[\"customer\"]\n        let tmpRow = []\n        tmpColumn = tmpColumn.map((column: any) => {\n            let menuData: object | undefined;\n            res.results.menus && res.results.menus.map((menu: any) => {\n                if(menu.colName === column.key){\n                    menuData = {\n                        id: menu.id,\n                        name: menu.title,\n                        width: menu.width,\n                        tab:menu.tab,\n                        unit:menu.unit,\n                        moddable: !menu.moddable\n                    }\n                } else if(menu.colName === 'id' && column.key === 'tmpId'){\n                    menuData = {\n                        id: menu.id,\n                        name: menu.title,\n                        width: menu.width,\n                        tab:menu.tab,\n                        unit:menu.unit,\n                        moddable: !menu.moddable\n                    }\n                }\n            })\n\n            if(menuData){\n                return {\n                    ...column,\n                    ...menuData\n                }\n            }\n        }).filter((v:any) => v)\n\n        let additionalMenus = res.results.menus ? res.results.menus.map((menu:any) => {\n            if(menu.colName === null){\n                return {\n                    id: menu.id,\n                    name: menu.title,\n                    width: menu.width,\n                    key: menu.title,\n                    editor: TextEditor,\n                    type: 'additional',\n                    unit: menu.unit\n                }\n            }\n        }).filter((v: any) => v) : []\n\n\n        tmpRow = res.results.info_list\n\n        let selectKey = \"\"\n        let additionalData: any[] = []\n        tmpColumn.map((v: any) => {\n            if(v.selectList){\n                selectKey = v.key\n            }\n        })\n\n        additionalMenus.map((v: any) => {\n            if(v.type === 'additional'){\n                additionalData.push(v.key)\n            }\n        })\n\n        setColumn([...tmpColumn.map(v=> {\n            return {\n                ...v,\n                name: v.moddable ? v.name+'(필수)' : v.name\n            }\n        }), ...additionalMenus])\n\n        let pk = \"\";\n        Object.keys(tmpRow).map((v) => {\n            if(v.indexOf('_id') !== -1){\n                pk = v\n            }\n        })\n\n        let tmpBasicRow = tmpRow.map((row: any, index: number) => {\n\n            let appendAdditional: any = {}\n\n            row.additional && row.additional.map((v: any) => {\n                appendAdditional = {\n                    ...appendAdditional,\n                    [v.title]: v.value\n                }\n            })\n            let random_id = Math.random()*1000;\n            return {\n                ...row,\n                customer_id: row.customer_id,\n                name: row.name,\n                rep: row.rep,\n                telephone: row.telephone,\n                manager: row.manager,\n                cellphone: row.cellphone,\n                fax: row.fax,\n                photo: row.photo,\n                crn: row.crn,\n                address: row.address,\n                password: '-',\n                ...appendAdditional,\n                id: `customer_${random_id}`,\n            }\n        })\n\n\n        setBasicRow([...tmpBasicRow])\n    }\n\n    const downloadExcel = () => {\n        let tmpSelectList: boolean[] = []\n        basicRow.map(row => {\n            tmpSelectList.push(selectList.has(row.id))\n        })\n        excelDownload(column, basicRow, `${\"customer\"}`, \"customer\", tmpSelectList)\n    }\n\n    const onClickHeaderButton = (index: number) => {\n        switch (index) {\n            case 0:\n                setExcelUploadOpen(true)\n                break;\n            case 1:\n                setExcelOpen(true)\n                break;\n            case 2:\n\n                router.push(`/mes/item/manage/customer`)\n\n                break;\n            case 3:\n                let items = {}\n                let random_id = Math.random()*1000;\n                column.map((value) => {\n                    if (value.selectList && value.selectList.length) {\n                        items = {\n                            ...value.selectList[0],\n                            [value.key]: value.selectList[0].name,\n                            [value.key + 'PK']: value.selectList[0].pk,//여기 봐야됨!\n                            ...items,\n                        }\n                    }\n                })\n\n                setBasicRow([\n                    {\n                        ...items,\n                        id: `customer_${random_id}`,\n                        name: null,\n                        additional: [],\n                    },\n                    ...basicRow\n                ])\n\n                break;\n\n            case 4:\n                SaveBasic()\n\n                break;\n            case 5:\n                Notiflix.Confirm.show(\"경고\",\"삭제하시겠습니까?\",\"확인\",\"취소\",\n                    ()=>{DeleteBasic()}\n                    ,()=>{}\n                )\n                break;\n\n        }\n    }\n\n    return (\n        <div style={{display: 'flex', }}>\n            <MenuNavigation pageType={'BASIC'} subType={1}/>\n            <div style={{paddingBottom: 40}}>\n                <ProfileHeader/>\n                <PageHeader\n                    isSearch\n                    searchKeyword={keyword}\n                    onChangeSearchKeyword={(keyword) => {\n                        if(keyword){\n                            router.push(`/mes/basic/customer?page=1&keyword=${keyword}&opt=${optionIndex}`)\n                        }else{\n                            router.push(`/mes/basic/customer?page=1&keyword=`)\n                        }\n                    }}\n                    searchOptionList={optionList}\n                    onChangeSearchOption={(option) => {\n                        setOptionIndex(option)\n                    }}\n                    optionIndex={optionIndex}\n                    title={\"고객사 정보 관리\"}\n                    buttons={\n                        [\"엑셀로 등록\",'엑셀로 받기', '항목관리', '행 추가', '저장하기', '삭제']\n                    }\n                    buttonsOnclick={onClickHeaderButton}\n                />\n                <ExcelTable\n                    editable\n                    resizable\n                    headerList={[\n                        SelectColumn,\n                        ...column\n                    ]}\n                    row={basicRow}\n                    // setRow={setBasicRow}\n                    setRow={(e) => {\n                        let tmp: Set<any> = selectList\n                        e.map(v => {\n                            if(v.isChange) tmp.add(v.id)\n                        })\n                        setSelectList(tmp)\n                        setBasicRow(e)\n                    }}\n                    selectList={selectList}\n                    //@ts-ignore\n                    setSelectList={setSelectList}\n                    height={basicRow.length * 40 >= 40*18+56 ? 40*19 : basicRow.length * 40 + 56}\n                />\n                <PaginationComponent\n                  currentPage={pageInfo.page}\n                  totalPage={pageInfo.total}\n                  setPage={(page) => {\n                      if(keyword){\n                          router.push(`/mes/basic/customer?page=${page}&keyword=${keyword}&opt=${option}`)\n                      }else{\n                          router.push(`/mes/basic/customer?page=${page}`)\n                      }\n                  }}\n                />\n            </div>\n            <ExcelDownloadModal\n              isOpen={excelOpen}\n              column={column}\n              basicRow={basicRow}\n              filename={`고객사정보관리`}\n              sheetname={`고객사정보관리`}\n              selectList={selectList}\n              tab={'ROLE_BASE_01'}\n              setIsOpen={setExcelOpen}\n            />\n            <ExcelUploadModal isOpen={excelUploadOpen} setIsOpen={setExcelUploadOpen} tab={'ROLE_BASE_01'} cleanUpBasicData={cleanUpBasicData} />\n        </div>\n    );\n}\n\nexport const getServerSideProps = (ctx: NextPageContext) => {\n    return {\n        props: {\n            page: ctx.query.page ?? 1,\n            keyword: ctx.query.keyword ?? \"\",\n            option: ctx.query.opt ?? 0,\n        }\n    }\n}\n\n// BasicContainer.getInitialProps = async ({ query }) => {\n//     let { page, keyword, opt } = query\n//     if (typeof page === 'string')\n//         page = parseInt(page);\n//     if (typeof opt === 'string')\n//         opt = parseInt(opt);\n//     return { page, keyword, option: opt };\n// }\n\nexport default BasicContainer;\n"]},"metadata":{},"sourceType":"module"}