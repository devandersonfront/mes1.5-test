{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/stock/admin/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from \"react\";\nimport MenuNavigation from \"../../../../component/MenuNav/MenuNavigation\";\nimport ProfileHeader from \"../../../../component/Profile/ProfileHeader\";\nimport PageHeader from \"../../../../component/Header/Header\";\nimport ExcelTable from \"../../../../component/Excel/ExcelTable\";\nimport { RequestMethod } from \"../../../../common/RequestFunctions\";\nimport { columnlist } from \"../../../../common/columnInit\";\n//@ts-ignore\nimport { SelectColumn } from \"react-data-grid\"; //@ts-ignore\n\nimport Notiflix from \"notiflix\";\nimport { ScrollSync, ScrollSyncPane } from \"react-scroll-sync\";\nimport ProductTitleFomatter from \"../../../../component/Formatter/ProductTitleFomatter\";\nimport moment from \"moment\";\nimport UnitContainer from \"../../../../component/Unit/UnitContainer\";\nimport { excelDownload } from \"../../../../common/excelDownloadFunction\";\nimport TitleCreateModal from \"../../../../component/Modal/TitleCreateModal\";\nimport StockSearchModal from \"../../../../component/Modal/StockSearchModal\";\nimport TextEditor from \"../../../../component/InputBox/ExcelBasicInputBox\";\n\nconst Productlist = () => {\n  const {\n    0: state,\n    1: setState\n  } = useState(\"local\");\n  const {\n    0: rowData,\n    1: setRowData\n  } = useState([]);\n  const {\n    0: dateData,\n    1: setDateData\n  } = useState([]);\n  const {\n    0: column,\n    1: setColumn\n  } = useState(columnlist.stockProduct);\n  const {\n    0: dateColumn,\n    1: setDateColumn\n  } = useState(columnlist.stockDate);\n  const {\n    0: selectList,\n    1: setSelectList\n  } = useState(new Set());\n  const {\n    0: selectMonth,\n    1: setSelectMonth\n  } = useState(moment(new Date()).startOf(\"month\").format('YYYY-MM'));\n\n  const changeSelectMonth = value => {\n    setSelectMonth(value);\n  };\n\n  const {\n    0: keyword,\n    1: setKeyword\n  } = useState(\"\");\n  const {\n    0: option,\n    1: setOption\n  } = useState(0);\n  const {\n    0: selectDate,\n    1: setSelectDate\n  } = useState({\n    from: moment(new Date()).startOf(\"month\").format('YYYY-MM-DD'),\n    to: moment(new Date()).endOf(\"month\").format('YYYY-MM-DD')\n  });\n  const {\n    0: onTitleModal,\n    1: setOnTitleModal\n  } = useState(false);\n  const {\n    0: onDataLoadModal,\n    1: setOnDataLoadModal\n  } = useState(false);\n\n  const changeSelectDate = (from, to) => {\n    setSelectDate({\n      from: from,\n      to: to\n    });\n  };\n\n  const {\n    0: modalResult,\n    1: setModalResult\n  } = useState();\n  const {\n    0: excelTableWidths,\n    1: setExcelTableWidths\n  } = useState({\n    model: 0,\n    data: 0\n  });\n  const {\n    0: onHide,\n    1: setOnHide\n  } = useState(false);\n\n  const LoadData = async () => {\n    Notiflix.Loading.standard();\n    const res = await RequestMethod('get', 'stockProductList', {\n      path: {\n        tab: \"ROLE_STK_03\"\n      },\n      params: {\n        keyword: keyword,\n        opt: option,\n        from: selectDate.from,\n        to: selectDate.to\n      }\n    });\n\n    if (res && res.status === 200) {\n      // if(res.results.summaries.length > 0){\n      cleanUpData(res, \"model\");\n      cleanUpData(res, \"date\"); // }\n\n      Notiflix.Loading.remove(300);\n    }\n  };\n\n  const SelectLoadData = async () => {\n    Notiflix.Loading.standard();\n    const res = await RequestMethod('get', 'summaryFetch', {\n      path: {\n        tab: \"ROLE_STK_03\",\n        summary_id: modalResult.summary_id\n      },\n      params: {\n        keyword: keyword !== null && keyword !== void 0 ? keyword : \"\",\n        opt: option,\n        from: modalResult.from,\n        to: modalResult.to\n      }\n    });\n\n    if (res && res.status === 200) {\n      // if(res.results.summaries.length > 0){\n      cleanUpData(res, \"model\");\n      cleanUpData(res, \"date\"); // }\n\n      Notiflix.Loading.remove(300);\n    }\n  };\n\n  const cleanUpData = async (res, version) => {\n    let tmpColumn = columnlist.stockProduct;\n    let tmpRow = [];\n    let tmpRow_date = [];\n    let result = [];\n    let totalWidth = 0;\n\n    switch (version) {\n      case \"model\":\n        tmpColumn = columnlist.stockProduct.map((column, index) => {\n          let menuData;\n          res.results.menus && res.results.menus.map(menu => {\n            if (menu.colName === column.key) {\n              menuData = {\n                id: menu.id,\n                name: menu.title,\n                width: menu.width,\n                tab: menu.tab,\n                unit: menu.unit\n              };\n            } else if (menu.colName === 'id' && column.key === 'tmpId') {\n              menuData = {\n                id: menu.id,\n                name: menu.title,\n                width: menu.width,\n                tab: menu.tab,\n                unit: menu.unit\n              };\n            }\n          });\n\n          if (menuData) {\n            return _objectSpread(_objectSpread({}, column), menuData);\n          }\n        }).filter(v => v);\n        tmpColumn.map(v => {\n          totalWidth += v.width;\n        });\n        setExcelTableWidths({\n          data: 1576 - totalWidth,\n          model: totalWidth\n        });\n        setColumn([...tmpColumn]);\n        break;\n        return;\n\n      case \"date\":\n        if (res.results.summaries.length > 0) {\n          tmpColumn = res.results.summaries[0].statistics.logs.map(col => {\n            result.push({\n              key: col.date,\n              name: col.date,\n              editor: TextEditor,\n              formatter: UnitContainer,\n              unitData: 'EA',\n              width: 100\n            });\n          });\n          setDateColumn([{\n            key: \"title\",\n            name: \"생산/납품\",\n            formatter: ProductTitleFomatter,\n            width: 100,\n            frozen: true\n          }, {\n            key: \"carryforward\",\n            name: \"전월 이월\",\n            width: 100,\n            formatter: UnitContainer,\n            unitData: \"EA\",\n            frozen: true\n          }, {\n            key: \"total\",\n            name: \"합계\",\n            width: 100,\n            formatter: UnitContainer,\n            unitData: \"EA\",\n            frozen: true\n          }, ...result]);\n          result = [];\n        } else {\n          result = [];\n        }\n\n        break;\n        return;\n\n      default:\n        break;\n        return;\n    }\n\n    tmpRow = res.results.summaries;\n    let tmpBasicRow_model = tmpRow.map((row, index) => {\n      var _res$results$summary_;\n\n      let random_id = Math.random() * 1000;\n      const summary_id = (_res$results$summary_ = res.results.summary_id) !== null && _res$results$summary_ !== void 0 ? _res$results$summary_ : undefined;\n      return _objectSpread(_objectSpread({}, row), {}, {\n        customer_id: index === 0 || tmpRow[index - 1].product.raw_material.model.customer.customer_id !== row.product.raw_material.model.customer.customer_id ? row.product.raw_material.model.customer.name : undefined,\n        customer_idPK: row.product.raw_material.model.customer.customer_id,\n        cm_id: row.product.raw_material.model.model,\n        cm_idPK: row.product.raw_material.model.cm_id,\n        model: row.product.raw_material.model.model,\n        code: row.product.raw_material.code,\n        name: row.product.raw_material.name,\n        summary_id: summary_id,\n        id: `product_${random_id}`\n      });\n    });\n    tmpRow.map((row, index) => {\n      let random = Math.random() * 1000;\n      let tmp_row_produced = {};\n      let tmp_row_shipped = {};\n      row.statistics.logs.map(log => {\n        tmp_row_produced[log.date] = log.produced;\n        tmp_row_shipped[log.date] = log.shipped;\n      });\n      tmp_row_produced[\"carryforward\"] = row.statistics.carryforward;\n      tmp_row_produced[\"total\"] = row.statistics.total_produced + row.statistics.carryforward;\n      tmp_row_shipped[\"total\"] = row.statistics.total_shipped;\n      tmpRow_date.push(_objectSpread({\n        title: \"생산\",\n        id: `product_${random}`\n      }, tmp_row_produced));\n      tmpRow_date.push(_objectSpread({\n        title: \"납품\",\n        id: `product_${random + 1}`\n      }, tmp_row_shipped));\n    });\n\n    if (version === \"model\") {\n      setRowData([...tmpBasicRow_model]);\n    } else if (version === \"date\") {\n      setDateData([...tmpRow_date]);\n    }\n  };\n\n  const downloadExcel = () => {\n    let tmpSelectList = [];\n    let tmpSelectListData = [];\n    rowData.map(row => {\n      tmpSelectList.push(selectList.has(row.id));\n      tmpSelectList.push(selectList.has(row.id)); // if(selectList.has(row.id)){\n\n      let sumProducedObject = {};\n      let sumShippedObject = {};\n      Object.keys(row).map(value => {\n        if (value === \"statistics\") {\n          row[value].logs.map(data => {\n            sumProducedObject[data.date] = data.produced;\n            sumShippedObject[data.date] = data.shipped;\n          });\n        } else {\n          sumProducedObject[value] = row[value];\n        }\n      });\n      sumProducedObject[\"title\"] = \"생산\";\n      sumProducedObject[\"carryforward\"] = row.statistics.carryforward;\n      sumProducedObject[\"total\"] = row.statistics.total_produced;\n      sumShippedObject[\"title\"] = \"납품\"; // sumShippedObject[\"carryforward\"] = row.statistics.carryforward;\n\n      sumShippedObject[\"total\"] = row.statistics.total_shipped;\n      tmpSelectListData.push(sumProducedObject);\n      tmpSelectListData.push(sumShippedObject); // }\n    });\n    excelDownload([...column, ...dateColumn], tmpSelectListData, `${selectDate.from} ~ ${selectDate.to} 생산/납품 현황(관리자)`, `${selectDate.from} ~ ${selectDate.to}`, tmpSelectList);\n  };\n\n  const buttonClickEvents = async number => {\n    switch (number) {\n      case 0:\n        setOnDataLoadModal(true);\n        return;\n\n      case 1:\n        let selectIndex = [];\n        let tmp = rowData.map((value, index) => {\n          if (selectList.has(value.id)) {\n            return;\n          } else {\n            selectIndex.push(index);\n            return _objectSpread({}, value);\n          }\n        }).filter(v => v);\n        let temp = [];\n        selectIndex.reverse().map((value, index) => {\n          temp.push(dateData[value * 2]);\n          temp.push(dateData[value * 2 + 1]);\n        });\n\n        if (!onHide) {\n          setDateData([...temp]);\n          setRowData([...tmp]);\n        } else {\n          if (state === \"local\") {\n            LoadData();\n          } else if (state === \"select\") {\n            SelectLoadData();\n          }\n        }\n\n        setOnHide(!onHide);\n        return;\n\n      case 2:\n        setOnTitleModal(true);\n        return;\n\n      case 3:\n        downloadExcel();\n        return;\n\n      default:\n        return;\n    }\n  };\n\n  useEffect(() => {\n    if (state === \"local\") {\n      LoadData();\n    } else if (state === \"select\") {\n      SelectLoadData();\n    }\n  }, [selectDate, keyword]);\n  useEffect(() => {\n    let modelWidth = 0;\n    column.map(v => {\n      modelWidth += v.width;\n    });\n    modelWidth += 36;\n    setExcelTableWidths(_objectSpread(_objectSpread({}, excelTableWidths), {}, {\n      data: 1576 - modelWidth,\n      model: modelWidth\n    }));\n  }, [column]);\n  useEffect(() => {\n    dateData.map((v, i) => {\n      Object.keys(v).map((key, index) => {\n        if (index > 1 && index < Object.keys(v).length - 2 && rowData[Math.floor(i / 2)].statistics.logs[index - 2]) {\n          if (v.title === \"생산\") {\n            rowData[Math.floor(i / 2)].statistics.logs[index - 2].produced = Number(v[key]);\n          } else if (v.title === \"납품\") {\n            rowData[Math.floor(i / 2)].statistics.logs[index - 2].shipped = Number(v[key]);\n          }\n        }\n      });\n    });\n    setRowData([...rowData]); // tmpRow.map((row: any, index: number) => {\n    //     let random = Math.random()*1000;\n    //     let tmp_row_produced = {};\n    //     let tmp_row_shipped = {};\n    //     row.statistics.logs.map((log)=>{\n    //         tmp_row_produced[log.date] = log.produced;\n    //         tmp_row_shipped[log.date] = log.shipped;\n    //     })\n    //     tmp_row_produced[\"total\"] = row.statistics.total_produced;\n    //     tmp_row_shipped[\"total\"] = row.statistics.total_shipped;\n    //\n    //     tmpRow_date.push({\n    //         title:\"생산\",\n    //         id: `product_${random}`,\n    //         ...tmp_row_produced\n    //     })\n    //\n    //     tmpRow_date.push({\n    //         title:\"납품\",\n    //         id: `product_${random+1}`,\n    //         ...tmp_row_shipped\n    //     })\n    // })\n  }, [dateData]);\n  return __jsx(ScrollSync, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 13\n    }\n  }, onTitleModal && __jsx(TitleCreateModal, {\n    title: \"저장할 데이터 제목\",\n    changeState: setOnTitleModal,\n    selectList: selectList,\n    selectDate: selectDate,\n    rowData: rowData,\n    LoadData: LoadData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 30\n    }\n  }), onDataLoadModal && __jsx(StockSearchModal, {\n    onDataLoadModal: onDataLoadModal,\n    setOnDataLoadModal: setOnDataLoadModal,\n    onChangeSelectDate: changeSelectDate,\n    setModalResult: setModalResult,\n    setState: setState,\n    changeSelectMonth: changeSelectMonth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 33\n    }\n  }), __jsx(MenuNavigation, {\n    pageType: 'MES',\n    subType: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    style: {\n      width: 1576\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 17\n    }\n  }, __jsx(ProfileHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 21\n    }\n  }), __jsx(PageHeader, {\n    title: \"생산/납품 현황(관리자용)\",\n    buttons: [\"데이터 불러오기\", onHide ? \"선택 행 숨김 취소\" : \"선택 행 숨김\", \"저장하기\", \"엑셀로 받기\"],\n    buttonsOnclick: buttonClickEvents,\n    isSearch: true,\n    searchOptionList: [\"고객사명\", \"고객사 모델\", \"CODE\", \"품명\"],\n    onChangeSearchOption: setOption,\n    isCalendar: true,\n    searchKeyword: keyword,\n    onChangeSearchKeyword: setKeyword,\n    calendarType: \"month\",\n    onChangeSelectDate: changeSelectDate,\n    selectDate: selectMonth,\n    setSelectDate: changeSelectMonth,\n    setState: setState,\n    dataLimit: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 21\n    }\n  }), modalResult && modalResult.name && state === \"select\" && __jsx(\"p\", {\n    style: {\n      color: \"white\",\n      fontSize: \"20px\",\n      fontWeight: \"bold\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 25\n    }\n  }, modalResult.name), __jsx(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 21\n    }\n  }, __jsx(ScrollSyncPane, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 25\n    }\n  }, __jsx(ExcelTable, {\n    headerList: [SelectColumn, ...column],\n    setHeaderList: value => {\n      // value.splice(0,1);\n      value.map((v, i) => {\n        if (v.name === \"\") {\n          value.splice(i, 1);\n        }\n      });\n      setColumn([...value]);\n    },\n    selectList: selectList,\n    setSelectList: setSelectList,\n    row: rowData,\n    setRow: setRowData,\n    width: excelTableWidths.model,\n    rowHeight: 80,\n    overflow: \"hidden\",\n    resizable: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 29\n    }\n  })), __jsx(ScrollSyncPane, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 25\n    }\n  }, __jsx(ExcelTable, {\n    headerList: dateColumn,\n    row: dateData,\n    setRow: setDateData,\n    maxWidth: excelTableWidths.data,\n    rowHeight: 40,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 29\n    }\n  }))))));\n};\n\nexport default Productlist;","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/main/pages/mes/stock/admin/index.tsx"],"names":["React","useEffect","useState","MenuNavigation","ProfileHeader","PageHeader","ExcelTable","RequestMethod","columnlist","SelectColumn","Notiflix","ScrollSync","ScrollSyncPane","ProductTitleFomatter","moment","UnitContainer","excelDownload","TitleCreateModal","StockSearchModal","TextEditor","Productlist","state","setState","rowData","setRowData","dateData","setDateData","column","setColumn","stockProduct","dateColumn","setDateColumn","stockDate","selectList","setSelectList","Set","selectMonth","setSelectMonth","Date","startOf","format","changeSelectMonth","value","keyword","setKeyword","option","setOption","selectDate","setSelectDate","from","to","endOf","onTitleModal","setOnTitleModal","onDataLoadModal","setOnDataLoadModal","changeSelectDate","modalResult","setModalResult","excelTableWidths","setExcelTableWidths","model","data","onHide","setOnHide","LoadData","Loading","standard","res","path","tab","params","opt","status","cleanUpData","remove","SelectLoadData","summary_id","version","tmpColumn","tmpRow","tmpRow_date","result","totalWidth","map","index","menuData","results","menus","menu","colName","key","id","name","title","width","unit","filter","v","summaries","length","statistics","logs","col","push","date","editor","formatter","unitData","frozen","tmpBasicRow_model","row","random_id","Math","random","undefined","customer_id","product","raw_material","customer","customer_idPK","cm_id","cm_idPK","code","tmp_row_produced","tmp_row_shipped","log","produced","shipped","carryforward","total_produced","total_shipped","downloadExcel","tmpSelectList","tmpSelectListData","has","sumProducedObject","sumShippedObject","Object","keys","buttonClickEvents","number","selectIndex","tmp","temp","reverse","modelWidth","i","floor","Number","display","color","fontSize","fontWeight","justifyContent","splice"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport MenuNavigation from \"../../../../component/MenuNav/MenuNavigation\";\nimport ProfileHeader from \"../../../../component/Profile/ProfileHeader\";\nimport PageHeader from \"../../../../component/Header/Header\";\nimport ExcelTable from \"../../../../component/Excel/ExcelTable\";\nimport {RequestMethod} from \"../../../../common/RequestFunctions\";\nimport {columnlist} from \"../../../../common/columnInit\";\nimport {IExcelHeaderType} from \"../../../../common/@types/type\";\n//@ts-ignore\nimport {SelectColumn} from \"react-data-grid\";\n//@ts-ignore\nimport Notiflix from \"notiflix\";\nimport {ScrollSync, ScrollSyncPane} from \"react-scroll-sync\";\nimport ProductTitleFomatter from \"../../../../component/Formatter/ProductTitleFomatter\";\nimport moment from \"moment\";\nimport UnitContainer from \"../../../../component/Unit/UnitContainer\";\nimport {excelDownload} from \"../../../../common/excelDownloadFunction\";\nimport TitleCreateModal from \"../../../../component/Modal/TitleCreateModal\";\nimport StockSearchModal from \"../../../../component/Modal/StockSearchModal\";\nimport TextEditor from \"../../../../component/InputBox/ExcelBasicInputBox\";\n\nconst Productlist = () => {\n\n    const [state, setState] = useState<\"local\" | \"select\">(\"local\");\n    const [rowData, setRowData] = useState<any[]>([]);\n    const [dateData, setDateData] = useState<any[]>([]);\n    const [column, setColumn] = useState<Array<IExcelHeaderType>>(columnlist.stockProduct);\n    const [dateColumn, setDateColumn] = useState<Array<IExcelHeaderType>>(columnlist.stockDate);\n\n    const [selectList, setSelectList] = useState<ReadonlySet<number>>(new Set());\n\n    const [selectMonth, setSelectMonth] = useState<string>(moment(new Date()).startOf(\"month\").format('YYYY-MM'))\n\n    const changeSelectMonth = (value:string) => {\n        setSelectMonth(value);\n    }\n\n    const [keyword, setKeyword] = useState<string>(\"\");\n    const [option, setOption] = useState<number>(0)\n\n    const [selectDate, setSelectDate] = useState<{from:string, to:string}>({\n        from: moment(new Date()).startOf(\"month\").format('YYYY-MM-DD') ,\n        to:  moment(new Date()).endOf(\"month\").format('YYYY-MM-DD')\n    });\n\n    const [onTitleModal, setOnTitleModal] = useState<boolean>(false);\n\n    const [onDataLoadModal, setOnDataLoadModal] = useState<boolean>(false);\n\n    const changeSelectDate = (from:string, to:string) => {\n        setSelectDate({from:from, to:to});\n    }\n\n    const [modalResult, setModalResult] = useState<any>();\n\n    const [excelTableWidths, setExcelTableWidths] = useState<{model:number, data:number}>({model:0, data:0});\n\n    const [onHide, setOnHide] = useState<boolean>(false);\n\n    const LoadData = async() => {\n        Notiflix.Loading.standard();\n        const res = await RequestMethod('get', 'stockProductList', {\n            path:{\n              tab:\"ROLE_STK_03\"\n            },\n            params:{\n                keyword:keyword,\n                opt:option,\n                from:selectDate.from,\n                to:selectDate.to\n            }\n        });\n\n        if(res && res.status === 200 ){\n            // if(res.results.summaries.length > 0){\n            cleanUpData(res, \"model\");\n            cleanUpData(res, \"date\");\n            // }\n            Notiflix.Loading.remove(300);\n        }\n    }\n\n    const SelectLoadData = async() => {\n\n        Notiflix.Loading.standard();\n        const res = await RequestMethod('get', 'summaryFetch', {\n            path:{\n                tab:\"ROLE_STK_03\",\n                summary_id:modalResult.summary_id,\n            },\n            params:{\n                keyword:keyword ?? \"\",\n                opt:option,\n                from:modalResult.from,\n                to:modalResult.to\n            }\n        })\n        if(res && res.status === 200 ){\n            // if(res.results.summaries.length > 0){\n            cleanUpData(res, \"model\");\n            cleanUpData(res, \"date\");\n            // }\n            Notiflix.Loading.remove(300);\n        }\n    }\n\n    const cleanUpData = async(res: any, version:string) => {\n        let tmpColumn = columnlist.stockProduct;\n        let tmpRow = [];\n        let tmpRow_date = [];\n        let result = [];\n        let totalWidth = 0;\n        switch (version){\n            case \"model\":\n                tmpColumn = columnlist.stockProduct.map((column: any, index) => {\n                    let menuData: object | undefined;\n                    res.results.menus && res.results.menus.map((menu: any) => {\n                        if(menu.colName === column.key){\n                            menuData = {\n                                id: menu.id,\n                                name: menu.title,\n                                width: menu.width,\n                                tab:menu.tab,\n                                unit:menu.unit,\n                            }\n                        } else if(menu.colName === 'id' && column.key === 'tmpId'){\n                            menuData = {\n                                id: menu.id,\n                                name: menu.title,\n                                width: menu.width,\n                                tab:menu.tab,\n                                unit:menu.unit\n                            }\n                        }\n                    })\n\n                    if(menuData){\n                        return {\n                            ...column,\n                            ...menuData\n                        }\n                    }\n                }).filter((v:any) => v)\n\n                tmpColumn.map((v)=>{\n                    totalWidth +=v.width\n                })\n                setExcelTableWidths({data:1576-totalWidth, model:totalWidth})\n                setColumn([...tmpColumn]);\n\n                break;\n                return\n            case \"date\":\n\n                if(res.results.summaries.length > 0){\n                    tmpColumn = res.results.summaries[0].statistics.logs.map((col)=>{\n                        result.push(\n                            {key:col.date, name:col.date, editor: TextEditor, formatter: UnitContainer, unitData: 'EA', width:100},\n                        );\n                    })\n                    setDateColumn([\n                        {key:\"title\", name:\"생산/납품\", formatter:ProductTitleFomatter, width:100, frozen:true},\n                        {key:\"carryforward\", name:\"전월 이월\", width:100, formatter: UnitContainer, unitData:\"EA\", frozen:true},\n                        {key:\"total\", name:\"합계\", width:100, formatter: UnitContainer, unitData:\"EA\", frozen:true},\n                        ...result,\n                    ]);\n                    result = [];\n                }else{\n                    result = [];\n\n                }\n                break;\n                return\n            default :\n                break;\n                return\n        }\n\n        tmpRow = res.results.summaries\n\n        let tmpBasicRow_model = tmpRow.map((row: any, index: number) => {\n            let random_id = Math.random()*1000;\n            const summary_id = res.results.summary_id ?? undefined;\n            return {\n                ...row,\n                customer_id: (index === 0 || tmpRow[index-1].product.raw_material.model.customer.customer_id !== row.product.raw_material.model.customer.customer_id) ?\n                    row.product.raw_material.model.customer.name : undefined,\n                customer_idPK: row.product.raw_material.model.customer.customer_id,\n                cm_id:row.product.raw_material.model.model,\n                cm_idPK: row.product.raw_material.model.cm_id,\n                model:row.product.raw_material.model.model,\n                code:row.product.raw_material.code,\n                name: row.product.raw_material.name,\n                summary_id: summary_id,\n                id: `product_${random_id}`,\n            }\n        })\n\n        tmpRow.map((row: any, index: number) => {\n            let random = Math.random()*1000;\n            let tmp_row_produced = {};\n            let tmp_row_shipped = {};\n            row.statistics.logs.map((log)=>{\n                tmp_row_produced[log.date] = log.produced;\n                tmp_row_shipped[log.date] = log.shipped;\n            })\n\n            tmp_row_produced[\"carryforward\"] = row.statistics.carryforward;\n            tmp_row_produced[\"total\"] = row.statistics.total_produced + row.statistics.carryforward;\n            tmp_row_shipped[\"total\"] = row.statistics.total_shipped;\n\n            tmpRow_date.push({\n                title:\"생산\",\n                id: `product_${random}`,\n                ...tmp_row_produced\n            })\n\n            tmpRow_date.push({\n                title:\"납품\",\n                id: `product_${random+1}`,\n                ...tmp_row_shipped\n            })\n        })\n\n\n        if(version === \"model\"){\n            setRowData([...tmpBasicRow_model])\n        }else if(version === \"date\"){\n            setDateData([...tmpRow_date]);\n        }\n    }\n\n    const downloadExcel = () => {\n        let tmpSelectList: boolean[] = []\n        let tmpSelectListData:any[] = []\n        rowData.map(row => {\n            tmpSelectList.push(selectList.has(row.id))\n            tmpSelectList.push(selectList.has(row.id))\n            // if(selectList.has(row.id)){\n                let sumProducedObject:any = {};\n                let sumShippedObject:any = {};\n                Object.keys(row).map((value)=>{\n                    if(value === \"statistics\"){\n                        row[value].logs.map((data)=>{\n                            sumProducedObject[data.date] =  data.produced;\n                            sumShippedObject[data.date] = data.shipped;\n                        })\n                    }else{\n                        sumProducedObject[value] = row[value];\n                    }\n                })\n\n                sumProducedObject[\"title\"] = \"생산\";\n                sumProducedObject[\"carryforward\"] = row.statistics.carryforward;\n                sumProducedObject[\"total\"] = row.statistics.total_produced;\n\n                sumShippedObject[\"title\"] = \"납품\";\n                // sumShippedObject[\"carryforward\"] = row.statistics.carryforward;\n                sumShippedObject[\"total\"] = row.statistics.total_shipped;\n\n                tmpSelectListData.push(sumProducedObject);\n                tmpSelectListData.push(sumShippedObject);\n            // }\n        })\n        excelDownload([...column, ...dateColumn], tmpSelectListData, `${selectDate.from} ~ ${selectDate.to} 생산/납품 현황(관리자)`, `${selectDate.from} ~ ${selectDate.to}`, tmpSelectList)\n    }\n\n    const buttonClickEvents = async(number:number) => {\n        switch (number){\n            case 0:\n                setOnDataLoadModal(true)\n                return\n            case 1:\n                let selectIndex = [];\n\n               let tmp = rowData.map((value,index)=>{\n                    if(selectList.has(value.id)){\n                        return\n                    }else{\n                        selectIndex.push(index);\n                        return {...value};\n                    }\n\n                }).filter((v)=>v)\n\n               let temp = [];\n               selectIndex.reverse().map((value,index)=>{\n                   temp.push(dateData[value*2]);\n                   temp.push(dateData[value*2+1]);\n               })\n\n                if(!onHide){\n                    setDateData([...temp])\n\n                   setRowData([...tmp]);\n                }else{\n                    if(state === \"local\"){\n                        LoadData();\n                    }else if(state === \"select\"){\n                        SelectLoadData();\n                    }\n\n                }\n                setOnHide(!onHide);\n\n\n                return\n            case 2:\n                setOnTitleModal(true);\n\n                return\n            case 3:\n                downloadExcel()\n                return\n            default:\n                return\n        }\n    }\n\n    useEffect(()=>{\n        if(state === \"local\"){\n            LoadData();\n        }else if(state === \"select\"){\n            SelectLoadData();\n        }\n    },[selectDate, keyword])\n\n    useEffect(()=>{\n        let modelWidth = 0;\n        column.map((v)=>{\n            modelWidth += v.width;\n        })\n            modelWidth += 36;\n        setExcelTableWidths({...excelTableWidths,data:1576-modelWidth, model:modelWidth})\n\n    },[column])\n\n    useEffect(()=>{\n        dateData.map((v,i)=>{\n            Object.keys(v).map((key,index)=>{\n                if(index > 1 && index < Object.keys(v).length-2 && rowData[Math.floor(i/2)].statistics.logs[index-2]){\n                    if(v.title === \"생산\"){\n                        rowData[Math.floor(i/2)].statistics.logs[index-2].produced = Number(v[key]);\n                    }else if(v.title === \"납품\"){\n                        rowData[Math.floor(i/2)].statistics.logs[index-2].shipped = Number(v[key]);\n                    }\n                }\n            })\n        })\n        setRowData([...rowData])\n\n        // tmpRow.map((row: any, index: number) => {\n        //     let random = Math.random()*1000;\n        //     let tmp_row_produced = {};\n        //     let tmp_row_shipped = {};\n        //     row.statistics.logs.map((log)=>{\n        //         tmp_row_produced[log.date] = log.produced;\n        //         tmp_row_shipped[log.date] = log.shipped;\n        //     })\n        //     tmp_row_produced[\"total\"] = row.statistics.total_produced;\n        //     tmp_row_shipped[\"total\"] = row.statistics.total_shipped;\n        //\n        //     tmpRow_date.push({\n        //         title:\"생산\",\n        //         id: `product_${random}`,\n        //         ...tmp_row_produced\n        //     })\n        //\n        //     tmpRow_date.push({\n        //         title:\"납품\",\n        //         id: `product_${random+1}`,\n        //         ...tmp_row_shipped\n        //     })\n        // })\n    },[dateData])\n\n    return(\n        <ScrollSync >\n            <div style={{display:\"flex\"}}>\n            {onTitleModal && <TitleCreateModal title={\"저장할 데이터 제목\"} changeState={setOnTitleModal} selectList={selectList} selectDate={selectDate} rowData={rowData} LoadData={LoadData} />}\n            {onDataLoadModal && <StockSearchModal\n                                    onDataLoadModal={onDataLoadModal}\n                                    setOnDataLoadModal={setOnDataLoadModal}\n                                    onChangeSelectDate={changeSelectDate}\n                                    setModalResult={setModalResult}\n                                    setState={setState}\n                                    changeSelectMonth={changeSelectMonth}\n                                />\n            }\n                <MenuNavigation pageType={'MES'} subType={3}/>\n                <div style={{width:1576}}>\n                    <ProfileHeader/>\n                    <PageHeader\n                        title={\"생산/납품 현황(관리자용)\"}\n                        buttons={[\"데이터 불러오기\", onHide ? \"선택 행 숨김 취소\" : \"선택 행 숨김\", \"저장하기\", \"엑셀로 받기\"]}\n                        buttonsOnclick={buttonClickEvents}\n                        isSearch={true}\n                        searchOptionList={[\"고객사명\",\"고객사 모델\",\"CODE\", \"품명\"]}\n                        onChangeSearchOption={setOption}\n                        isCalendar={true}\n                        searchKeyword={keyword}\n                        onChangeSearchKeyword={setKeyword}\n                        calendarType={\"month\"}\n                        onChangeSelectDate={changeSelectDate}\n                        selectDate={selectMonth}\n                        setSelectDate={changeSelectMonth}\n                        setState={setState}\n                        dataLimit={true}\n                    />\n                    {modalResult && modalResult.name && state === \"select\" &&\n                        <p style={{color:\"white\", fontSize:\"20px\", fontWeight:\"bold\"}}>{modalResult.name}</p>\n                    }\n                    <div style={{display:\"flex\",justifyContent:\"center\"}}>\n                        <ScrollSyncPane>\n                            <ExcelTable headerList={[\n                                            SelectColumn,\n                                            ...column\n                                        ]}\n                                        setHeaderList={(value) => {\n                                            // value.splice(0,1);\n                                            value.map((v,i)=>{\n                                                if(v.name === \"\"){\n                                                    value.splice(i, 1);\n                                                }\n                                            })\n                                            setColumn([...value])\n                                        }}\n                                        selectList={selectList}\n                                        setSelectList={setSelectList}\n                                        row={rowData} setRow={setRowData} width={excelTableWidths.model} rowHeight={80} overflow={\"hidden\"}\n                                        resizable\n                            />\n                        </ScrollSyncPane>\n                        <ScrollSyncPane>\n                            <ExcelTable headerList={dateColumn} row={dateData} setRow={setDateData} maxWidth={excelTableWidths.data} rowHeight={40} />\n                        </ScrollSyncPane>\n                    </div>\n                </div>\n            </div>\n        </ScrollSync>\n    );\n}\n\nexport default Productlist;\n"]},"metadata":{},"sourceType":"module"}