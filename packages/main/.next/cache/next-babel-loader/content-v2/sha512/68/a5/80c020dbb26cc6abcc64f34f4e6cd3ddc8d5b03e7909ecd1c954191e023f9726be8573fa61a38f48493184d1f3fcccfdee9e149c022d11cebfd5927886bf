{"ast":null,"code":"import _defineProperty from \"/Users/user/Desktop/sizl/mono_pop/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/shared/src/components/Dropdown/ExcelBasicDropdown.tsx\",\n    _this = this;\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Notiflix from 'notiflix';\n\nvar DropDownEditor = function DropDownEditor(_ref) {\n  var row = _ref.row,\n      onRowChange = _ref.onRowChange,\n      column = _ref.column;\n  return __jsx(\"select\", {\n    className: 'editDropdown',\n    style: {\n      border: 0,\n      width: '100%',\n      padding: '0 8px 0 9px',\n      color: column.type === 'Modal' ? 'black' : 'white',\n      backgroundColor: column.type === 'Modal' ? row.border ? '#19B9DF80' : 'white' : '#00000000'\n    },\n    value: row[column.key],\n    onChange: function onChange(event) {\n      var _column$selectList;\n\n      var pk = \"\";\n      Object.keys(column && column.selectList ? column.selectList[0] : []).map(function (v) {\n        if (v.indexOf('_id') !== -1) {\n          pk = v;\n        }\n      });\n      var pkValue = \"\";\n      (_column$selectList = column.selectList) === null || _column$selectList === void 0 ? void 0 : _column$selectList.map(function (v) {\n        if (v.name === event.target.value) {\n          if (v[pk]) {\n            pkValue = v[pk];\n          } else {\n            pkValue = v.pk;\n          }\n        }\n      });\n      var tmpPk = pk;\n\n      if (column.key === 'exhaustion' && row['current'] === 0) {\n        Notiflix.Report.failure('변경 실패!', '사용할 수 있는 재고가 없습니다', '확인');\n      } else {\n        var _pkValue, _objectSpread2;\n\n        var tmpData = {};\n\n        if (column.key === 'customer') {\n          var tmpCrn = '';\n          column.selectList.map(function (v) {\n            if (v.name === event.target.value) {\n              tmpCrn = v.crn;\n            }\n          });\n          tmpData = _objectSpread(_objectSpread({}, tmpData), {}, {\n            crn: tmpCrn\n          });\n        }\n\n        return onRowChange(_objectSpread(_objectSpread(_objectSpread({}, row), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, column.key, event.target.value), _defineProperty(_objectSpread2, column.key + \"PK\", (_pkValue = pkValue) !== null && _pkValue !== void 0 ? _pkValue : undefined), _defineProperty(_objectSpread2, tmpPk, event.target.value), _defineProperty(_objectSpread2, tmpPk + \"PK\", pkValue), _defineProperty(_objectSpread2, column.key + \"_id\", pkValue), _objectSpread2), tmpData), {}, {\n          isChange: true\n        }));\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, column.selectList && column.selectList.map(function (title) {\n    return __jsx(\"option\", {\n      key: title.pk,\n      value: title.name,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }, title.name);\n  }));\n};\n\n_c = DropDownEditor;\nexport { DropDownEditor };\n\nvar _c;\n\n$RefreshReg$(_c, \"DropDownEditor\");","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/shared/src/components/Dropdown/ExcelBasicDropdown.tsx"],"names":["React","Notiflix","DropDownEditor","row","onRowChange","column","border","width","padding","color","type","backgroundColor","key","event","pk","Object","keys","selectList","map","v","indexOf","pkValue","name","target","value","tmpPk","Report","failure","tmpData","tmpCrn","crn","undefined","isChange","title"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {IExcelHeaderType} from '../../common/@types/type'\nimport Notiflix from 'notiflix'\nimport {styled} from '@material-ui/core'\n\ninterface IProps {\n  column: IExcelHeaderType\n  row: any\n  onRowChange: (e: any) => void\n}\n\nconst DropDownEditor = ({ row, onRowChange, column }: IProps) => {\n  return (\n    <select\n      className={'editDropdown'}\n      style={{\n        border: 0,\n        width: '100%',\n        padding: '0 8px 0 9px',\n        color: column.type === 'Modal' ? 'black': 'white',\n        backgroundColor: column.type === 'Modal' ? row.border ? '#19B9DF80' : 'white' : '#00000000'\n      }}\n      value={row[column.key]}\n      onChange={(event) => {\n        let pk = \"\";\n        Object.keys(column && column.selectList ? column.selectList[0] : []).map((v) => {\n          if(v.indexOf('_id') !== -1){\n            pk = v\n          }\n        })\n\n        let pkValue = \"\"\n        column.selectList?.map((v) => {\n          if(v.name === event.target.value){\n            if(v[pk]){\n              pkValue = v[pk]\n            }else{\n              pkValue = v.pk\n            }\n          }\n        })\n\n        let tmpPk = pk\n\n        if(column.key === 'exhaustion' && row['current'] === 0){\n          Notiflix.Report.failure('변경 실패!', '사용할 수 있는 재고가 없습니다', '확인')\n        }else{\n          let tmpData = {}\n\n          if(column.key === 'customer') {\n            let tmpCrn = ''\n            column.selectList.map(v => {\n              if(v.name === event.target.value) {\n                tmpCrn = v.crn\n              }\n            })\n            tmpData = {\n              ...tmpData,\n              crn: tmpCrn\n            }\n          }\n\n          return onRowChange({\n            //@ts-ignore\n            ...row, [column.key]: event.target.value, [column.key+\"PK\"]: pkValue ?? undefined,\n            [tmpPk]: event.target.value, [tmpPk+\"PK\"]: pkValue, [column.key+\"_id\"]: pkValue, ...tmpData,\n            isChange: true\n          })\n        }\n      }}\n    >\n      {column.selectList && column.selectList.map((title) => {\n        return (<option key={title.pk} value={title.name}>\n          {title.name}\n        </option>)\n      })}\n    </select>\n  );\n}\n\nexport {DropDownEditor};\n"]},"metadata":{},"sourceType":"module"}