{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/basic/src/container/BasicPause.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { ExcelTable, Header as PageHeader, RequestMethod, columnlist, excelDownload } from 'shared'; // @ts-ignore\n\nimport { SelectColumn } from 'react-data-grid';\nimport Notiflix from \"notiflix\";\nimport { useRouter } from 'next/router';\nimport ButtonGroup from '../../../main/component/ButtonGroup';\n\nconst BasicPause = ({\n  page,\n  keyword,\n  option\n}) => {\n  const {\n    0: processBasicRow,\n    1: setProcessBasicRow\n  } = useState([]);\n  const {\n    0: processColumn,\n    1: setProcessColumn\n  } = useState(columnlist[`pause`]);\n  const {\n    0: processId,\n    1: setProcessId\n  } = useState(0);\n  const {\n    0: pauseBasicRow,\n    1: setPauseBasicRow\n  } = useState([]);\n  const {\n    0: pauseColumn,\n    1: setPauseColumn\n  } = useState(columnlist[`pauseReason`]);\n  const {\n    0: selectRow,\n    1: setSelectRow\n  } = useState(0);\n  const {\n    0: state,\n    1: setState\n  } = useState(false);\n  const {\n    0: selectList,\n    1: setSelectList\n  } = useState(new Set());\n  const {\n    0: excelUploadOpen,\n    1: setExcelUploadOpen\n  } = useState(false);\n  const router = useRouter();\n  useEffect(() => {\n    if (processBasicRow.length > 0) {\n      LoadPauseList(processBasicRow[selectRow].process_id);\n    }\n  }, [selectRow]);\n\n  const cleanUpBasicData = res => {\n    let tmpRow = [];\n    tmpRow = res.data.results.info_list.map((column, index) => {\n      let menuData = {};\n      menuData = {\n        index: index + 1,\n        width: column.width\n      };\n      let random_id = Math.random() * 1000;\n      return _objectSpread(_objectSpread({\n        id: random_id\n      }, column), menuData);\n    });\n    setPauseBasicRow([...tmpRow]);\n  };\n\n  const LoadPauseList = async value => {\n    const res = await RequestMethod(\"get\", `pauseReasonList`, {\n      path: {\n        page: 1,\n        renderItem: 51,\n        process_id: value\n      }\n    });\n\n    if (res && res.status === 200) {\n      let tmpColumn = columnlist[`pauseReason`];\n      tmpColumn = tmpColumn.map((value, index) => {\n        return _objectSpread(_objectSpread({}, value), {}, {\n          key: value.key,\n          name: value.name,\n          width: value.width\n        });\n      });\n      setPauseColumn(tmpColumn);\n      let tmpRow = [];\n      tmpRow = res.results.info_list.map((column, index) => {\n        let menuData = {};\n        menuData = {\n          index: index + 1,\n          width: column.width\n        };\n        let random_id = Math.random() * 1000;\n        return _objectSpread(_objectSpread({\n          id: random_id\n        }, column), menuData);\n      });\n      Notiflix.Loading.remove(300);\n      setPauseBasicRow([...tmpRow]);\n    }\n  };\n\n  const LoadBasic = async () => {\n    Notiflix.Loading.standard();\n    const res = await RequestMethod('get', `processList`, {\n      path: {\n        page: 1,\n        renderItem: 51\n      }\n    });\n\n    if (res && res.status === 200) {\n      let tmpColumn = columnlist[`pause`];\n\n      if (res.results.info_list.length > 0) {\n        setProcessId(res.results.info_list[selectRow].process_id);\n      }\n\n      let tmpRow = [];\n      tmpColumn = tmpColumn.map(column => {\n        let menuData = {};\n        res.results.menus.map(menu => {\n          if (menu.colName === column.key) {\n            menuData = {\n              id: menu.id,\n              name: menu.title,\n              width: 1560\n            };\n          }\n        });\n        return _objectSpread(_objectSpread({}, column), menuData);\n      });\n      tmpRow = res.results.info_list;\n\n      if (res.results.info_list.length > 0) {\n        LoadPauseList(res.results.info_list[selectRow].process_id);\n      } else {\n        Notiflix.Loading.remove(300);\n      }\n\n      setProcessColumn(tmpColumn);\n      setProcessBasicRow([...tmpRow.map(row => {\n        return _objectSpread({}, row);\n      })]);\n      Notiflix.Loading.remove(300);\n    } else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back();\n      });\n    }\n  };\n\n  const downloadExcel = () => {\n    let tmpSelectList = [];\n    pauseBasicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id));\n    });\n    excelDownload(pauseColumn, pauseBasicRow, `일시정지 유형 등록`, '일시정지 유형 등록', tmpSelectList);\n  };\n\n  const buttonEvents = async index => {\n    switch (index) {\n      case 0:\n        setExcelUploadOpen(true);\n        return;\n\n      case 1:\n        downloadExcel();\n        return;\n\n      case 2:\n        let dataRow = {};\n        columnlist[`pauseReason`].map((key, index) => {\n          if (key.key === \"index\") {\n            dataRow[key.key] = pauseBasicRow.length + 1;\n            dataRow.id = Math.random() * 100; // dataRow.id = index+1;\n          } else {\n            dataRow[key.key] = \"\";\n          }\n        });\n\n        if (processId !== 0) {\n          pauseBasicRow.push(_objectSpread({}, dataRow));\n          setPauseBasicRow([...pauseBasicRow]);\n        } else {\n          Notiflix.Report.warning(\"선택된 공정이 없습니다.\", \"\", \"확인\");\n        }\n\n        return;\n\n      case 3:\n        Notiflix.Loading.standard();\n        let savePauseBasicRow = [];\n        pauseBasicRow.map(value => {\n          if (value.reason === \"\" || value.reason === undefined) {} else {\n            savePauseBasicRow.push(value);\n          }\n        });\n\n        if (pauseBasicRow.length > 0) {\n          RequestMethod(\"post\", `pauseSave`, {\n            process_id: processBasicRow[selectRow].process_id,\n            reasons: savePauseBasicRow\n          }).then(() => {\n            Notiflix.Report.success(\"저장되었습니다.\", \"\", \"확인\");\n            LoadBasic();\n          }).catch(e => {\n            Notiflix.Loading.remove(300);\n            Notiflix.Report.warning(\"관리자에게 문의하세요.\", \"\", \"확인\");\n          });\n        } else {\n          Notiflix.Loading.remove(300);\n          Notiflix.Report.warning(\"저장할 데이터가 없습니다\", \"\", \"확인\");\n        }\n\n        return;\n\n      case 4:\n        Notiflix.Confirm.show(\"경고\", \"삭제하시겠습니까?\", \"확인\", \"취소\", async () => {\n          const idList = [];\n          const spliceArray = [];\n          pauseBasicRow.map((v, i) => {\n            if (selectList.has(v.id)) {\n              spliceArray.push(i);\n              idList.push(v.ppr_id);\n            }\n          });\n          const tmpPauseBasicRow = [...pauseBasicRow];\n          spliceArray.reverse();\n          spliceArray.map((value, index) => {\n            tmpPauseBasicRow.splice(value, 1);\n          });\n          const res = await RequestMethod(\"delete\", `pauseDelete`, {\n            reasons: idList.filter(v => v)\n          });\n\n          if (res && res.status === 200) {\n            Notiflix.Report.success(\"삭제되었습니다.\", \"\", \" 확인\");\n            sortObject(tmpPauseBasicRow); // LoadPauseList(processBasicRow[selectRow].process_id);\n          }\n        }, () => {});\n    }\n  };\n\n  const sortObject = object => {\n    const compare_qty = (a, b) => {\n      // a should come before b in the sorted order\n      if (a.lengthIndex < b.lengthIndex) {\n        return -1; // a should come after b in the sorted order\n      } else if (a.lengthIndex > b.lengthIndex) {\n        return 1; // a and b are the same\n      } else {\n        return 0;\n      }\n    };\n\n    object.sort(compare_qty);\n    let sortData = object.map((v, index) => {\n      return _objectSpread(_objectSpread({}, v), {}, {\n        index: index + 1,\n        lengthIndex: index + 1\n      });\n    });\n    setPauseBasicRow([...sortData]);\n  };\n\n  useEffect(() => {\n    LoadBasic();\n  }, []);\n  useEffect(() => {\n    if (state) {\n      sortObject(pauseBasicRow);\n      setState(false);\n    }\n  }, [pauseBasicRow]);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 5\n    }\n  }, __jsx(PageHeader, {\n    title: \"일시정지 유형 등록\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    style: {\n      marginTop: 15\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }\n  }, __jsx(ExcelTable, {\n    editable: true,\n    headerList: [...processColumn],\n    row: processBasicRow,\n    setRow: setProcessBasicRow,\n    setSelectRow: setSelectRow,\n    width: 1576,\n    height: 280,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      margin: \"15px 0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 9\n    }\n  }, __jsx(\"span\", {\n    style: {\n      color: \"white\",\n      fontSize: 22,\n      fontWeight: \"bold\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 25\n    }\n  }, processBasicRow[selectRow] && processBasicRow[selectRow].name), __jsx(ButtonGroup, {\n    buttons: [\"엑셀로 업로드\", \"엑셀로 받기\", \"행 추가\", \"저장하기\", \"삭제\"],\n    buttonsOnclick: buttonEvents,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 11\n    }\n  })), __jsx(ExcelTable, {\n    editable: true,\n    headerList: [SelectColumn, ...pauseColumn],\n    row: pauseBasicRow,\n    setRow: e => {\n      let tmp = selectList;\n      e.map(v => {\n        if (v.isChange) tmp.add(v.id);\n      });\n      setSelectList(tmp);\n      setState(true);\n      setPauseBasicRow(e);\n    },\n    width: 1576,\n    height: 440 // setSelectList={changeSetSelectList}\n    //@ts-ignore\n    ,\n    setSelectList: setSelectList,\n    selectList: selectList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport const getServerSideProps = ctx => {\n  var _ctx$query$page, _ctx$query$keyword, _ctx$query$opt;\n\n  return {\n    props: {\n      page: (_ctx$query$page = ctx.query.page) !== null && _ctx$query$page !== void 0 ? _ctx$query$page : 1,\n      keyword: (_ctx$query$keyword = ctx.query.keyword) !== null && _ctx$query$keyword !== void 0 ? _ctx$query$keyword : \"\",\n      option: (_ctx$query$opt = ctx.query.opt) !== null && _ctx$query$opt !== void 0 ? _ctx$query$opt : 0\n    }\n  };\n};\nexport { BasicPause };","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/basic/src/container/BasicPause.tsx"],"names":["React","useEffect","useState","ExcelTable","Header","PageHeader","RequestMethod","columnlist","excelDownload","SelectColumn","Notiflix","useRouter","ButtonGroup","BasicPause","page","keyword","option","processBasicRow","setProcessBasicRow","processColumn","setProcessColumn","processId","setProcessId","pauseBasicRow","setPauseBasicRow","pauseColumn","setPauseColumn","selectRow","setSelectRow","state","setState","selectList","setSelectList","Set","excelUploadOpen","setExcelUploadOpen","router","length","LoadPauseList","process_id","cleanUpBasicData","res","tmpRow","data","results","info_list","map","column","index","menuData","width","random_id","Math","random","id","value","path","renderItem","status","tmpColumn","key","name","Loading","remove","LoadBasic","standard","menus","menu","colName","title","row","Report","failure","back","downloadExcel","tmpSelectList","push","has","buttonEvents","dataRow","warning","savePauseBasicRow","reason","undefined","reasons","then","success","catch","e","Confirm","show","idList","spliceArray","v","i","ppr_id","tmpPauseBasicRow","reverse","splice","filter","sortObject","object","compare_qty","a","b","lengthIndex","sort","sortData","marginTop","display","justifyContent","margin","color","fontSize","fontWeight","tmp","isChange","add","getServerSideProps","ctx","props","query","opt"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {\n  ExcelTable,\n  Header as PageHeader,\n  RequestMethod,\n  columnlist,\n  MAX_VALUE,\n  DropDownEditor,\n  TextEditor,\n  excelDownload,\n  PaginationComponent,\n  ExcelDownloadModal,\n  IExcelHeaderType, IItemMenuType\n} from 'shared'\n// @ts-ignore\nimport {SelectColumn} from 'react-data-grid'\nimport Notiflix from \"notiflix\";\nimport {useRouter} from 'next/router'\nimport {loadAll} from 'react-cookies'\nimport {NextPageContext} from 'next'\nimport ButtonGroup from '../../../main/component/ButtonGroup'\n\nexport interface IProps {\n  children?: any\n  page?: number\n  keyword?: string\n  option?: number\n}\n\nconst BasicPause = ({page, keyword, option}: IProps) => {\n\n  const [processBasicRow, setProcessBasicRow] = useState<any[]>([]);\n  const [processColumn, setProcessColumn] = useState<Array<IExcelHeaderType>>(columnlist[`pause`]);\n\n  const [processId, setProcessId] = useState<number>(0);\n\n  const [pauseBasicRow, setPauseBasicRow] = useState<any[]>([]);\n  const [pauseColumn, setPauseColumn] = useState<Array<IExcelHeaderType>>(columnlist[`pauseReason`]);\n  const [selectRow, setSelectRow] = useState<any>(0);\n\n  const [state, setState] = useState<boolean>(false);\n\n  const [selectList, setSelectList] = useState<Set<any>>(new Set());\n\n  const [excelUploadOpen, setExcelUploadOpen] = useState<boolean>(false);\n\n  const router = useRouter()\n\n  useEffect(()=>{\n    if(processBasicRow.length > 0){\n      LoadPauseList(processBasicRow[selectRow].process_id);\n    }\n  },[selectRow])\n\n  const cleanUpBasicData = (res:any) => {\n    let tmpRow = [];\n    tmpRow = res.data.results.info_list.map((column: any,index:number) => {\n      let menuData: object = {};\n\n      menuData = {\n        index:index+1,\n        width: column.width,\n      }\n      let random_id = Math.random()*1000;\n      return {\n        id: random_id,\n        ...column,\n        ...menuData\n      }\n    })\n    setPauseBasicRow([...tmpRow]);\n  }\n\n  const LoadPauseList = async (value:string) => {\n    const res = await RequestMethod(\"get\", `pauseReasonList`,{\n      path: {\n        page:1,\n        renderItem:51,\n        process_id:value\n      }\n    })\n\n    if(res && res.status === 200){\n      let tmpColumn = columnlist[`pauseReason`];\n      tmpColumn = tmpColumn.map((value:any,index:number) => {\n        return {...value, key:value.key, name:value.name, width:value.width}\n      })\n      setPauseColumn(tmpColumn);\n\n      let tmpRow = [];\n      tmpRow = res.results.info_list.map((column: any,index:number) => {\n        let menuData: object = {};\n\n        menuData = {\n          index:index+1,\n          width: column.width,\n        }\n        let random_id = Math.random()*1000;\n        return {\n          id: random_id,\n          ...column,\n          ...menuData\n        }\n      })\n      Notiflix.Loading.remove(300);\n      setPauseBasicRow([...tmpRow]);\n    }\n  }\n\n  const LoadBasic = async () => {\n    Notiflix.Loading.standard();\n    const res = await RequestMethod('get', `processList`,{\n      path: {\n        page: 1,\n        renderItem: 51,\n      }\n    })\n    if(res && res.status === 200){\n      let tmpColumn = columnlist[`pause`];\n      if(res.results.info_list.length > 0){\n        setProcessId(res.results.info_list[selectRow].process_id);\n      }\n      let tmpRow = []\n      tmpColumn = tmpColumn.map((column: any) => {\n        let menuData: object = {};\n\n        res.results.menus.map((menu: any) => {\n          if(menu.colName === column.key){\n            menuData = {\n              id: menu.id,\n              name: menu.title,\n              width: 1560\n            }\n          }\n        })\n\n        return {\n          ...column,\n          ...menuData\n        }\n      })\n      tmpRow = res.results.info_list\n      if(res.results.info_list.length > 0){\n        LoadPauseList(res.results.info_list[selectRow].process_id);\n      }else{\n        Notiflix.Loading.remove(300);\n      }\n      setProcessColumn(tmpColumn);\n      setProcessBasicRow([...tmpRow.map((row: any) => {\n        return {\n          ...row,\n        }\n      })])\n      Notiflix.Loading.remove(300);\n    }else if (res.state === 401) {\n      Notiflix.Report.failure('불러올 수 없습니다.', '권한이 없습니다.', '확인', () => {\n        router.back()\n      })\n    }\n  }\n  const downloadExcel = () => {\n    let tmpSelectList: boolean[] = []\n    pauseBasicRow.map(row => {\n      tmpSelectList.push(selectList.has(row.id))\n    })\n\n    excelDownload(pauseColumn, pauseBasicRow, `일시정지 유형 등록`, '일시정지 유형 등록', tmpSelectList)\n  }\n\n  const buttonEvents = async(index:number) => {\n    switch (index) {\n      case 0 :\n        setExcelUploadOpen(true)\n        return\n      case 1 :\n        downloadExcel();\n        return\n      case 2 :\n        let dataRow:any = {};\n\n        columnlist[`pauseReason`].map((key:any,index:number)=>{\n          if(key.key === \"index\"){\n            dataRow[key.key] = pauseBasicRow.length+1;\n            dataRow.id = Math.random()*100;\n            // dataRow.id = index+1;\n          }else{\n            dataRow[key.key] = \"\";\n          }\n        })\n\n        if(processId !== 0){\n          pauseBasicRow.push({...dataRow})\n          setPauseBasicRow([...pauseBasicRow])\n        }else{\n          Notiflix.Report.warning(\"선택된 공정이 없습니다.\",\"\",\"확인\");\n        }\n        return\n      case 3 :\n        Notiflix.Loading.standard();\n        let savePauseBasicRow:any[] = [];\n        pauseBasicRow.map((value)=>{\n          if(value.reason === \"\" || value.reason === undefined){\n          }else{\n            savePauseBasicRow.push(value);\n          }\n        })\n\n        if(pauseBasicRow.length > 0 ) {\n          RequestMethod(\"post\", `pauseSave`, {\n            process_id: processBasicRow[selectRow].process_id,\n            reasons: savePauseBasicRow\n          }).then(() => {\n            Notiflix.Report.success(\"저장되었습니다.\", \"\", \"확인\");\n            LoadBasic();\n          }).catch((e) => {\n            Notiflix.Loading.remove(300);\n            Notiflix.Report.warning(\"관리자에게 문의하세요.\", \"\", \"확인\");\n          })\n        }else{\n          Notiflix.Loading.remove(300);\n          Notiflix.Report.warning(\"저장할 데이터가 없습니다\", \"\", \"확인\");\n        }\n        return\n\n      case 4 :\n        Notiflix.Confirm.show(\"경고\",\"삭제하시겠습니까?\",\"확인\",\"취소\",\n          async()=>{\n            const idList:number[] = [];\n            const spliceArray:number[] = [];\n\n            pauseBasicRow.map((v,i)=> {\n              if(selectList.has(v.id)){\n                spliceArray.push(i);\n                idList.push(v.ppr_id)\n              }\n            })\n\n            const tmpPauseBasicRow = [...pauseBasicRow];\n            spliceArray.reverse();\n            spliceArray.map((value, index)=>{\n              tmpPauseBasicRow.splice(value, 1);\n            })\n\n            const res = await RequestMethod(\"delete\", `pauseDelete`, {reasons:idList.filter(v => v) } );\n\n            if(res && res.status === 200){\n              Notiflix.Report.success(\"삭제되었습니다.\",\"\",\" 확인\");\n              sortObject(tmpPauseBasicRow);\n              // LoadPauseList(processBasicRow[selectRow].process_id);\n            }\n          },\n          ()=>{}\n        )\n    }\n  }\n\n  const sortObject = (object:any) => {\n    const  compare_qty = (a:any, b:any) => {\n      // a should come before b in the sorted order\n      if(a.lengthIndex < b.lengthIndex){\n        return -1;\n        // a should come after b in the sorted order\n      }else if(a.lengthIndex > b.lengthIndex){\n        return 1;\n        // a and b are the same\n      }else{\n        return 0;\n      }\n    }\n\n    object.sort(compare_qty)\n    let sortData = object.map((v:object, index:number)=>{\n      return {...v, index:index+1, lengthIndex:index+1}\n    });\n    setPauseBasicRow([...sortData]);\n\n  }\n\n  useEffect(()=>{\n    LoadBasic();\n  },[])\n\n  useEffect(()=>{\n    if(state){\n      sortObject(pauseBasicRow);\n      setState(false);\n    }\n  },[pauseBasicRow])\n\n  return (\n    <div>\n      <PageHeader title={\"일시정지 유형 등록\"} />\n      <div style={{marginTop:15}}>\n        <ExcelTable\n          editable\n          headerList={[\n            ...processColumn\n          ]}\n          row={processBasicRow}\n          setRow={setProcessBasicRow}\n          setSelectRow={setSelectRow}\n          width={1576}\n          height={280}\n        />\n        <div style={{display:\"flex\", justifyContent:\"space-between\", margin:\"15px 0\"}}>\n                        <span style={{color:\"white\", fontSize:22, fontWeight:\"bold\"}}>\n                            {processBasicRow[selectRow] && processBasicRow[selectRow].name}\n                        </span>\n          <ButtonGroup buttons={[\"엑셀로 업로드\", \"엑셀로 받기\", \"행 추가\", \"저장하기\", \"삭제\"]} buttonsOnclick={buttonEvents}/>\n        </div>\n        <ExcelTable\n          editable\n          headerList={[\n            SelectColumn,\n            ...pauseColumn\n          ]}\n          row={pauseBasicRow}\n          setRow={(e) => {\n            let tmp: Set<any> = selectList\n            e.map(v => {\n              if(v.isChange) tmp.add(v.id)\n            })\n            setSelectList(tmp)\n            setState(true)\n            setPauseBasicRow(e)\n          }}\n          width={1576}\n          height={440}\n          // setSelectList={changeSetSelectList}\n          //@ts-ignore\n          setSelectList={setSelectList}\n          selectList={selectList}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport const getServerSideProps = (ctx: NextPageContext) => {\n  return {\n    props: {\n      page: ctx.query.page ?? 1,\n      keyword: ctx.query.keyword ?? \"\",\n      option: ctx.query.opt ?? 0,\n    }\n  }\n}\n\nexport {BasicPause};\n"]},"metadata":{},"sourceType":"module"}