{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/shared/src/components/FileUpload/ExcelBasicFileUpload.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useRef } from 'react';\n//@ts-ignore\nimport Icon_X from '../../../public/images/file_delete_button.png';\nimport { UploadButton } from '../../styles/styledComponents';\nimport { uploadTempFile } from '../../common/fileFuctuons';\nimport { SF_ENDPOINT_RESOURCE } from '../../common/configset';\n\nconst FileEditer = ({\n  row,\n  column,\n  onRowChange,\n  onClose\n}) => {\n  const fileRef = useRef(null);\n\n  const onClickImageUpload = index => {\n    // input[type='file'] ref함\n    // @ts-ignore\n    fileRef.current.click();\n  };\n\n  return (// <input\n    //   className={'editCell'}\n    //   ref={autoFocusAndSelect}\n    //   value={row[column.key]}\n    //   onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n    //   onBlur={() => onClose(true)}\n    // />\n    __jsx(\"div\", {\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 5\n      }\n    }, row[column.key] ? __jsx(\"div\", {\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }\n    }, __jsx(\"img\", {\n      onClick: () => {\n        onRowChange(_objectSpread(_objectSpread({}, row), {}, {\n          [column.key + 'Path']: null,\n          [column.key]: null\n        }));\n      },\n      src: Icon_X,\n      style: {\n        borderRadius: \"4px\",\n        width: \"24px\",\n        height: \"24px\",\n        marginRight: \"4px\",\n        marginLeft: '4px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }), __jsx(\"p\", {\n      style: {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap'\n      },\n      onClick: () => {\n        if (row[column.key + 'Path']) {\n          window.open(SF_ENDPOINT_RESOURCE + `/${row[column.key + 'Path']}`);\n        } else {\n          window.open(SF_ENDPOINT_RESOURCE + `${row[column.key + 'Resource']}`);\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, row[column.key])) : __jsx(React.Fragment, null, __jsx(UploadButton, {\n      onClick: () => {\n        onClickImageUpload(column.key);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }\n    }, \"\\uD30C\\uC77C \\uCCA8\\uBD80\\uD558\\uAE30\"))), __jsx(\"input\", {\n      key: `${column.key}`,\n      id: `${column.key}`,\n      ref: fileRef,\n      type: \"file\",\n      hidden: true,\n      onChange: async e => {\n        if (e.target.files && e.target.files.length !== 0) {\n          const uploadImg = await uploadTempFile(e.target.files[0], true);\n          onRowChange(_objectSpread(_objectSpread({}, row), {}, {\n            [column.key]: uploadImg.results.path,\n            [column.key + 'Resource']: uploadImg.results.resource,\n            isChange: true\n          }));\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }))\n  );\n};\n\nexport { FileEditer };","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/shared/src/components/FileUpload/ExcelBasicFileUpload.tsx"],"names":["React","useRef","Icon_X","UploadButton","uploadTempFile","SF_ENDPOINT_RESOURCE","FileEditer","row","column","onRowChange","onClose","fileRef","onClickImageUpload","index","current","click","width","height","display","justifyContent","alignItems","key","borderRadius","marginRight","marginLeft","overflow","textOverflow","whiteSpace","window","open","e","target","files","length","uploadImg","results","path","resource","isChange"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef} from 'react'\nimport {IExcelHeaderType} from '../../common/@types/type'\n//@ts-ignore\nimport Icon_X from '../../../public/images/file_delete_button.png'\nimport {UploadButton} from '../../styles/styledComponents'\nimport {uploadTempFile} from '../../common/fileFuctuons'\nimport {SF_ENDPOINT_RESOURCE} from '../../common/configset'\n\ninterface IProps {\n  row: any\n  column: IExcelHeaderType\n  onRowChange: (e: any) => void\n  onClose: (state: boolean) => void\n}\n\n\nconst FileEditer = ({ row, column, onRowChange, onClose }: IProps) => {\n  const fileRef = useRef(null)\n\n  const onClickImageUpload = (index: string) => {// input[type='file'] ref함\n    // @ts-ignore\n    fileRef.current.click();\n  }\n\n  return (\n    // <input\n    //   className={'editCell'}\n    //   ref={autoFocusAndSelect}\n    //   value={row[column.key]}\n    //   onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n    //   onBlur={() => onClose(true)}\n    // />\n    <div style={{\n      width: \"100%\",\n      height: \"100%\",\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    }}>\n      {\n        row[column.key] ?\n          <div style={{\n            width: \"100%\",\n            height: \"100%\",\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}>\n            <img\n              onClick={()=>{\n                  onRowChange({\n                    ...row,\n                    [column.key+'Path']: null,\n                    [column.key]: null,\n                  })\n              }}\n              src={Icon_X} style={{borderRadius:\"4px\", width:\"24px\", height:\"24px\", marginRight:\"4px\", marginLeft: '4px'}} />\n            <p\n              style={{\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                whiteSpace:'nowrap'\n              }}\n              onClick={() => {\n                if(row[column.key+'Path']){\n                  window.open(SF_ENDPOINT_RESOURCE+`/${row[column.key+'Path']}`)\n                }else{\n                  window.open(SF_ENDPOINT_RESOURCE+`${row[column.key+'Resource']}`)\n                }\n              }}\n            >\n              {\n                row[column.key]\n              }\n            </p>\n          </div>\n          : <>\n            <UploadButton onClick={() => {\n              onClickImageUpload(column.key)\n            }}>\n              <p>파일 첨부하기</p>\n            </UploadButton>\n          </>\n      }\n      <input\n        key={`${column.key}`}\n        id={`${column.key}`}\n        ref={fileRef}\n        type={\"file\"}\n        hidden\n        onChange={async (e) => {\n          if(e.target.files && e.target.files.length !== 0) {\n            const uploadImg = await uploadTempFile(e.target.files[0], true)\n            onRowChange({\n              ...row,\n              [column.key]: uploadImg.results.path,\n              [column.key+'Resource']: uploadImg.results.resource,\n              isChange: true\n            })\n          }\n        }}\n      />\n    </div>\n  );\n}\n\n\n\nexport {FileEditer};\n"]},"metadata":{},"sourceType":"module"}