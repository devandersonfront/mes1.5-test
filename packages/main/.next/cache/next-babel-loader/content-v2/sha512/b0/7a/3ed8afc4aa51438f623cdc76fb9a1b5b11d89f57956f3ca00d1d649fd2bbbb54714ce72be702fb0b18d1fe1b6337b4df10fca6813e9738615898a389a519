{"ast":null,"code":"import _regeneratorRuntime from \"/Users/user/Desktop/sizl/mono_pop/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/user/Desktop/sizl/mono_pop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/user/Desktop/sizl/mono_pop/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/user/Desktop/sizl/mono_pop/packages/shared/src/components/FileUpload/ExcelBasicFileUpload.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useRef } from 'react';\n//@ts-ignore\nimport Icon_X from '../../../public/images/file_delete_button.png';\nimport { UploadButton } from '../../styles/styledComponents';\nimport { uploadTempFile } from '../../common/fileFuctuons';\nimport { SF_ENDPOINT_RESOURCE } from '../../common/configset';\n\nvar FileEditer = function FileEditer(_ref) {\n  _s();\n\n  var row = _ref.row,\n      column = _ref.column,\n      onRowChange = _ref.onRowChange,\n      onClose = _ref.onClose;\n  var fileRef = useRef(null);\n\n  var onClickImageUpload = function onClickImageUpload(index) {\n    // input[type='file'] ref함\n    // @ts-ignore\n    fileRef.current.click();\n  };\n\n  return (// <input\n    //   className={'editCell'}\n    //   ref={autoFocusAndSelect}\n    //   value={row[column.key]}\n    //   onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n    //   onBlur={() => onClose(true)}\n    // />\n    __jsx(\"div\", {\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 5\n      }\n    }, row[column.key] ? __jsx(\"div\", {\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }\n    }, __jsx(\"img\", {\n      onClick: function onClick() {\n        var _objectSpread2;\n\n        onRowChange(_objectSpread(_objectSpread({}, row), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, column.key + 'Path', null), _defineProperty(_objectSpread2, column.key, null), _objectSpread2)));\n      },\n      src: Icon_X,\n      style: {\n        borderRadius: \"4px\",\n        width: \"24px\",\n        height: \"24px\",\n        marginRight: \"4px\",\n        marginLeft: '4px'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }), __jsx(\"p\", {\n      style: {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap'\n      },\n      onClick: function onClick() {\n        if (row[column.key + 'Path']) {\n          window.open(SF_ENDPOINT_RESOURCE + \"/\".concat(row[column.key + 'Path']));\n        } else {\n          window.open(SF_ENDPOINT_RESOURCE + \"\".concat(row[column.key + 'Resource']));\n        }\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, row[column.key])) : __jsx(React.Fragment, null, __jsx(UploadButton, {\n      onClick: function onClick() {\n        onClickImageUpload(column.key);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }\n    }, \"\\uD30C\\uC77C \\uCCA8\\uBD80\\uD558\\uAE30\"))), __jsx(\"input\", {\n      key: \"\".concat(column.key),\n      id: \"\".concat(column.key),\n      ref: fileRef,\n      type: \"file\",\n      hidden: true,\n      onChange: /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n          var _objectSpread3, uploadImg;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (!(e.target.files && e.target.files.length !== 0)) {\n                    _context.next = 5;\n                    break;\n                  }\n\n                  _context.next = 3;\n                  return uploadTempFile(e.target.files[0], true);\n\n                case 3:\n                  uploadImg = _context.sent;\n                  onRowChange(_objectSpread(_objectSpread({}, row), {}, (_objectSpread3 = {}, _defineProperty(_objectSpread3, column.key, uploadImg.results.path), _defineProperty(_objectSpread3, column.key + 'Resource', uploadImg.results.resource), _defineProperty(_objectSpread3, \"isChange\", true), _objectSpread3)));\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }(),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }))\n  );\n};\n\n_s(FileEditer, \"4UJHyBFm9OsKaahfnaT9HCATB1E=\");\n\n_c = FileEditer;\nexport { FileEditer };\n\nvar _c;\n\n$RefreshReg$(_c, \"FileEditer\");","map":{"version":3,"sources":["/Users/user/Desktop/sizl/mono_pop/packages/shared/src/components/FileUpload/ExcelBasicFileUpload.tsx"],"names":["React","useRef","Icon_X","UploadButton","uploadTempFile","SF_ENDPOINT_RESOURCE","FileEditer","row","column","onRowChange","onClose","fileRef","onClickImageUpload","index","current","click","width","height","display","justifyContent","alignItems","key","borderRadius","marginRight","marginLeft","overflow","textOverflow","whiteSpace","window","open","e","target","files","length","uploadImg","results","path","resource"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef} from 'react'\nimport {IExcelHeaderType} from '../../common/@types/type'\n//@ts-ignore\nimport Icon_X from '../../../public/images/file_delete_button.png'\nimport {UploadButton} from '../../styles/styledComponents'\nimport {uploadTempFile} from '../../common/fileFuctuons'\nimport {SF_ENDPOINT_RESOURCE} from '../../common/configset'\n\ninterface IProps {\n  row: any\n  column: IExcelHeaderType\n  onRowChange: (e: any) => void\n  onClose: (state: boolean) => void\n}\n\n\nconst FileEditer = ({ row, column, onRowChange, onClose }: IProps) => {\n  const fileRef = useRef(null)\n\n  const onClickImageUpload = (index: string) => {// input[type='file'] ref함\n    // @ts-ignore\n    fileRef.current.click();\n  }\n\n  return (\n    // <input\n    //   className={'editCell'}\n    //   ref={autoFocusAndSelect}\n    //   value={row[column.key]}\n    //   onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n    //   onBlur={() => onClose(true)}\n    // />\n    <div style={{\n      width: \"100%\",\n      height: \"100%\",\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    }}>\n      {\n        row[column.key] ?\n          <div style={{\n            width: \"100%\",\n            height: \"100%\",\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}>\n            <img\n              onClick={()=>{\n                  onRowChange({\n                    ...row,\n                    [column.key+'Path']: null,\n                    [column.key]: null,\n                  })\n              }}\n              src={Icon_X} style={{borderRadius:\"4px\", width:\"24px\", height:\"24px\", marginRight:\"4px\", marginLeft: '4px'}} />\n            <p\n              style={{\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                whiteSpace:'nowrap'\n              }}\n              onClick={() => {\n                if(row[column.key+'Path']){\n                  window.open(SF_ENDPOINT_RESOURCE+`/${row[column.key+'Path']}`)\n                }else{\n                  window.open(SF_ENDPOINT_RESOURCE+`${row[column.key+'Resource']}`)\n                }\n              }}\n            >\n              {\n                row[column.key]\n              }\n            </p>\n          </div>\n          : <>\n            <UploadButton onClick={() => {\n              onClickImageUpload(column.key)\n            }}>\n              <p>파일 첨부하기</p>\n            </UploadButton>\n          </>\n      }\n      <input\n        key={`${column.key}`}\n        id={`${column.key}`}\n        ref={fileRef}\n        type={\"file\"}\n        hidden\n        onChange={async (e) => {\n          if(e.target.files && e.target.files.length !== 0) {\n            const uploadImg = await uploadTempFile(e.target.files[0], true)\n            onRowChange({\n              ...row,\n              [column.key]: uploadImg.results.path,\n              [column.key+'Resource']: uploadImg.results.resource,\n              isChange: true\n            })\n          }\n        }}\n      />\n    </div>\n  );\n}\n\n\n\nexport {FileEditer};\n"]},"metadata":{},"sourceType":"module"}