'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var styled = require('styled-components');
var styled__default = _interopDefault(styled);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  strings.raw = raw;
  return strings;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  it = o[Symbol.iterator]();
  return it.next.bind(it);
}

function _templateObject4() {
  var data = _taggedTemplateLiteralLoose(["\n  min-height: ", ";\n  height: ", ";\n  overflow: scroll;\n  width: ", ";\n  min-width: ", ";\n  flex-grow: 1;\n\n  ", "\n"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteralLoose(["\n        ", ";\n        height: auto;\n      "]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteralLoose(["\n  resize: ", ";\n  overflow: 'auto';\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n  position: relative;\n  display: flex;\n  flex-direction: ", ";\n  height: ", ";\n  flex-wrap: initial;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}
var Parent = /*#__PURE__*/styled__default.div( /*#__PURE__*/_templateObject(), function (_ref) {
  var flexDirection = _ref.flexDirection;
  return flexDirection;
}, function (_ref2) {
  var height = _ref2.height;
  return height !== null && height !== void 0 ? height : 'auto';
});

var baseResizeStyle = function baseResizeStyle(resizeDir) {
  return styled.css(_templateObject2(), resizeDir);
};

var resizeStyles = function resizeStyles(_ref3) {
  var resizeable = _ref3.resizeable,
      resizeDir = _ref3.resizeDir;
  if (!resizeable && !resizeDir) return;
  return resizeDir === 'both' || resizeDir === 'vertical' ? styled.css(_templateObject3(), baseResizeStyle(resizeDir)) : baseResizeStyle(resizeDir);
};

var StyledChild = /*#__PURE__*/styled__default.div( /*#__PURE__*/_templateObject4(), function (_ref4) {
  var minHeight = _ref4.minHeight;
  return minHeight !== null && minHeight !== void 0 ? minHeight : 'auto';
}, function (_ref5) {
  var height = _ref5.height;
  return height !== null && height !== void 0 ? height : '100%';
}, function (_ref6) {
  var width = _ref6.width;
  return width;
}, function (_ref7) {
  var minWidth = _ref7.minWidth;
  return minWidth !== null && minWidth !== void 0 ? minWidth : 'min-content';
}, resizeStyles);

var debounce = function debounce(func, waitFor) {
  var timeout = null;

  var debounced = function debounced() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (timeout !== null) {
      clearTimeout(timeout);
      timeout = null;
    }

    timeout = setTimeout(function () {
      return func.apply(void 0, args);
    }, waitFor);
  };

  return debounced;
};

var median = function median(arr) {
  var mid = Math.floor(arr.length / 2);
  var sorted = [].concat(arr).sort(function (a, b) {
    return a - b;
  });
  return arr.length % 2 !== 0 ? sorted[mid] : (sorted[mid - 1] + sorted[mid]) / 2;
};

var generateRandomString = function generateRandomString() {
  return Math.random().toString(20).substr(2, 20);
};

var Resizeable = function Resizeable(_ref) {
  var children = _ref.children,
      _ref$as = _ref.as,
      as = _ref$as === void 0 ? 'div' : _ref$as,
      _ref$flexDirection = _ref.flexDirection,
      flexDirection = _ref$flexDirection === void 0 ? 'row' : _ref$flexDirection,
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? '100%' : _ref$height;

  var _React$useState = React.useState(generateRandomString()),
      resizeId = _React$useState[0];

  var parent = React.useRef(null);
  var minWidth = React.useRef(0);
  var medianRootWidth = React.useRef(0);
  var totalMinWidths = React.useRef(0);
  var resizeWidthDiff = React.useRef(0);
  React.useEffect(function () {
    if (!parent.current) return;
    var widths = [];
    var totalByResize = {
      resizeTotalWidths: 0,
      nonResizeTotalWidths: 0
    };
    Array.from(parent.current.children).map(function (c) {
      var width = Number(getComputedStyle(c).getPropertyValue('min-width').replace('px', ''));
      widths = [].concat(widths, [width]);

      if (getComputedStyle(c).getPropertyValue('resize') === 'none') {
        totalByResize = _extends({}, totalByResize, {
          nonResizeTotalWidths: totalByResize.nonResizeTotalWidths + width
        });
      } else {
        totalByResize = _extends({}, totalByResize, {
          resizeTotalWidths: totalByResize.resizeTotalWidths + width
        });
      }
    });
    minWidth.current = Math.min.apply(Math, widths);
    totalMinWidths.current = widths.reduce(function (acc, val) {
      return val + acc;
    }, 0);
    medianRootWidth.current = Math.ceil(Math.sqrt(median(widths)));
    resizeWidthDiff.current = Math.abs(totalByResize.resizeTotalWidths - totalByResize.nonResizeTotalWidths);
  }, [parent]);
  var onResize = React.useCallback(function (_temp) {
    var _ref2 = _temp === void 0 ? {} : _temp,
        totalMin = _ref2.totalMin;

    if (!parent.current) return;
    var minToMeasure = totalMin !== null && totalMin !== void 0 ? totalMin : totalMinWidths.current;

    if (minToMeasure >= window.innerWidth) {
      parent.current.style.flexWrap = 'wrap';
      parent.current.style.height = 'auto';
    } else {
      parent.current.style.flexWrap = '';
      parent.current.style.height = height;
    }
  }, [parent, totalMinWidths.current]);
  React.useEffect(function () {
    var _React$Children$map;

    // setup MutationObserver
    var resizeableChildren = (_React$Children$map = React.Children.map(children, function (child, idx) {
      var _child$props, _child$props$resize;

      if (!React.isValidElement(child)) return child;
      return ((_child$props = child.props) === null || _child$props === void 0 ? void 0 : (_child$props$resize = _child$props.resize) === null || _child$props$resize === void 0 ? void 0 : _child$props$resize.resizeable) ? document.getElementById("resizeable-" + resizeId + "-" + idx) : null;
    })) === null || _React$Children$map === void 0 ? void 0 : _React$Children$map.filter(function (child) {
      return Boolean(child);
    });
    var config = {
      attributes: true,
      attributeFilter: ['style'],
      attributeOldValue: true
    };

    var callback = function callback(mutationsList) {
      window.requestAnimationFrame(function () {
        if (!Array.isArray(mutationsList) || !mutationsList.length) {
          return;
        } // Use traditional 'for loops' for IE 11


        for (var _iterator = _createForOfIteratorHelperLoose(mutationsList), _step; !(_step = _iterator()).done;) {
          var mutation = _step.value;
          if (mutation.type !== 'attributes') return;

          if (mutation.target instanceof HTMLElement) {
            var newTotalMin = totalMinWidths.current - minWidth.current + mutation.target.offsetWidth + medianRootWidth.current + resizeWidthDiff.current;

            if (newTotalMin >= window.innerWidth) {
              onResize({
                totalMin: newTotalMin
              });
            }
          }
        }
      });
    };

    var observer = new MutationObserver(callback);
    resizeableChildren === null || resizeableChildren === void 0 ? void 0 : resizeableChildren.forEach(function (el) {
      if (el instanceof HTMLElement) {
        observer.observe(el, config);
      }
    });
    return function () {
      observer.disconnect();
    };
  }, []);
  React.useEffect(function () {
    // on initial mount ensure proper flex layout
    onResize();
  }, [onResize]);
  React.useEffect(function () {
    // @ts-ignore it complains we're not typing the event but we don't care about it
    window.addEventListener('resize', debounce(onResize, 200));
    return function () {
      // @ts-ignore it complains we're not typing the event but we don't care about it
      window.removeEventListener('resize', onResize);
    };
  }, [onResize]);
  return React.createElement(Parent, {
    as: as,
    ref: parent,
    flexDirection: flexDirection,
    height: height
  }, React.Children.map(children, function (child, idx) {
    if (!React.isValidElement(child)) return child;
    return React.cloneElement(child, _extends({}, child.props, {
      id: "resizeable-" + resizeId + "-" + idx
    }));
  }));
};

var Child = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      resize = _ref.resize,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "resize"]);

  return React.createElement(StyledChild, Object.assign({
    ref: ref
  }, resize, props), children);
});

exports.Child = Child;
exports.Resizeable = Resizeable;
//# sourceMappingURL=react-resizeable.cjs.development.js.map
